<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风的影子</title>
  <subtitle>小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muleimulei.github.io/"/>
  <updated>2017-03-22T15:39:39.666Z</updated>
  <id>https://muleimulei.github.io/</id>
  
  <author>
    <name>穆蕾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript函数柯里化</title>
    <link href="https://muleimulei.github.io/2017/03/22/JavaScript/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://muleimulei.github.io/2017/03/22/JavaScript/函数柯里化/</id>
    <published>2017-03-21T16:34:44.227Z</published>
    <updated>2017-03-22T15:39:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接 <a href="http://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="external">函数柯里化</a></p>
<h2 id="什么是函数柯里化"><a href="#什么是函数柯里化" class="headerlink" title="什么是函数柯里化"></a>什么是函数柯里化</h2><p>柯里化（Curring）,又称为部分求值，是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果。</p>
<a id="more"></a>
<h2 id="柯里化特点"><a href="#柯里化特点" class="headerlink" title="柯里化特点"></a>柯里化特点</h2><blockquote>
<ul>
<li>接受单一参数，将更多的参数通过回调函数来解决。</li>
<li>返回一个新的函数，用于处理所有的想要传入的参数。</li>
<li>需要利用call/apply与arguments伪数组收集参数。</li>
<li>返回的函数正是用来处理收集起来的参数。</li>
</ul>
</blockquote>
<h3 id="需要理解JavaScript函数的隐式转换"><a href="#需要理解JavaScript函数的隐式转换" class="headerlink" title="需要理解JavaScript函数的隐式转换"></a>需要理解JavaScript函数的隐式转换</h3><p>JavaScript是一种弱类型语言，它的隐式转换是非常灵活的。<br>如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>试着运行一下你会发现答案为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;<span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>接着我们在修改代码为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line">fn.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>你会发现答案为：20，接着我们在进行修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line">fn.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">fn.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>答案为30</p>
<p>当我们使用console.log()或者进行运算时，隐式转换就可能会发生。从上面的例子我们可以得到如下结论：</p>
<blockquote>
<p>当我们没有重新定义toString()与valueOf时，函数的隐式转换会调用默认的toString方法，他会将函数的定义内容转化为字符串返回。当我们主动定义了toString()/valueOf时，那么隐式转化的返回结果则由我们自己控制了。其中valueOf的优先级会比toString()高。</p>
</blockquote>
<h3 id="需要知道如何利用call-apply封装数组的map方法"><a href="#需要知道如何利用call-apply封装数组的map方法" class="headerlink" title="需要知道如何利用call/apply封装数组的map方法"></a>需要知道如何利用call/apply封装数组的map方法</h3><blockquote>
<p>map:对数组的每一项运行给定的函数，将每次函数调用返回的结果组成新的数组。</p>
</blockquote>
<p>具体实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._map = <span class="function"><span class="keyword">function</span>(<span class="params">fn,ctx</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = <span class="keyword">this</span>,</div><div class="line">        temp = []; <span class="comment">//用来存储返回的新值</span></div><div class="line">        <span class="built_in">console</span>.log(list);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn ==<span class="string">'function'</span>)&#123;</div><div class="line">        <span class="comment">//遍历数组的每一项</span></div><div class="line">        list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            temp.push(fn.call(ctx,item,index));</div><div class="line">        &#125;);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.err(<span class="string">'TypeError:'</span>+fn+<span class="string">' must be a function'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]._map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item + index;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<h3 id="理解函数柯里化"><a href="#理解函数柯里化" class="headerlink" title="理解函数柯里化"></a>理解函数柯里化</h3><blockquote>
<p>考虑实现一个add方法，使结果能够满足如下预期：<br>add(1)(2) = 3<br>add(1,2,3)(4) = 10<br>add(1)(2)(3)(4)(5) = 15</p>
</blockquote>
<p>一开始如果只有两个参数，你可能会这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有三个的话，可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> a+b+c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有n个呢，难道要一直嵌套下去，而且2,3种情况也没有覆盖到。所以，要利用函数柯里化，利用闭包的特性，将所有参数，集中到最后的返回函数里进行计算并返回结果。因此，我们在写代码时，要将所有的参数集中起来处理。<br>具体实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">rest</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    rest.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> sum+=item;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">...rest</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _args = rest;</div><div class="line">    <span class="keyword">var</span> _adder = <span class="function"><span class="keyword">function</span>(<span class="params">...rest</span>)</span>&#123;</div><div class="line">        [].push.apply(_args, rest);</div><div class="line">        <span class="keyword">return</span> _adder;</div><div class="line">    &#125;</div><div class="line">    _adder.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="keyword">return</span> getSum(_args);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _adder();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="我们再来考虑函数柯里化的例子"><a href="#我们再来考虑函数柯里化的例子" class="headerlink" title="我们再来考虑函数柯里化的例子"></a>我们再来考虑函数柯里化的例子</h3><blockquote>
<p>假如有一个计算要求，需要我们将数组里面的每一项用我们自己想要的字符给连接起来。我们该怎么做？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">chars</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(chars);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = arr.merge(<span class="string">'-'</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<blockquote>
<p>在考虑将数组每一位加一位数在连接起来</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">chars,number</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> item+number;    </div><div class="line">    &#125;).join(chars);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = arr.merge(<span class="string">'-'</span>,<span class="number">7</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<blockquote>
<p>我们并不知道自己要对数组进行何种处理，所以我们要把对数组的操作封装起来。我们现在只知道需要将他们处理后用字符串连接起来，所以不妨将他们的处理内容保存在函数中，而仅仅固定封装连起来的部分。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">fn,chars</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(fn).join(chars);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> num + item;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item - num;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//每一项加2合并</span></div><div class="line"><span class="keyword">var</span> res1 = arr.merge(add(<span class="number">2</span>),<span class="string">'-'</span>);</div><div class="line"><span class="comment">//每一项减2合并</span></div><div class="line"><span class="keyword">var</span> res2 = arr.merge(reduce(<span class="number">2</span>),<span class="string">'-'</span>);</div><div class="line"><span class="comment">//也可以直接传入回调函数</span></div><div class="line"><span class="keyword">var</span> res3 = arr.merge((<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item + num;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="number">2</span>),<span class="string">'-'</span>);</div></pre></td></tr></table></figure>
<h2 id="柯里化通用式"><a href="#柯里化通用式" class="headerlink" title="柯里化通用式"></a>柯里化通用式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = [].slice.apply(<span class="built_in">arguments</span>,[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _args = args.concat([].slice.apply(<span class="built_in">arguments</span>));</div><div class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,_args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = currying(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> list.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;);</div><div class="line">&#125;,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="柯里化与bind"><a href="#柯里化与bind" class="headerlink" title="柯里化与bind"></a>柯里化与bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        fn.apply(ctx,_args.concat([].slice.call(<span class="built_in">arguments</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接 &lt;a href=&quot;http://www.jianshu.com/p/5e1899fe7d6b&quot;&gt;函数柯里化&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是函数柯里化&quot;&gt;&lt;a href=&quot;#什么是函数柯里化&quot; class=&quot;headerlink&quot; title=&quot;什么是函数柯里化&quot;&gt;&lt;/a&gt;什么是函数柯里化&lt;/h2&gt;&lt;p&gt;柯里化（Curring）,又称为部分求值，是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="函数柯里化" scheme="https://muleimulei.github.io/tags/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript内置函数</title>
    <link href="https://muleimulei.github.io/2017/01/05/JavaScript/JavaScript%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>https://muleimulei.github.io/2017/01/05/JavaScript/JavaScript内置函数解析/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-03-24T12:00:04.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这篇文章将介绍几个关于JavaScript内置函数的简单算法"><a href="#这篇文章将介绍几个关于JavaScript内置函数的简单算法" class="headerlink" title="这篇文章将介绍几个关于JavaScript内置函数的简单算法"></a>这篇文章将介绍几个关于JavaScript内置函数的简单算法</h2><a id="more"></a>
<h2 id="一、将字符串重复一定次数"><a href="#一、将字符串重复一定次数" class="headerlink" title="一、将字符串重复一定次数"></a>一、将字符串重复一定次数</h2><h3 id="1-使用while循环"><a href="#1-使用while循环" class="headerlink" title="1. 使用while循环"></a>1. 使用while循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">num,str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> repeatStr = <span class="string">''</span>;</div><div class="line">    <span class="keyword">while</span>(num--)&#123;</div><div class="line">        repeatStr+=str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> repeatStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用递归"><a href="#2-使用递归" class="headerlink" title="2. 使用递归"></a>2. 使用递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStringNumTimes</span>(<span class="params">str,times</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(times&lt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(times===<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> str + repeatStringNumTimes(str,times<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-使用es6的repeat"><a href="#3-使用es6的repeat" class="headerlink" title="3. 使用es6的repeat"></a>3. 使用es6的repeat</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStringNumTimes</span>(<span class="params">str,times</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> times&lt;<span class="number">0</span>?<span class="string">''</span>:str.repeat(times);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、检查某一字符串是否已特定字符串结束"><a href="#二、检查某一字符串是否已特定字符串结束" class="headerlink" title="二、检查某一字符串是否已特定字符串结束"></a>二、检查某一字符串是否已特定字符串结束</h2><h3 id="1-利用substr函数"><a href="#1-利用substr函数" class="headerlink" title="1. 利用substr函数"></a>1. 利用substr函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str,target</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.substr(-target.length)===target? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用内置函数"><a href="#2-使用内置函数" class="headerlink" title="2. 使用内置函数"></a>2. 使用内置函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str,target</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.endsWith(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三、翻转字符串"><a href="#三、翻转字符串" class="headerlink" title="三、翻转字符串"></a>三、翻转字符串</h2><h3 id="1-使用split-reverse-join"><a href="#1-使用split-reverse-join" class="headerlink" title="1. 使用split(),reverse(),join()"></a>1. 使用split(),reverse(),join()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).reserve().join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用for循环"><a href="#2-使用for循环" class="headerlink" title="2.使用for循环"></a>2.使用for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> newStr = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> len = str.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        newStr+=str[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-使用递归"><a href="#3-使用递归" class="headerlink" title="3. 使用递归"></a>3. 使用递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(str===<span class="string">''</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>)+reverseStr(str.substr(<span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、将一个句子的每个单词首字母大写，其余小写"><a href="#四、将一个句子的每个单词首字母大写，其余小写" class="headerlink" title="四、将一个句子的每个单词首字母大写，其余小写"></a>四、将一个句子的每个单词首字母大写，其余小写</h2><h3 id="1-使用for循环"><a href="#1-使用for循环" class="headerlink" title="1. 使用for循环"></a>1. 使用for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = str.toLowerCase().split(<span class="string">' '</span>);</div><div class="line">    <span class="keyword">var</span> len = list.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt;len;i++)&#123;</div><div class="line">        list[i] = list[i].charAt(<span class="number">0</span>).toUpperCase() + list[i].substr(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list.join(<span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用map方法"><a href="#2-使用map方法" class="headerlink" title="2. 使用map方法"></a>2. 使用map方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> word.charAt(<span class="number">0</span>).toUpperCase()+ word.slice(<span class="number">1</span>);</div><div class="line">    &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用replace方法"><a href="#2-使用replace方法" class="headerlink" title="2. 使用replace方法"></a>2. 使用replace方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> word.replace(word[<span class="number">0</span>],word[<span class="number">0</span>].toUpperCase());</div><div class="line">    &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这篇文章将介绍几个关于JavaScript内置函数的简单算法&quot;&gt;&lt;a href=&quot;#这篇文章将介绍几个关于JavaScript内置函数的简单算法&quot; class=&quot;headerlink&quot; title=&quot;这篇文章将介绍几个关于JavaScript内置函数的简单算法&quot;&gt;&lt;/a&gt;这篇文章将介绍几个关于JavaScript内置函数的简单算法&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="function" scheme="https://muleimulei.github.io/tags/function/"/>
    
  </entry>
  
</feed>
