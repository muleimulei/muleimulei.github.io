<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风的影子</title>
  <subtitle>小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muleimulei.github.io/"/>
  <updated>2017-07-31T09:18:47.556Z</updated>
  <id>https://muleimulei.github.io/</id>
  
  <author>
    <name>穆蕾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>module的加载实现</title>
    <link href="https://muleimulei.github.io/2017/07/31/JavaScript/module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://muleimulei.github.io/2017/07/31/JavaScript/module的加载实现/</id>
    <published>2017-07-31T07:37:28.196Z</published>
    <updated>2017-07-31T09:18:47.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>module的加载实现</p>
</blockquote>
<h2 id="浏览器加载"><a href="#浏览器加载" class="headerlink" title="浏览器加载"></a>浏览器加载</h2><ol>
<li>传统方法</li>
</ol>
<p>在HTML网页中，浏览器通过<code>script</code>标签加载JavaScript脚本<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 页面内嵌的脚本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">//module code</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 外部脚本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/JavaScript"</span> <span class="attr">src</span>=<span class="string">"path/to/Module.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，由于浏览器的脚本的默认语言是JavaScript，因此<code> type=”application/javascript” </code>可以省略。</p>
<p>默认情况下，浏览器同步加载JavaScript脚本，即渲染引擎遇到script标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。</p>
<p>下面有两种异步加载的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"mymodule.js"</span> defer&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"mymodule.js"</span> <span class="keyword">async</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>上面代码中，script标签打开defer或async属性，脚本就会异步加载。渲染引擎遇到这一命令，就会开始下载外部脚本，但不会等他下载和执行，而是直接执行后面的命令。</p>
<blockquote>
<p>defer与async的区别是：前者要等到整个页面正常渲染结束，才会执行；后者一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。</p>
</blockquote>
<ol>
<li>加载规则</li>
</ol>
<p>浏览器加载ES6模块，也使用script标签，但要加入type=”module”属性。<br><code> <script type="module" src="foo.js"></script> </code>上面代码在网页插入foo.js，由于type属性设为module，所以浏览器知道这是一个ES6模块。</p>
<p>浏览器对于带有type=”module”的script，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，在执行模块脚本，等同于打开了script标签的defer属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"foo.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;!-- 等同于 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"foo.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>script标签的async属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，在恢复渲染。<br><code> <script type="module" src="foo.js" async></script> </code><br>ES6模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"module"</span>&gt;</div><div class="line">    <span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'./util.js'</span></div><div class="line">    <span class="comment">// other code</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>对于外部的模块的脚本，有几点注意。</p>
<blockquote>
<ol>
<li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li>
<li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code></li>
<li>模块之中，可以使用import命令加载其它模块(<strong> .js后缀不可省略，需要提供绝对url与相对url </strong>)，也可以使用export命令输出绝对接口。</li>
<li>模块之中，顶层的this关键字返回undefined，而不是window。也就是说，在模块顶层使用this关键字，是无意义的。</li>
<li>同一个模块如果加载多次，将只执行一次</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'https://example.com/js/utils.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x === <span class="built_in">window</span>.x); <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">undefined</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> x; <span class="comment">// 句法错误，严格模式禁止删除变量</span></div></pre></td></tr></table></figure>
<p><strong> 利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在es6模块之中 </strong></p>
<p><code>const isNotModuleScript = this !== undefined</code></p>
<ol>
<li>ES6模块与CommonJs模块的差异</li>
</ol>
<p>它们有两个重大差异</p>
<ul>
<li>CommonJs 模块输出的是一个值的拷贝，ES6模块输出的是一个值的引用。</li>
<li>CommonJs 模块是运行时加载，ES6模块是编译时输出接口</li>
</ul>
<p>第二个差异是因为CommonJs加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而ES6模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<p>下面重点解释第一个差异。</p>
<p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">counter</span>: counter,</div><div class="line">  <span class="attr">incCounter</span>: incCounter,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./lib'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mod.counter);  <span class="comment">// 3</span></div><div class="line">mod.incCounter();</div><div class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></div><div class="line">上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</div><div class="line"></div><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  get counter() &#123;</div><div class="line">    <span class="keyword">return</span> counter</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">incCounter</span>: incCounter,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node main.js</div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<blockquote>
<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>
</blockquote>
<p>export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mod.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sum += <span class="number">1</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> c = <span class="keyword">new</span> C();</div></pre></td></tr></table></figure></p>
<p>上面的脚本mod.js，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// x.js</div><div class="line">import &#123;c&#125; from &apos;./mod&apos;;</div><div class="line">c.add();</div><div class="line"></div><div class="line">// y.js</div><div class="line">import &#123;c&#125; from &apos;./mod&apos;;</div><div class="line">c.show();</div><div class="line"></div><div class="line">// main.js</div><div class="line">import &apos;./x&apos;;</div><div class="line">import &apos;./y&apos;;</div><div class="line">现在执行main.js，输出的是1。</div><div class="line"></div><div class="line">$ babel-node main.js</div><div class="line">1</div></pre></td></tr></table></figure>
<p>这就证明了x.js和y.js加载的都是C的同一个实例。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;module的加载实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;浏览器加载&quot;&gt;&lt;a href=&quot;#浏览器加载&quot; class=&quot;headerlink&quot; title=&quot;浏览器加载&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="https://muleimulei.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>Vue的非父子组件通信</title>
    <link href="https://muleimulei.github.io/2017/07/30/Vue/%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>https://muleimulei.github.io/2017/07/30/Vue/非父子组件通信/</id>
    <published>2017-07-30T14:12:52.333Z</published>
    <updated>2017-07-30T14:32:18.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Vue的非父子组件通信</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>可以通过vuex和event bus来解决</p>
</blockquote>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们要实现的效果是：</p>
<img src="/assets/segment/vue1.jpg">
<p>上下分别为foo组件和bar组件，他们之间是非父子关系，分别点击各自的button，另一个组件的count对应增加。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>非父子组件通信<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bar</span>&gt;</span><span class="tag">&lt;/<span class="name">bar</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>JavaScript的实现是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册一个空的Vue实例，作为“中转站”</span></div><div class="line"><span class="keyword">var</span> eventBus = <span class="keyword">new</span> Vue(&#123;&#125;)</div><div class="line"><span class="comment">//foo组件</span></div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;&lt;p&gt;the count of foo is &#123;&#123;fooCount&#125;&#125;&lt;/p&gt;</span></div><div class="line">                &lt;button @click="addBar"&gt;add bar's count&lt;/button&gt;</div><div class="line">            &lt;/div&gt;`,</div><div class="line">    data () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">fooCount</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        addBar () &#123;</div><div class="line">            eventBus.$emit(<span class="string">'addBar'</span>,<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted () &#123;</div><div class="line">        eventBus.$on(<span class="string">'addFoo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fooCount += num    </div><div class="line">        &#125;.bind(<span class="keyword">this</span>)) <span class="comment">//这里必须将this绑定到组件实例上，如果不使用bind，也可以使用箭头函数。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//bar组件</span></div><div class="line"><span class="keyword">var</span> bar = &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;&lt;p&gt;the count of bar is &#123;&#123;fooCount&#125;&#125;&lt;/p&gt;</span></div><div class="line">                &lt;button @click="addBar"&gt;add foo's count&lt;/button&gt;</div><div class="line">            &lt;/div&gt;`,</div><div class="line">    data () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">barCount</span>: <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        addFoo () &#123;</div><div class="line">            eventBus.$emit(<span class="string">'addFoo'</span>,<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted () &#123;</div><div class="line">        eventBus.$on(<span class="string">'addBar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.barCount += num</div><div class="line">        &#125;.bind(<span class="keyword">this</span>)) <span class="comment">//这里必须将this绑定到组件实例上，如果不使用bind，也可以使用箭头函数。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue (&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">components</span>: &#123;</div><div class="line">        foo,</div><div class="line">        bar</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>以上就实现了一个简易的非父子组件之间的通信方式。通过event bus，在一个组件创建时的钩子函数中监听某个事件，而在需要与其进行通信的组件中触发这个函数，同时交换数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Vue的非父子组件通信&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://muleimulei.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Git的reset与checkout的区别</title>
    <link href="https://muleimulei.github.io/2017/07/29/git/git%E7%9A%84reset%E4%B8%8Echeckout%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://muleimulei.github.io/2017/07/29/git/git的reset与checkout的区别/</id>
    <published>2017-07-29T04:12:25.099Z</published>
    <updated>2017-07-29T06:26:48.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Git的reset与checkout的区别</p>
</blockquote>
<a id="more"></a>
<h2 id="Head，Index，Working-Director"><a href="#Head，Index，Working-Director" class="headerlink" title="Head，Index，Working Director"></a>Head，Index，Working Director</h2><ol>
<li><p>Git里面的三个重要区域</p>
<ul>
<li>HEAD指向最近一次commit里的所以snapshot</li>
<li>Index 缓存区域，只有Index区域里的东西才可以被commit</li>
<li><p>Working Directory 用户操作区域</p>
<img src="/assets/segment/git1.png">
</li>
</ul>
</li>
</ol>
<h2 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h2><p>当你checkout分支的时候，git做了这么三件事情</p>
<pre><code>&gt; 将HEAD指向那个分支的最后一次commit
&gt; 将HEAD指向的commit里所有的文件的snapshot替换掉Index区域里面的内容
&gt; 将Index区域里面的内容填充到Working Directory里
</code></pre><p>所以你可以发现，HEAD，Index，Working Directory这个时候里的内容都是一摸一样的。<br><strong> 注意：一般会误解为，Index中的内容是空的，只有git add后才会有东西。实际上不是，Index里一直是有东西的。 </strong>，所以，git里的所有操作就是对这三个区域的状态的操作。</p>
<h2 id="Changed"><a href="#Changed" class="headerlink" title="Changed"></a>Changed</h2><p>如果你在Working Directory里修改了文件，git会发现Working Directory里面的内容与Index区域里面的内容不一致了。这个时候<code>git status</code>的结果就是：<br><code>Changes not staged for commit</code></p>
<h2 id="Staged"><a href="#Staged" class="headerlink" title="Staged"></a>Staged</h2><p>一个文件仅仅changed是不能够被commit的，git要求只能提交Index里的东西。所以需要git add，这个命令的意思是，把changed的文件的内容同步到Index区域里。这样Working Directory和Index区域的内容就一致了，这个过程称之为stage，这个时候<code>git status</code>的结果是：<code>Changes to be commited</code></p>
<h2 id="Commited"><a href="#Commited" class="headerlink" title="Commited"></a>Commited</h2><p>最后，就可以提交了<code>git commit</code>，这样，就把HEAD的状态和Index以及Working Directory就形成了一致了。</p>
<h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>reset是用来修改提交历史的，想象这种情况，如果你在2天前提交了一个东西，突然发现这个提交是有问题的。这个时候你有两个选择，要么使用<code>git revert</code>（推荐），要么使用<code>git reset</code>。</p>
<img src="/assets/segment/git2.png">
<p>上图可以看到git reset是会修改版本历史的，他会丢弃掉一些版本历史。而git revert是根据那个commit逆向生成一个新的commit，版本历史是不会破会的。</p>
<h1 id="已经push到远程仓库的commit不允许reset"><a href="#已经push到远程仓库的commit不允许reset" class="headerlink" title="已经push到远程仓库的commit不允许reset"></a>已经push到远程仓库的commit不允许reset</h1><p>上面已经讲了，<code>git reset</code>是会丢弃掉commit的。如果commit已经被push到远程仓库上了，也就意味着其它开发人员就可能基于这个commit形成了新的commit，这时你去reset，就会造成其它开发人员的提交历史莫名其妙的丢失，或者其它灾难性的后果。</p>
<p><strong> 因此，一旦commit已经被push到远程仓库，那么是坚决不允许去reset它的。 </strong></p>
<h1 id="不带文件参数的reset"><a href="#不带文件参数的reset" class="headerlink" title="不带文件参数的reset"></a>不带文件参数的reset</h1><p>前面章节已经说到Git有三个区域，Git的所有操作实际上是在操作这三个区域的状态（或内容）。<br>git reset配合不同的参数，对这三个区域会产生不同的影响。reset实际上有三个步骤，根据不同的参数可以决定执行哪个步骤(<code>–soft,–mixed,–hard</code>)。</p>
<pre><code>1. 改变HEAD所指向的commit(--soft)
2. 执行第一步，将Index区域更新为HEAD所指向的commit里包含的内容(--mixed)
3. 执行第1,2步，将Working Directory区域更新为HEAD所指向的commit里包含的内容(--hard)
</code></pre><h1 id="带文件参数的reset"><a href="#带文件参数的reset" class="headerlink" title="带文件参数的reset"></a>带文件参数的reset</h1><p>上面讲到的git reset实际上不带参数的，那带上文件参数呢？</p>
<ol>
<li>HEAD不会动</li>
<li>将那个commit的snapshot里的文件放到Index区域中</li>
</ol>
<p><strong> 需要注意的是带文件参数的git reset没有–hard, –soft这两个参数。只有–mixed参数。 </strong></p>
<h1 id="unstage"><a href="#unstage" class="headerlink" title="unstage"></a>unstage</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset file.txt</div><div class="line">git reset --mixed HEAD file.txt</div></pre></td></tr></table></figure>
<p>上面这两条命令是一样的，都是reset到HEAD上，这个例子的意义在于，unstage file，当你把一个文件stage到Index区域后悔了，那么只需把Index区域里的这个文件恢复到最近一次commit的状态（也就是HEAD），那就相当于unstage。</p>
<h1 id="恢复到历史版本"><a href="#恢复到历史版本" class="headerlink" title="恢复到历史版本"></a>恢复到历史版本</h1><p>下面这个命令就是将某个文件恢复到历史版本上。<br><code>git reset eb23er file.txt</code><br>这个例子的意思在于，把某个文件恢复到Index区域里，然后直接commit，这样就等于把这个文件恢复到历史版本了，这样依赖你都不需要改动working Directory了。</p>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>前面讲到的checkout是会修改HEAD的指向，变更Index区域的内容，修改Working Directory里的内容。<br>这看上去很像reset –hard，但两者有两个重要的差别</p>
<ol>
<li>reset会把working directory里面所有的内容都更新掉，checkout不会去修改你在working Directory里修改过的文件。</li>
<li>reset把branch移动到HEAD指向的地方，checkout则把HEAD移动到另一个分支。</li>
</ol>
<p>第二个区别可能有点那以理解，举例来说：假若你有两个分支master和develop，这两个分支指向不一样的commit，我们现在在develop分支上（HEAD指向的地方）</p>
<p>如果我们<code>git reset master</code>，那么develop就会指向master所指向的那个commit。<br>如果我们<code>git checkout master</code>，那么develop不会动，只有HEAD会移动。HEAD会指向master。看图：</p>
<img src="/assets/segment/git3.png">
<h1 id="带文件参数"><a href="#带文件参数" class="headerlink" title="带文件参数"></a>带文件参数</h1><p>当执行git checkout [branch] file，checkout干了这件事情：</p>
<ol>
<li>更新了index区域里面的file文件的内容</li>
<li>更新了working directory里file文件的内容</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Git的reset与checkout的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://muleimulei.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://muleimulei.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>自制滚动条</title>
    <link href="https://muleimulei.github.io/2017/07/28/CSS3/%E8%87%AA%E5%88%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <id>https://muleimulei.github.io/2017/07/28/CSS3/自制滚动条/</id>
    <published>2017-07-28T13:16:39.590Z</published>
    <updated>2017-07-28T14:05:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>自制滚动条</p>
</blockquote>
<a id="more"></a>
<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条的自定义样式。</p>
<h2 id="滚动条的组成"><a href="#滚动条的组成" class="headerlink" title="滚动条的组成"></a>滚动条的组成</h2><ul>
<li>::-webkit-scrollbar  滚动条整体部分</li>
<li>::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动</li>
<li>::-webkit-scrollbar-track 滚动条的轨道</li>
<li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置</li>
<li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分除去</li>
<li>::-webkit-scrollbar-corner边角，即两个滚动条的交汇处</li>
<li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖到调整元素大小的控件  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/  </div><div class="line">::-webkit-scrollbar  </div><div class="line">&#123;  </div><div class="line">    width: 16px;  </div><div class="line">    height: 16px;  </div><div class="line">    background-color: #F5F5F5;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">/*定义滚动条轨道 内阴影+圆角*/  </div><div class="line">::-webkit-scrollbar-track  </div><div class="line">&#123;  </div><div class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);  </div><div class="line">    border-radius: 10px;  </div><div class="line">    background-color: #F5F5F5;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">/*定义滑块 内阴影+圆角*/  </div><div class="line">::-webkit-scrollbar-thumb  </div><div class="line">&#123;  </div><div class="line">    border-radius: 10px;  </div><div class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);  </div><div class="line">    background-color: #555;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h2><p>定义滚动条就是利用伪元素与伪类，那什么是伪元素与伪类呢？<br>伪类如:link，:focus，:hover，此外，css3中又增加了许多伪类选择器，如:nth-child，:last-child，:nth-last-of-type等。</p>
<p>CSS中的伪元素大家以前看过，:first-line，:first-letter，:before，:after。那么在CSS3中，伪元素进行了调整，在以前的基础上增加了一个 “:”，也就是变成了 “::first-line，::first-letter，::before，::after”，另外，CSS3还增加了一个”::selection”。两个”:”和一个”::”，在CSS3中主要用来区分伪类和伪类选择器。</p>
<p>webkit的伪类和伪元素的实现很强，可以把滚动条当成一个页面元素来定义，再结合一些高级的CSS3属性，比如渐变，圆角，RGBA等等。如果有些地方要用图片，可以把图片转换成Base64，不然每次都得加载那个图片，增加请求数。</p>
<p>任何对象都可以设置：边框，阴影，背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。下面的伪类可以应用到上面的伪元素中。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">:horizontal  </div><div class="line">//horizontal伪类适用于任何水平方向上的滚动条  </div><div class="line">:vertical  </div><div class="line">//vertical伪类适用于任何垂直方向的滚动条  </div><div class="line">:decrement  </div><div class="line">//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮  </div><div class="line">:increment  </div><div class="line">//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮  </div><div class="line">:start  </div><div class="line">//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面  </div><div class="line">:end  </div><div class="line">//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面  </div><div class="line">:double-button  </div><div class="line">//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。  </div><div class="line">:single-button  </div><div class="line">//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。  </div><div class="line">:no-button  </div><div class="line">no-button伪类表示轨道结束的位置没有按钮。  </div><div class="line">:corner-present  </div><div class="line">//corner-present伪类表示滚动条的角落是否存在。  </div><div class="line">:window-inactive  </div><div class="line">//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。  </div><div class="line">::-webkit-scrollbar-track-piece:start &#123;  </div><div class="line">/*滚动条上半边或左半边*/  </div><div class="line">&#125;  </div><div class="line">::-webkit-scrollbar-thumb:window-inactive &#123;  </div><div class="line">/*当焦点不在当前区域滑块的状态*/  </div><div class="line">&#125;  </div><div class="line">::-webkit-scrollbar-button:horizontal:decrement:hover &#123;  </div><div class="line">/*当鼠标在水平滚动条下面的按钮上的状态*/  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;自制滚动条&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://muleimulei.github.io/categories/CSS3/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue实例与生命周期</title>
    <link href="https://muleimulei.github.io/2017/07/28/Vue/Vue%E5%AE%9E%E4%BE%8B%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://muleimulei.github.io/2017/07/28/Vue/Vue实例与生命周期/</id>
    <published>2017-07-28T02:51:46.214Z</published>
    <updated>2017-07-28T07:03:47.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Vue实例与生命周期</p>
</blockquote>
<a id="more"></a>
<p>Vue的实例是Vue框架的入口，其实也就是前端的viewModel，它包含了页面中的业务逻辑，数据模型等，当然他也有自己的一系列的生命周期的事件钩子，辅助我们进行对整个Vue实例生成，编译，挂载，销毁等过程进行JavaScript控制。</p>
<ol>
<li><p>Vue实例初始化的选项配置对象详解</p>
<ul>
<li><p>Vue实例的data对象</p>
<ul>
<li>Vue的实例的数据对象data我们已经用了很多，数据绑定离不开data里的数据。他也是Vue里的核心属性。它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。<strong>本质原理是：Vue会自动将data里面的数据进行递归抓取换成getter和setter,然后就可以自动更新HTML标签了，所以用getter和setter老的浏览器Vue支持不够好</strong>。<ul>
<li>data对象的类型<ul>
<li>类型是Object或者Function。</li>
<li>如果是组件对象，data必须是Function类型</li>
</ul>
</li>
<li>实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建普通的Vue实例</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: data    </div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//组件定义，Vue.extend()中data必须是函数</span></div><div class="line"><span class="keyword">var</span> component = Vue.extend(&#123;</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//这里必须是函数！！！</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">a</span>: <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Vue实例的computed</p>
<ul>
<li>介绍<br>  Vue的计算属性会自动混入Vue的实例中。所有getter和setter的this上下文会自动地绑定为Vue实例。</li>
<li>类型<br>  <code> {键：函数} {[key：string]: Function | {get: Function, set: Function}} </code>。 当然，可以省略setter和getter，那么值就可以是普通的函数，但是必须有返回值。</li>
<li>实例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        aDouble () &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span></div><div class="line">        &#125;,</div><div class="line">        aPlus () &#123;</div><div class="line">            set () &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></div><div class="line">            &#125;,</div><div class="line">            get () &#123;</div><div class="line">                thia.a = v - <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>methods</p>
<ul>
<li>类型 {[key: string] : Function}</li>
<li>详细<br>  methods 将被混入到Vue实例中。可以直接通过Vm实例访问这些方法，或者在指令表达式中使用。方法中的this自动绑定为Vue实例。<strong>注意：不应该使用箭头函数来定义method函数（例如 plus: ()=&gt; this.a++）。理由是箭头函数绑定了父级作用域的上下文，所以this将不会按照期望指向Vue实例，this.a将会是undefined。</strong></li>
<li>实例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        plus () &#123;</div><div class="line">            <span class="keyword">this</span>.a++</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">&#125;)</div><div class="line">vm.plus()</div><div class="line">vm.a</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>watch</p>
<ul>
<li>类型 {[key: string]: string | Function | Object}</li>
<li>详细：<br>  一个对象，键是需要观察的表达式，值是对应回掉函数，也可以是方法名，或者包含选项的对象。Vue实例将会在实例化时调用$watch，遍历watch对象的每一个属性。</li>
<li>实例：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">b</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">c</span>: <span class="number">3</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">        <span class="comment">//监控a变量变化时，自动执行此函数</span></div><div class="line">        a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"new : %s, old: %s"</span>, val,oldVal)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">c</span>: &#123;</div><div class="line">            <span class="attr">handle</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>)</span>&#123;&#125;,</div><div class="line">            <span class="attr">deep</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置el的详解</p>
<ul>
<li>类型 <code>string | HTMLElement</code><br>  限制：只在由new创建的实例中遵循</li>
<li>详细<br>  提供一个在页面上已存在的DOM元素作为Vue实例的挂载目标，也就是说Vue绑定数据到哪里去找。可以是css选择器，也可以是一个HTMLElement实例。在实例挂载之后，元素可以用vm.$el访问。如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显示调用vm.$mount()手动开始编译。</li>
<li>实例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    ....</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Vue实例的生命周期<br>  Vue实例有一个完整的生命周期，也就是从开始创建，初始化数据，编译模板，挂载DOM，渲染，更新，卸载等一系列过程，我们称这为Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。<strong> 在Vue的整个生命周期中，它提供了一系列的事件，可以让我们达到控制整个过程的目的，在这些事件响应方法中的this直接指向的是Vue的实例。 </strong></p>
<img src="/assets/segment/vue_life.png">
<ul>
<li><p>Vue提供的可以注册的钩子函数在图上的红色框标注：</p>
<ul>
<li><p>beforeCreate：在实例初始化之后，数据观测（data observer）和event/watcher事件配置之前被调用。</p>
</li>
<li><p>created：实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算，watch/event事件的回调。然而，挂载阶段还没开始，$el属性目前不可见。</p>
</li>
<li><p>beforeMount：在挂载开始之前被调用：相关的render函数首次被调用。</p>
</li>
<li><p>mounted：el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.$el也在文档内。</p>
</li>
<li><p>beforeUpdate：数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前。你可以在这个钩子中进一步更改状态，这不会触发附加的重渲染过程。</p>
</li>
<li><p>updated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而在大多数情况下，你应该避免再次期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p>
</li>
<li><p>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</p>
</li>
<li><p>destroyd： Vue实例销毁后调用。调用后，Vue实例指示的所有的东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>
</li>
</ul>
</li>
<li><p>实例1</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">         <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         </div><div class="line">              <span class="attr">el</span>: <span class="string">'#app'</span>,               </div><div class="line">              <span class="attr">data</span>: &#123;                   </div><div class="line">                <span class="attr">number</span>: <span class="number">1</span></div><div class="line">              &#125;,</div><div class="line">              <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'beforeCreate 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">cteated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'cteated 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'beforeMount 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'mounted 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'beforeUpdate 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'updated 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'beforeDestroy 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'destroyed 钩子执行...'</span>);</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">              &#125;,</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>实例2</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Axio <span class="keyword">from</span> <span class="string">'axios'</span> <span class="comment">//这是一个轻量级的ajax库，import是es6模块导入的语法</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'app'</span>,</div><div class="line">    <span class="attr">component</span>: &#123;&#125;,</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">list</span>: []</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//挂载完成后的生命周期钩子注册</span></div><div class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//等待下一次更新完成后执行业务处理代码</span></div><div class="line">            Axio.get(<span class="string">'/api/menulist'</span>,&#123; <span class="comment">//将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新</span></div><div class="line">                params:&#123;&#125;</div><div class="line">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">this</span>.list = res.data    </div><div class="line">            &#125;.bind(<span class="keyword">this</span>))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Vue实例的全局配置</p>
<ul>
<li><p>silent</p>
<ul>
<li>类型：boolean</li>
<li>默认值：false</li>
<li>用法：<figure class="highlight plain"><figcaption><span>= true</span><a href="//取消Vue所有的日志与警告```">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- optionMergeStrategies</div><div class="line">    + 类型：&#123;[key: string]: Function&#125;</div><div class="line">    + 默认值：&#123;&#125;</div><div class="line">    + 用法：</div><div class="line">        ```JavaScript</div><div class="line">            Vue.config.optionMergeStrategies._my_option = function (parent, child, vm)&#123;</div><div class="line">                return child+1</div><div class="line">            &#125;</div><div class="line">            const Profile = Vue.extend(&#123;</div><div class="line">                _my_option: 1</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            //Profile.options._my_option = 2</div><div class="line">            //自定义合并策略的选项</div><div class="line">            //合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入</div></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>devtools</p>
<ul>
<li>类型：boolean</li>
<li>默认值：true （生产版为false）</li>
<li>用法：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//务必在加载Vue之后，立即同步设置以下内容</span></div><div class="line">Vue.config.devtools = <span class="literal">true</span></div><div class="line"><span class="comment">//配置是否允许vue-devtools检查代码。开发版本默认为true，生产版本默认为false</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>errorHandle</p>
<ul>
<li>类型：Function</li>
<li>默认值：默认抛出错误</li>
<li>用法：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm</span>)</span>&#123; <span class="comment">//指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和Vue实例。</span></div><div class="line">    <span class="comment">//handle error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>keyCodes</p>
<ul>
<li>类型：{[key:string]: number | Array}</li>
<li>默认值： {}</li>
<li>用法：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Vue.config.keyCodes = &#123;</div><div class="line">    <span class="attr">v</span>: <span class="number">86</span>,</div><div class="line">    <span class="attr">f1</span>: <span class="number">112</span>,</div><div class="line">    <span class="attr">mediaPlayPause</span>: <span class="number">179</span>,</div><div class="line">    <span class="attr">up</span>: [<span class="number">38</span>, <span class="number">87</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Vue的全局API</p>
<ul>
<li><p>Vue.nextTick([{callback: Function} , {context: Object}])</p>
<ul>
<li>用法：在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改数据</span></div><div class="line">vm.msg = <span class="string">"hello"</span></div><div class="line"><span class="comment">//DOM还没有更新</span></div><div class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//DOM更新了    </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Vue.set([{object: Object}, {key: string}, {value: any}])</p>
<ul>
<li>用法：设置对象的属性，如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开Vue不能检测属性被添加的限制。注意对象不能是Vue实例，或者是Vue实例的根数据对象。</li>
</ul>
</li>
<li><p>Vue.compile</p>
<ul>
<li>语法：<code>Vue.compile(template)</code></li>
<li>参数：{template: string}</li>
<li>用法：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在render函数中编译模板字符串。只在独立构建时有效</span></div><div class="line"><span class="keyword">var</span> res = Vue.compile(<span class="string">"&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;"</span>)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: res.render,</div><div class="line">    <span class="attr">staticRenderFns</span>: res.staticRenderFns</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Vue实例与生命周期&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://muleimulei.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>javaScript获取css样式</title>
    <link href="https://muleimulei.github.io/2017/07/17/JavaScript/javaScript%E8%8E%B7%E5%8F%96css%E6%A0%B7%E5%BC%8F/"/>
    <id>https://muleimulei.github.io/2017/07/17/JavaScript/javaScript获取css样式/</id>
    <published>2017-07-17T09:19:31.150Z</published>
    <updated>2017-07-17T09:49:27.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>javaScript获取css样式</p>
</blockquote>
<a id="more"></a>
<h2 id="css样式分为行内样式与外部样式"><a href="#css样式分为行内样式与外部样式" class="headerlink" title="css样式分为行内样式与外部样式"></a>css样式分为行内样式与外部样式</h2><ol>
<li>javaScript获得行内样式<br> 可以使用<code>ele.style.属性名称</code>(如果遇到属性名称带有‘-’，需要使用驼峰方法，例如background-color改为backgroundColor)；</li>
<li>javaScript获得外部样式(getComputedStyle可以获得style的值也可以获得外部样式表的css)<br> 获得外部样式可以使用浏览器提供的<code>window.getComputedStyle(ele,null)</code>，这里的ele就是需要操作的对象，第二个参数是指定一个伪元素匹配，常规的元素用不上，直接使用null。但这个getComputedStyle并不支持IE9以下的浏览器，但是ie有它自己支持的方法：ele.currentStyle;</li>
<li>ele.style.属性名和ele.cssText以及getComputedStyle(obj,null)有什么区别？<ul>
<li>ele.style.属性名：这里获得的style可以获得属性值，也可以进行修改</li>
<li>ele.cssText: 其实跟style差不多，只不过它是获得多个css样式，也是生成在行内样式中。</li>
<li>getComputedStyle(obj,null)： 只能获取不能修改，并且返回的css是一个CSSStyleDecoration对象集合。</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;javaScript获取css样式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript事件解读</title>
    <link href="https://muleimulei.github.io/2017/07/16/JavaScript/javaScript%E4%BA%8B%E4%BB%B6%E8%A7%A3%E8%AF%BB/"/>
    <id>https://muleimulei.github.io/2017/07/16/JavaScript/javaScript事件解读/</id>
    <published>2017-07-16T13:24:42.982Z</published>
    <updated>2017-07-17T09:18:24.989Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>javascript事件解读</p>
</blockquote>
<a id="more"></a>
<p>与浏览器进行交互的时候浏览器会触发各种事件。这样，我们就可以编写javascript，通过监听某一个事件，来实现某些功能扩展。例如监听load事件，显示欢迎信息，</p>
<h2 id="基础事件操作"><a href="#基础事件操作" class="headerlink" title="基础事件操作"></a>基础事件操作</h2><ol>
<li><p>监听事件<br> 浏览器会根据某些操作触发对应事件，如果我们需要针对某些事件进行处理，则需要监听这个事件。监听事件主要有以下几种方法：</p>
<ul>
<li><p><strong>HTML内联属性</strong><br>  HTML元素里面直接填写事件有关属性，属性值为javascript代码，即可在触发该事件的时候，执行属性值的内容。<br>  例如：<code>&lt;button onclick=&quot;alert(&#39;click&#39;)&quot;&gt;&lt;/button&gt;</code>,onclick属性表示触发click，属性值的内容会在单击该HTML节点时执行。显而易见，使用这种方法，javascript代码与HTML代码耦合在了一起，不便于维护与开发。所以除非在必须使用的情况下（例如统计连接点击数据）下，尽量避免使用这种方法。</p>
</li>
<li><p><strong>DOM属性绑定</strong><br>  也可以直接设置DOM属性来指定某个事件对应的处理函数，这个方法比较简单：<code>element.onclick = function(){alert(&#39;click&#39;);}</code>，上面代码就是监听element节点的click事件。他比较简单易懂，而且有较好的兼容性。但是也有缺陷，因为直接赋值给对应属性，如果你在后面代码中再次为element绑定一个回调函数，会覆盖掉之前回调函数的内容。<br>  虽然也可以用一些方法实现多个绑定，但还是推荐下面的标准事件监听函数。</p>
</li>
<li><p><strong>使用事件监听函数</strong><br>  标准的事件监听函数如下： <code>element.addEventListener(&lt;event-name&gt;, &lt;callback&gt;, &lt;use-capture&gt;)</code>。表示在element这个对象上面添加一个事件监听器，当监听到有<event-name>事件发生的时候，调用<callback>这个回调函数。至于<use-capture>这个参数，表示该事件监听是在“捕获”阶段中监听（设置为true）还是在“冒泡”阶段中监听（设置为false）。关于捕获与冒泡，会在下面讲解。<br>  用标准事件监听函数改写上面的例子：<code>var btn = document.querySelector(&#39;button);btn.addEventListener(&#39;click&#39;,function(){alert(&#39;click&#39;);},false);</code>。</use-capture></callback></event-name></p>
</li>
</ul>
</li>
<li><p>移除事件监听<br> 当我们为某个元素绑定了一个事件，每次触发这个事件的时候，都会执行事件绑定的回调函数。如果我们想解除绑定，需要使用removeEventListener方法：<code>element.removeEventListener(&lt;event-name&gt;,&lt;callback&gt;,&lt;use-capture&gt;)</code>,需要注意的是，绑定事件时的回调函数不能是匿名函数，必须是一个声明的函数，因为解除事件绑定时需要传递这个回调函数的引用，才可以断开绑定。例如：<code>var fun = function(){};element.addEventListener(&#39;click&#39;,fun,false);    element.removeEventListener(&#39;click&#39;,fun,false);</code>。</p>
</li>
<li><p>事件触发过程</p>
<img src="/assets/segment/7.jpg">
 <iframe src="/assets/event.html" width="600" height="550" frameborder="0" allowfullscreen></iframe>
<ul>
<li><strong>捕获阶段</strong><br>  当我们在DOM树的某个节点发生了一些操作(例如单击，鼠标移动上去)，就会有一个事件发射过去。这个事件从window发出，不断经过下级节点直到目标节点。在到达目标节点之前的过程，就是捕获阶段。所有经过的节点，都会触发这个事件。捕获阶段的任务就是建立这个事件传递路线，以便后面冒泡阶段顺着这条路线返回Window。监听某个在捕获阶段触发的事件，需要在事件监听函数传递第三个参数true。<code>element.addEventListener(&lt;event-name&gt;, &lt;callback&gt;,true)</code>，但一般我们使用false，会在后面说明。</li>
<li><strong>目标阶段</strong><br>  当事件传递到触发目标节点那里，最终在目标节点上触发这个事件，就是目标阶段。需要注意的是，事件触发的目标总是在最底层的节点。</li>
<li><strong>冒泡阶段</strong><br>  当事件到达目标节点之后，就会沿着原路返回，由于这个过程类似于水泡从底部浮动到顶部，所以称之为冒泡阶段。<br>  **在实际使用中，你并不需要把事件监听函数准确绑定到最底层的节点也可以正常工作。比如在上例，你想为<div>绑定单击时的回调函数，你无须为这个<div>下面的所有子节点全部绑定单击事件，只需要为<div>这一节点绑定即可。因为发生它子节点的单击事件，都会冒泡上去，发生在<div>上面。</div></div></div></div></li>
</ul>
</li>
<li><p>为什么不用第三个参数true？<br> 这时因为IE浏览器不支持在捕获阶段监听事件，为了统一而设置的，毕竟IE浏览器的份额是不可忽略的。</p>
</li>
<li><p>使用事件代理提升性能<br> 因为事件有冒泡机制，所有子节点的事件都会顺着父级节点跑回去，所以我们可以通过监听父级节点来实现监听子节点的功能，这就是事件代理。</p>
<p> 使用事件代理的优势：</p>
<ul>
<li>减少了事件绑定，提升性能。之前你需要绑定一堆子节点，而现在你只需要绑定一个父节点即可。减少了绑定事件监听函数的数量。</li>
<li>动态变化的DOM结构，任然可以监听。当一个DOM动态创建之后，不会带有任何事件监听，除非你重新执行监听事件函数，而使用事件监听无需担忧这个问题。为了简单，使用jquery来实现普通事件绑定和事件处理。目标是监听所有a连接的单击事件。1. 常规的事件绑定方法，jquery会循环每一个a结构并绑定事件监听函数。 2. 事件监听的方法，jquery只为父元素绑定事件监听函数，因为父元素下面会有很多无关节点也会触发click事件，所以在on函数里传递了第二个参数，表示只监听a子节点的事件。<em>*他们都可以正常工作，但是当我动态创建新DOM结构的时候，第一个方法问题出现了，新创建的结构没有绑定事件，所以无法执行回调函数。而第二个方法工作很好，因为点击新建的DOM，它的事件会冒泡到父级节点进行处理</em>。*如果使用原生的方法实现事件代理，需要注意过滤非目标节点，可以通过id，class或者tagname等等，例如：<code>ele.addEventListener(&#39;click&#39;,function(event){ //判断是否为a节点 if(event.target.tagName==&#39;A&#39;){ // 执行a的交互}}，false)</code>。</li>
</ul>
</li>
<li><p>停止事件冒泡<br> 所有的事情都会有对立面，事件的冒泡阶段虽然看起来很好，也会有不适用的场所。比较复杂的应用，由于事件监听比较复杂，可能会希望只监听发生在具体节点的事件。这个时候就需要停止事件冒泡。停止事件冒泡要使用事件对象的stopPropagation方法，具体代码如下：<code>ele.addEventListener(&#39;click&#39;,function(e){ e.stopPropagation(); },false)</code>。</p>
</li>
<li><p>事件Event对象<br> 事件对象包括很多有用的信息，比如事件触发时，鼠标在屏幕上的坐标，被触发的DOM的详细信息，以及一些常用方法与属性。</p>
<ul>
<li>type: String<br>  事件的名称，比如’click’</li>
<li>target: Node<br>  事件要触发的目标节点</li>
<li>bubbles: Boolean<br>  表示该事件是否在冒泡阶段触发的</li>
<li>preventDefault: function<br>  这个方法可以禁止一切默认的行为，例如点击a标签时，会打开一个新的页面，如果为a标签监听事件click同时调用该方法，则不会打开新的页面。</li>
<li>stopPropagation: function<br>  停止冒泡</li>
<li>cancelable: Boolean<br>  这个属性表明该事件是否可以通过event.preventDefault()方法来禁用默认行为。</li>
<li><strong>eventPhase: Number</strong><br>  这个属性的数字表示当前事件触发在什么阶段。none: 0，捕获：1，目标：2，冒泡：3。</li>
<li>isTrusted: Boolean<br>  表明该事件是浏览器触发（用户真实操作触发）。</li>
</ul>
</li>
<li><p>常用事件和技巧<br> 用户的操作有很多种，所以有很多事件。为了开发方便，浏览器又提供了一些事件，所以有很多的事件。这里只介绍几种常用的事件和使用技巧。</p>
<ul>
<li>load: load事件在资源加载完成时触发。这个资源可以是图片，css文件，js文件，视屏，document和window等等。比较常用的就是监听window的load事件，当页面内所有资源加载完成之后就会触发。比如用javaScript对图片以及其它资源处理，我们在load事件中触发，可以保证javaScript不会在资源未加载完成就开始处理资源导致报错。同样的，也可以监听图片等其它资源加载情况。</li>
<li>beforeunload: 当浏览者在页面的输入框输入一些内容时，未保存，误操作关掉网页会导致输入信息丢失。</li>
</ul>
</li>
</ol>
<ol>
<li><p>利用javaScript模拟触发内置事件。<br> 内置的事件也可以被javaScript模拟触发，比如下面函数模拟触发单击事件<br> <code></code></p>
<pre><code>function simulate(){
    var event = new MouseEvent(&apos;click&apos;,{
        &apos;view&apos;: window,
        &apos;bubbles&apos;:true,
        &apos;cancelable&apos;: true
    });
}
var cb = document.getElementById(&apos;checkbox&apos;);
var canceled = !cb.dispatchEvent(event);
if(canceled){
    alert(&apos;canceled&apos;); // A handle called preventDefault
}else{
    alert(&apos;not canceled&apos;); //None of the handles called preventDefault
}
</code></pre><p> </p>
</li>
<li><p>自定义事件<br>我们可以自定义事件来实现更灵活的开发，事件用好了可以是一个强大的工具。与自定义相关的函数有Event，CustomEvent和dispatchEvent。直接自定义事件，使用event构造函数。</p>
<p><code></code></p>
<pre><code>// Create the event.
var event = document.createEvent(&apos;Event&apos;);
// Define that the event name is &apos;build&apos;.
event.initEvent(&apos;build&apos;, true, true);
// Listen for the event.
elem.addEventListener(&apos;build&apos;, function (e) {
// e.target matches elem
}, false);
// target can be any Element or other EventTarget.
elem.dispatchEvent(event);
</code></pre><p></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;javascript事件解读&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>strcpy与strncpy用法与区别</title>
    <link href="https://muleimulei.github.io/2017/07/14/c%E4%B8%8Ec++/strcpy%E4%B8%8Estrncpy%E7%94%A8%E6%B3%95%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
    <id>https://muleimulei.github.io/2017/07/14/c与c++/strcpy与strncpy用法与区别/</id>
    <published>2017-07-14T14:03:11.444Z</published>
    <updated>2017-07-14T15:05:21.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>strcpy与strncpy用法与区别</p>
</blockquote>
<a id="more"></a>
<ul>
<li>strcpy函数：把从src地址开始含有NULL结束符的字符串复制到以dest开始的地址空间，返回dest。要求：src和dest所指的内存区域不可以重叠且dest必须有足够的空间来容纳src字符串。函数原型为：    extern char <em> strcpy(char </em>dest, char <em>src</em>);</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">( <span class="keyword">char</span>* strDest, <span class="keyword">const</span> <span class="keyword">char</span> *strSrc)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> *strDestCopy = strDest;</div><div class="line">    <span class="keyword">if</span>((strDest==<span class="literal">NULL</span>)||(strSrc==<span class="literal">NULL</span>))</div><div class="line">        <span class="keyword">throw</span> <span class="string">"Invalid arguments"</span>;</div><div class="line">    <span class="keyword">while</span>((*strDest++ = *strSrc++)!=<span class="string">'\0'</span>);</div><div class="line">    <span class="keyword">return</span> strDestCopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>该函数的参数是字符指针，也就是可以是字符串变量和字符数组，因为它们的变量名代表字符地址。字符串默认有一个以null的结束符，字符数组没有。所以此处需要注意：因为src要求有null结束符，所以字符数组的长度必须大于等于src包含null结束符的总长度。例如，char *src=”abcd”；char dest[5] ；这里的dest的长度至少为5；</p>
</blockquote>
<ul>
<li><p>strncpy函数：n代表可以指定字符个数进行赋值。原型：char <em>strncpy(char </em>dest, char *src, size_t n)；功能：将字符串src最多n个字符复制到字符数组dest中（它并不像strcpy一样遇到NULL才停止复制，而是等凑够n个字符才开始复制），返回指向dest的指针。要求：如果n &gt; dest串长度，dest栈空间溢出产生崩溃异常。</p>
<ol>
<li><p>src串长度 &lt;= dest串长度（这里的串长度包含串尾NULL字符）<br>如果 n = (0, src串长度)，src的前n个字符复制到dest中。但是由于没有NULL字符，所以直接访问dest会发生乱码。这时，一般建议采用memset将dest的全部元素用null填充，如memset(dest, 0, 7)</p>
<p>如果n=src串长度,与strcpy一致。<br>如果n=dest串长度，[0, src串长度]处存放src字符串，（src串长度，dest串长度]处存放NULL。</p>
</li>
<li><p>src串长度 &gt; des串长度<br>如果n = dest串长度，则dest串没有null字符，会导致输出有乱码。如果不考虑src串复制完整性，可以将dest最后一个字符置为NULL。</p>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>所以，一般把n设为dest（含null）的长度,当n=dest串长度时，定义dest为字符数组，因为这时没有null字符拷贝。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;strcpy与strncpy用法与区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="https://muleimulei.github.io/categories/C/"/>
    
    
      <category term="c++拷贝函数解析" scheme="https://muleimulei.github.io/tags/c-%E6%8B%B7%E8%B4%9D%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据库语言分类</title>
    <link href="https://muleimulei.github.io/2017/07/11/DataBase/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E5%88%86%E7%B1%BB/"/>
    <id>https://muleimulei.github.io/2017/07/11/DataBase/数据库语言分类/</id>
    <published>2017-07-11T15:16:12.527Z</published>
    <updated>2017-07-11T15:20:49.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>数据库语言分类</p>
</blockquote>
<a id="more"></a>
<p>SQL语言共分为四大类：数据查询语言DQL，数据操纵语言DML，数据定义语言DDL，数据控制语言DCL。</p>
<h2 id="数据查询语言DQL"><a href="#数据查询语言DQL" class="headerlink" title="数据查询语言DQL"></a>数据查询语言DQL</h2><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE</p>
<p>子句组成的查询块：</p>
<p>SELECT &lt;字段名表&gt;</p>
<p>FROM &lt;表或视图名&gt;</p>
<p>WHERE &lt;查询条件&gt;</p>
<h2 id="数据操纵语言DML"><a href="#数据操纵语言DML" class="headerlink" title="数据操纵语言DML"></a>数据操纵语言DML</h2><p>数据操纵语言DML主要有三种形式：</p>
<p>1) 插入：INSERT</p>
<p>2) 更新：UPDATE</p>
<p>3) 删除：DELETE</p>
<h2 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h2><p>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、</p>
<p>索引、同义词、聚簇等如：</p>
<p>CREATE TABLE/VIEW/INDEX/SYN/CLUSTER</p>
<p>表 视图 索引 同义词 簇</p>
<p>DDL操作是隐性提交的！不能rollback</p>
<ol>
<li>数据控制语言DCL</li>
</ol>
<p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制</p>
<p>数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p>
<p>1) GRANT：授权。</p>
<p>2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。</p>
<p>回滚—ROLLBACK</p>
<p>回滚命令使数据库状态回到上次最后提交的状态。其格式为：</p>
<p>SQL&gt;ROLLBACK;</p>
<p>3) COMMIT [WORK]：提交。</p>
<p>在数据库的插入、删除和修改操作时，只有当事务在提交到数据</p>
<p>库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看</p>
<p>到所做的事情，别人只有在最后提交完成后才可以看到。</p>
<p>提交数据有三种类型：显式提交、隐式提交及自动提交。下面分</p>
<p>别说明这三种类型。</p>
<p>(1) 显式提交</p>
<p>用COMMIT命令直接完成的提交为显式提交。其格式为：</p>
<p>SQL&gt;COMMIT；</p>
<p>(2) 隐式提交</p>
<p>用SQL命令间接完成的提交为隐式提交。这些命令是：</p>
<p>ALTER，AUDIT，COMMENT，CONNECT，CREATE，DISCONNECT，DROP，</p>
<p>EXIT，GRANT，NOAUDIT，QUIT，REVOKE，RENAME。</p>
<p>(3) 自动提交</p>
<p>若把AUTOCOMMIT设置为ON，则在插入、修改、删除语句执行后，</p>
<p>系统将自动进行提交，这就是自动提交。其格式为：</p>
<p>SQL&gt;SET AUTOCOMMIT ON；</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;数据库语言分类&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://muleimulei.github.io/categories/DataBase/"/>
    
    
      <category term="数据库语言分类" scheme="https://muleimulei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Proc/C++开发</title>
    <link href="https://muleimulei.github.io/2017/07/11/DataBase/Proc/"/>
    <id>https://muleimulei.github.io/2017/07/11/DataBase/Proc/</id>
    <published>2017-07-11T12:29:25.054Z</published>
    <updated>2017-07-11T15:14:51.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Proc/C++开发</p>
</blockquote>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>SQL<blockquote>
<p>结构化查询语言，简称SQL，是一种数据库查询和程序设计语言，用于存取数据以及查询，更新和管理关系数据库系统；同时，也是数据库脚本文件的扩展名。</p>
</blockquote>
</li>
<li>Pro*C/C++<blockquote>
<p>在C/C++程序中嵌入SQL语句操作数据库，得到的应用程序叫做Proc*C/C++程序。</p>
</blockquote>
</li>
<li>嵌入式SQL<blockquote>
<p>能在其它编程语言中混合使用的SQL语句，叫做嵌入式SQL语句！但是各个厂商对嵌入式SQL的具体实现不一样，但是具体的混合语法不一样，各厂商有自己的预编译工具。</p>
</blockquote>
</li>
<li>宿主语言<blockquote>
<p>嵌入式SQL的载体是宿主语言，比如这里说的就是C/C++。</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>宿主语言</th>
<th style="text-align:right">Pro程序</th>
</tr>
</thead>
<tbody>
<tr>
<td>C/C++</td>
<td style="text-align:right">Pro*C/C++</td>
</tr>
<tr>
<td>FORTRAN</td>
<td style="text-align:right">Pro*FORTRAN</td>
</tr>
<tr>
<td>PASCAL</td>
<td style="text-align:right">Pro*PASCAL</td>
</tr>
<tr>
<td>COBOL</td>
<td style="text-align:right">Pro*COBOL</td>
</tr>
<tr>
<td>PL/I</td>
<td style="text-align:right">Pro*PL/I</td>
</tr>
<tr>
<td>Ada</td>
<td style="text-align:right">Pro*Ada</td>
</tr>
</tbody>
</table>
<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><blockquote>
<ol>
<li>Include 头文件(c/c++ and Pro*c/c++)</li>
<li>定义变量</li>
<li>定义函数</li>
<li>main<br>4.1 连接数据库 ：connect<br>4.2 SQL操作语句：EXEC SQL …..<br>4.3 exception handle<br>4.4 断开连接<br>4.5 EXEC SQL COMMIT / ROLLBACK WORK release</li>
</ol>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></div><div class="line"></div><div class="line">EXEC SQL BEGIN DECLARE SECTION</div><div class="line">    <span class="keyword">char</span> username[<span class="number">32</span>];</div><div class="line">    <span class="keyword">char</span> passwd[<span class="number">32</span>];</div><div class="line">    <span class="keyword">char</span> dname[<span class="number">25</span>];</div><div class="line">EXEC SQL END DECLARE SECTION</div><div class="line"></div><div class="line">EXEC SQL INCLUDE sqlca;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerror</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerror</span><span class="params">()</span></span>;</div><div class="line">    <span class="built_in">strcpy</span>(username, <span class="string">"scott"</span>);</div><div class="line">    <span class="built_in">strcpy</span>(passwd, <span class="string">"XXXXX"</span>);</div><div class="line">    EXEC SQL CONNECT :username IDENTIFIED BY :passwd;</div><div class="line">    EXEC SQL select dname from dept where id=<span class="number">10</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"dname: %s\n"</span>,dname);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerror</span><span class="params">()</span></span>&#123;</div><div class="line">    EXEC SQL WHENEVER SQLERROR CONTINUE;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n oracle error detected\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.70s\n"</span>,sqlca.sqlerrm.sqlerrmc);</div><div class="line">    EXEC SQL ROLLBACK WORK RELEASE;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ol>
<li><p>一般应用程序c开发运行标准流程</p>
<img src="/assets/segment/5.png">
</li>
<li><p>一般应用程序c++开发运行标准流程</p>
<img src="/assets/segment/6.png">
</li>
</ol>
<blockquote>
<p>Pro*C/C++ 应用程序的开发多了一个预编译的过程：pc转换成c或cpp文件</p>
</blockquote>
<h2 id="关于预编译工具（Proc）"><a href="#关于预编译工具（Proc）" class="headerlink" title="关于预编译工具（Proc）"></a>关于预编译工具（Proc）</h2><ol>
<li>位置：$ORACLE_HOME/bin 目录下拥有数据库访问权限的用户可以直接在终端使用，不需要绝对路径。</li>
<li>配置文件：$ORACLE_HOME/precomp/admin/pcscfg.cfg 头文件，库文件路径。</li>
<li>基本命令格式：<code>proc iname=filename oname=outname [OptionName1=value1]…[OptionNameN=valueN]</code></li>
<li>基本选项：</li>
</ol>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>INAME</td>
<td style="text-align:right">path and filename (name of input file) 1.pc</td>
</tr>
<tr>
<td>ONAME</td>
<td style="text-align:right">path and filename (name of output file) 1.c</td>
</tr>
<tr>
<td>INCLUDE</td>
<td style="text-align:right">path (头文件所在路径) -INCLUDE 路径名 或 INCLUDE= (路径名1，路径名2)</td>
</tr>
<tr>
<td>PARSE</td>
<td style="text-align:right">FULL 、PARTIA、NONE (DEFAULT FULL for C，Others for C++)</td>
</tr>
<tr>
<td>CODE</td>
<td style="text-align:right">ANSI_C、CPP (default ansi_c)</td>
</tr>
<tr>
<td>USERID</td>
<td style="text-align:right">username/password</td>
</tr>
</tbody>
</table>
<blockquote>
<p>默认预编译得到的是C文件，使用下列选项得到C++文件<br>parse=none     告诉proc编译器，按照C++规范解析 dm02_hello.pc<br>code = cpp     告诉proc编译器，按照C++规范生成文件<br>proc dm02_hello.pc parse=none code=cpp oname=dm02_hello.cpp</p>
</blockquote>
<h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><ol>
<li><p>连接数据库</p>
<ul>
<li>方法一<br><code>EXEC SQL CONNECT :usr_pwd</code></li>
<li>方法二<br><code>EXEC SQL CONNECT :username IDENTIFIED BY :passwd</code></li>
<li>方法三<br>通过db_name连接没有限定名字的数据库–可以修改数据库的名字–at选项<br><code>EXEC SQL CONNECT :username IDENTIFIED BY :passwd AT :db_name USING :db_string</code></li>
</ul>
</li>
<li><p>代码里写死了用户名和密码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></div><div class="line"><span class="comment">//定义宿主变量（SQL变量）</span></div><div class="line"><span class="comment">//C语言可以直接使用</span></div><div class="line"><span class="comment">//嵌入式SQL语句里面使用的话需要加上EXEC SQL前缀</span></div><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line"><span class="keyword">char</span> * serverid = <span class="string">"scott/lzj123529"</span>;</div><div class="line">EXEC SQL END DECLARE SECTION;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"HelloWorld\n"</span>);</div><div class="line">    EXEC SQL connect:serverid;</div><div class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode ;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ret :%d\n"</span>,ret);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"connect OK!\n"</span>);</div><div class="line">    EXEC SQL COMMIT RELEASE;<span class="comment">//提交事务并且断开</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>交互式的连接数据库</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line"><span class="keyword">char</span> user[<span class="number">32</span>];</div><div class="line"><span class="keyword">char</span> passwd[<span class="number">32</span>];</div><div class="line"><span class="keyword">char</span> sid[<span class="number">32</span>];</div><div class="line">EXEC SQL END DECLARE SECTION;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"user:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,user);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"passwd:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,passwd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sid:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sid);</div><div class="line">    EXEC SQL CONNECT :user IDENTIFIED BY :passwd USING :sid;</div><div class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode ;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ret :%d\n"</span>,ret);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"connect OK!\n"</span>);</div><div class="line">    EXEC SQL COMMIT RELEASE;<span class="comment">//提交事务并且断开</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过宿主变量指定连接名字</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//演示通过程序连接多个数据库</span></div><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line">    <span class="keyword">char</span>        *usrname = <span class="string">"scott"</span>;</div><div class="line">    <span class="keyword">char</span>        *passwd = <span class="string">"tiger"</span>;</div><div class="line">    <span class="keyword">char</span>        *link1 = <span class="string">"link1"</span>;  <span class="comment">//通过宿主变量指定连接名字</span></div><div class="line">    <span class="keyword">char</span>        *serverid = <span class="string">"orcl"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span>        *usrname2 = <span class="string">"scott"</span>;</div><div class="line">    <span class="keyword">char</span>        *passwd2 = <span class="string">"tiger"</span>;</div><div class="line">    <span class="keyword">char</span>        *link2 = <span class="string">"link2"</span>;</div><div class="line">    <span class="keyword">char</span>        *serverid2 = <span class="string">"orcl"</span>;</div><div class="line">EXEC SQL END DECLARE SECTION;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;    </div><div class="line">    <span class="comment">//第一个用户连接数据库</span></div><div class="line">    EXEC SQL CONNECT :usrname IDENTIFIED BY :passwd AT :link1  USING :serverid  ;</div><div class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第一个用户连接数据库 失败sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第一个用户连接数据库 成功connect ok...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//第二个用户连接数据库</span></div><div class="line">    EXEC SQL CONNECT:usrname2 IDENTIFIED BY:passwd2 AT:link2  USING:serverid2  ;</div><div class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第二个用户连接数据库 失败sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第二个用户连接数据库 成功connect ok...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//断开连接</span></div><div class="line">    EXEC SQL AT:link1 COMMIT RELEASE;</div><div class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第1个用户断开数据库 失败sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第1个用户断开数据库 成功 RELEASE ok...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    EXEC SQL AT:link2 COMMIT RELEASE;</div><div class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第二个用户断开数据库 失败sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第二个用户断开数据库 成功 RELEASE ok...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>宿主变量</li>
</ol>
<p>C的数据类型不同于Oracle的数据类型，在数据传递时有一个数据类型转换过程。<br>在Proc*C/C++程序中，是被C和SQL语句使用的变量，位于</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXEC SQL BEGIN DECLARE SECTION</div><div class="line">.............</div><div class="line">EXEC SQL END DECLARE SECTION</div></pre></td></tr></table></figure>
<p>之内。</p>
<p>主要类型：</p>
<table>
<thead>
<tr>
<th>程序中形式</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td style="text-align:right">单字符</td>
</tr>
<tr>
<td>char[N]</td>
<td style="text-align:right">N个定长字符数组</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:right">短整型</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:right">长整型</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:right">单精度浮点数</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:right">双精度浮点数</td>
</tr>
<tr>
<td>VARCHAR[N]</td>
<td style="text-align:right">变长字符串</td>
</tr>
</tbody>
</table>
<p><strong>使用场景</strong></p>
<blockquote>
<ul>
<li>输入：将应用程序的数据传递到数据库中</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> salary,emp_number;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;salary;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;emp_number;</div><div class="line">EXEC SQL update emp <span class="built_in">set</span> sal= :salary where empno= :emp_number;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>输出：将数据库的数据传递到应用程序中。</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> v_salary;</div><div class="line"><span class="keyword">char</span> v_job;</div><div class="line">EXEC SQL select sal,job INTO :v_salary, :v_job from emp where empno=<span class="number">90</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt; v_salary&lt;&lt;v_job;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>申明语法与普通C变量一致，但在CODE=CPP或MODE=ANSI时变量必须放在申明区。</li>
<li>可使用Pointer作为宿主变量，使用前分配空间。</li>
<li>在数据定义语言（DDL）语句中不能用宿主变量。错误例子：</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> table_name[<span class="number">30</span>];</div><div class="line"><span class="built_in">cin</span>&gt;&gt; table_name;</div><div class="line">EXEC SQL DROP TABLE :table_name</div></pre></td></tr></table></figure>
<ol>
<li>关于数据的增删改查</li>
</ol>
<p>预先定义了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line"><span class="keyword">int</span> deptid = <span class="number">50</span>;</div><div class="line"><span class="keyword">char</span> dname[<span class="number">32</span>] = <span class="string">"20name"</span>;</div><div class="line"><span class="keyword">char</span> loc[<span class="number">32</span>] = <span class="string">"20loc"</span>;</div><div class="line">EXEC SQL END DECLARE SECTION;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>插入数据</li>
</ul>
</blockquote>
<pre><code>EXEC SQL insert into dept(DEPTNO,DNAME,LOC) values(:deptid,:dname,:loc);
</code></pre><blockquote>
<ul>
<li>删除数据</li>
</ul>
</blockquote>
<pre><code>EXEC SQL delete from dept where deptno=:deptid;
</code></pre><blockquote>
<ul>
<li>修改数据</li>
</ul>
</blockquote>
<pre><code>EXEC SQL update dept set loc = :loc where deptno=:deptid;
</code></pre><p>综合示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></div><div class="line"><span class="comment">//定义宿主变量（SQL变量）</span></div><div class="line"><span class="comment">//C语言可以直接使用</span></div><div class="line"><span class="comment">//嵌入式SQL语句里面使用的话需要加上EXEC SQL前缀</span></div><div class="line">EXEC SQL BEGIN DECLARE SECTION;</div><div class="line"><span class="comment">//char * serverid = "scott/lzj123529";</span></div><div class="line"><span class="keyword">char</span> user[<span class="number">32</span>];</div><div class="line"><span class="keyword">char</span> passwd[<span class="number">32</span>];</div><div class="line"><span class="keyword">char</span> sid[<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> deptid = <span class="number">50</span>;</div><div class="line"><span class="keyword">char</span> dname[<span class="number">32</span>] = <span class="string">"20name"</span>;</div><div class="line"><span class="keyword">char</span> loc[<span class="number">32</span>] = <span class="string">"20loc"</span>;</div><div class="line">EXEC SQL END DECLARE SECTION;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"HelloWorld\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nuser:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,user);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\npasswd:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,passwd);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sid:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,sid);</div><div class="line">    EXEC SQL CONNECT:user IDENTIFIED BY:passwd USING:sid;</div><div class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = sqlca.sqlcode ;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ret :%d\n"</span>,ret);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"connect OK!\n"</span>);</div><div class="line">    <span class="function">EXEC SQL insert into <span class="title">dept</span><span class="params">(DEPTNO,DNAME,LOC)</span> <span class="title">values</span><span class="params">(:deptid,:dname,:loc)</span></span>;</div><div class="line">    EXEC SQL COMMIT;<span class="comment">//提交事务不退出</span></div><div class="line">    sleep(<span class="number">10</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"delete ....\n"</span>);</div><div class="line">    <span class="comment">//EXEC SQL delete from dept where deptno=:deptid;</span></div><div class="line">    <span class="built_in">strcpy</span>(loc,<span class="string">"中国"</span>);</div><div class="line">    EXEC SQL update dept <span class="built_in">set</span> loc = :loc where deptno=:deptid;</div><div class="line">    EXEC SQL COMMIT RELEASE;<span class="comment">//提交事务并且断开</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Proc/C++开发&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://muleimulei.github.io/categories/DataBase/"/>
    
    
      <category term="c++操作数据库Oracle数据库" scheme="https://muleimulei.github.io/tags/c-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库范式</title>
    <link href="https://muleimulei.github.io/2017/07/01/DataBase/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/"/>
    <id>https://muleimulei.github.io/2017/07/01/DataBase/数据库范式/</id>
    <published>2017-07-01T15:04:33.099Z</published>
    <updated>2017-07-01T15:36:49.972Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>数据库范式</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同<strong>范式</strong>。它是英国人E.F.Codd在上个世纪70年代提出关系数据库模型后总结出来的。目前有迹可寻的共用8种范式，依次是<strong>1NF，2NF，3NF，BCNF，4NF，5NF，DKNF，6NF</strong>。通常所用到的只是前三个范式，即：第一范式，第二范式，第三范式。</p>
</blockquote>
<p>一个低一级范式的关系模式通过模式分解可以转化为若干个高一级范式的关系模式的集合，这种过程叫做<strong>规范化</strong>。</p>
<ol>
<li>第一范式(1NF)：强调的是列的原子性，即列不能够再分成其它几列。</li>
<li>第二范式(2NF)：首先是1NF，另外包含两部分内容，一是表必须有一个主键，二是没有包含在主键中的列必须完全依赖于主键，而不能依赖于主键的一部分。</li>
<li>第三范式(3NF)：首先是2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</li>
</ol>
<blockquote>
<p>第二范式和第三范式的概念很容易混淆，区分它们的关键点在于，2NF:非主键列是否完全依赖于主键，还是依赖于主键的一部分；3NF:非主键列是直接依赖于主键，还是传递依赖于主键。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;数据库范式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataBase" scheme="https://muleimulei.github.io/categories/DataBase/"/>
    
    
      <category term="数据库范式" scheme="https://muleimulei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构常用内排序</title>
    <link href="https://muleimulei.github.io/2017/06/27/DataStructure/%E5%B8%B8%E7%94%A8%E5%86%85%E6%8E%92%E5%BA%8F/"/>
    <id>https://muleimulei.github.io/2017/06/27/DataStructure/常用内排序/</id>
    <published>2017-06-27T05:13:46.437Z</published>
    <updated>2017-07-01T15:03:19.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>数据结构常用内排序</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>插入排序</p>
<ul>
<li><p>直接插入排序：依次将待排序序列中的每一条记录插入到一个已经排好序的序列中，直到全部的记录都排好序。<br>在最好情况下，待排序序列为正序，每趟只需与有序序列的最后一个记录的关键码比较。总的比较次数为n-1，因此，时间复杂度为O(n)。在最坏情况下，待排序序列为逆序，第i个记录必须与前i-1个记录的关键码做比较，并且每比较一次就要做一次记录的移动，则移动的次数为 : $\sum_{i=1}^n n= \frac{n(n-1)}{2}$，因此，时间复杂度为$O(n^2)$。 <strong>直接插入排序是一种稳定的排序方法</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;len;i++)&#123;</div><div class="line">        <span class="keyword">int</span> temp  = r[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j = i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;r[j]&gt;temp;j--)&#123;</div><div class="line">                r[j+<span class="number">1</span>] = r[j];</div><div class="line">        &#125;</div><div class="line">        r[j+<span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>希尔排序：先将整个待排序记录序列分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序。希尔排序算法的时间性能分析是一个复杂的问题，因为它是所取增量的函数。有人在大量实验的基础上指出，希尔排序的时间性能在$O(n^2)$和O(nlog<sub>2</sub>n)。<strong>希尔排序是一种不稳定的排序方法</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d = d/<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = d;j&lt;=n;j++)&#123;</div><div class="line">            <span class="keyword">int</span> temp = r[j];</div><div class="line">            <span class="keyword">int</span> i;</div><div class="line">            <span class="keyword">for</span>(i = j-d;i&gt;=<span class="number">0</span>&amp;&amp;r[i]&gt;temp;i = i-d)&#123;</div><div class="line">                r[i+d] = r[i];</div><div class="line">            &#125;</div><div class="line">            r[i+d] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>交换排序</p>
<ul>
<li><p>起泡排序：两两比较相邻记录的关键码，如果反序则交换，直到没有反序的记录为止。在最好的情况下，待排序的记录为正序时，算法只执行一趟，进行了n-1次关键码的比较，不需要移动记录，时间复杂度为O(n)，在最坏的情况下，待排序的记录为反序，每趟排序在无序序列中只有一个最大的记录被交换到最终位置，故算法执行n-1趟，第i(1&lt;=i&lt;n)趟排序执行了n-i次关键码的比较和n-i次记录的交换，这样，关键码的比较次数为$\sum_{i=1}^{n-1} (n-i)= \frac{n(n-1)}{2}$，因此，时间复杂度为$O(n^2)$。<strong>起泡排序是一种稳定的排序方法</strong>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubble</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> exchange = len;</div><div class="line">    <span class="keyword">while</span>(exchange!=<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">int</span> bound = exchange;</div><div class="line">        exchange = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;bound<span class="number">-1</span>;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(r[i]&gt;r[i+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">int</span> temp = r[i];</div><div class="line">                r[i] = r[j+<span class="number">1</span>]；</div><div class="line">                r[j+<span class="number">1</span>] = temp;</div><div class="line">                exchange = i+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>快速排序：首先选取一个轴值（即比较的基准），将待排序的记录划分为两个独立的两部分，左侧记录的关键码均小于或等于轴值，右侧记录的关键码均大于或等于轴值，然后分别对这两部分重复上述过程。快速排序的平均复杂度为O(nlog<sub>2</sub>n) <strong>快速排序是一种不稳定的排序方法</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    快速排序的一次划分算法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> first,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = first,j = end<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;r[i]&lt;=r[j]) j--;</div><div class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</div><div class="line">            <span class="keyword">int</span> temp = r[i];</div><div class="line">            r[i] = r[j];</div><div class="line">            r[j] = temp;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;r[i]&lt;r[j]) i++;</div><div class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</div><div class="line">            <span class="keyword">int</span> temp = r[i];</div><div class="line">            r[i] = r[j];</div><div class="line">            r[j] = temp;</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">    快速排序算法</div><div class="line">*/</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> pivot = partition(r,<span class="number">0</span>,len<span class="number">-1</span>);</div><div class="line">        quickSort(r,<span class="number">0</span>,pivot<span class="number">-1</span>);</div><div class="line">        quickSort(r,pivot+<span class="number">1</span>,len<span class="number">-1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>选择排序</p>
<ul>
<li><p>简单选择排序：第i趟排序在待排序序列r[i]~r<a href="1&lt;=n&lt;=n-1">n</a>中选取关键码最小的记录，并和第i个记录交换作为有序序列的第i个记录。平均复杂度为$O(n^2)$，<strong>选择排序是一种不稳定的排序方法</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</div><div class="line">        <span class="keyword">int</span> index = i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;len;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(r[j]&gt;r[index])&#123;</div><div class="line">                index = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(index!=i)&#123;</div><div class="line">            <span class="keyword">int</span> temp = r[i];</div><div class="line">            r[i] = r[index];</div><div class="line">            r[index] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>堆排序：首先将待排序的记录序列构造成一个堆，此时，选出了堆中所有记录的最大值即堆顶记录，然后将该堆顶记录移走，并将剩余的记录再调整成堆，这样又找出了次大的记录。依次类推，直到堆中只有一个记录为止。总的时间复杂度为O(nlog<sub>2</sub>n)。 <strong>堆排序是一种不稳定的排序方法</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = k,j = <span class="number">2</span>*i;</div><div class="line">    <span class="keyword">while</span>(j&lt;m)&#123;</div><div class="line">        <span class="keyword">if</span>(r[j]&lt;r[j+<span class="number">1</span>]) j++;</div><div class="line">        <span class="keyword">if</span>(r[i]&gt;r[j]) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> temp =  r[i];</div><div class="line">            r[i] = r[j];</div><div class="line">            r[j] = temp;</div><div class="line">            i = j;</div><div class="line">            j = <span class="number">2</span>*i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> r[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</div><div class="line">        shift(r,i,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">int</span> temp = r[<span class="number">1</span>];</div><div class="line">        r[<span class="number">1</span>] = r[n-i+<span class="number">1</span>];</div><div class="line">        r[n-i+<span class="number">1</span>] = temp;</div><div class="line">        shift(r,<span class="number">1</span>,n-i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;数据结构常用内排序&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataStructure" scheme="https://muleimulei.github.io/categories/DataStructure/"/>
    
    
      <category term="数据结构" scheme="https://muleimulei.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker</title>
    <link href="https://muleimulei.github.io/2017/05/04/docker/%E4%BD%BF%E7%94%A8Docker/"/>
    <id>https://muleimulei.github.io/2017/05/04/docker/使用Docker/</id>
    <published>2017-05-04T09:08:44.098Z</published>
    <updated>2017-05-04T09:13:28.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>使用Docker</p>
</blockquote>
<a id="more"></a>
<h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;使用Docker&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="https://muleimulei.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker简介</title>
    <link href="https://muleimulei.github.io/2017/05/03/docker/docker%E7%AE%80%E4%BB%8B/"/>
    <id>https://muleimulei.github.io/2017/05/03/docker/docker简介/</id>
    <published>2017-05-03T08:34:48.255Z</published>
    <updated>2017-05-04T09:13:17.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>docker简介</p>
</blockquote>
<a id="more"></a>
<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker是Docker公司2013年3月推出的开源容器项目，上市至今已有3年，是世界范围内拥有超高人气。进入2010年，服务器市场急速向云环境转移。人们开始更多的租用虚拟服务器，只需要缴纳一定的租金。不需要购买实际的物理服务器。尤其是在搭建物理服务器时，服务器硬件的购买及其安装都需要耗费相当长的时间。但在云环境下，无论是1台还是1000台，只需单击几次即可轻松搭建虚拟服务器。</p>
<p>创建虚拟服务器后，还要在其中安装各种软件，进行各种设置。如果只有一两台服务器。那么能够进行轻松设置；但随着服务器数量的增加，采用人工设置就难了。linux/Unix环境中，虽然可以借助沿用至今的shell脚本进行自动安装与设置，但这种方式有一定的局限性。使用shell脚本很难实现集中式管理功能与其它复杂功能。</p>
<p>此时出现了“不可变基础设施”，指的<strong>是主机OS与服务器运行环境(服务器程序，源代码，已编译的二进制文件)分离，只设置一次运行环境，之后不发生变更</strong>。也就是说，将服务器运行环境创建为镜像后，部署至各服务器运行。此时若服务器更新，则运行环境本身不会发生变更，只要重新生成镜像并再次部署即可。就像云平台对服务器“用过即扔”，不可变基础设施中的服务运行环境镜像也是用过一次后就扔掉。</p>
<p>不可变基础设施拥有多种优点：</p>
<ul>
<li><strong>管理方便</strong> : 由于服务运行环境以镜像形式存在，所以只要管理镜像本身即可。特别是可以集中管理镜像，实现系统部署与管理。此外，镜像生成设置也以文件形式存在，可以灵活用于版本管理系统。</li>
<li><strong>拓展</strong> : 可以利用一个镜像不断创建服务器。与云平台的自动伸缩功能配合使用，能够轻松实现服务扩展。</li>
<li><strong>测试</strong> : 只要在开发人员PC或测试服务器中运行镜像，就可以搭建与实际服务运行环境一致的环境，非常易于测试。</li>
<li><strong>轻量</strong> : 分离操作系统与服务运行环境，实现轻量化，提供可以随时运行的环境。</li>
</ul>
<p>Docker项目实现了不可变基础设施。</p>
<h2 id="虚拟机与docker"><a href="#虚拟机与docker" class="headerlink" title="虚拟机与docker"></a>虚拟机与docker</h2><p>Docker与我们之前使用的VMware、Microsoft Hyper-V (Virtual PC)、Xen、Linux KVM等虚拟机类似。在虚拟机中安装Linux后，可以安装各种服务器程序与DB，运行已开发的应用程序与网站。将搭建好的虚拟机镜像复制到多台服务器运行，之后即可用一个镜像不断创建服务器。</p>
<ol>
<li><p>虚拟机<br> 虚拟机非常方便，但性能不佳。当前许多CPU都添加了对虚拟化功能的大量支持，但与物理机器相比，虚拟机的运行速度比较慢。<br> 为了进一步改善“完全虚拟化”的运行速度，半虚拟化技术登场，现在正得到广泛应用。</p>
 <img src="/assets/segment/1.png">
<p> 虚拟机本身是一台完整的计算机，总是需要安装客户OS。由于镜像中含有OS，所以镜像体积会变大。</p>
 <img src="/assets/segment/2.png">
<p> 无论网速多快，收发虚拟机镜像都会非常耗时，尤其是开源虚拟化软件。其重点在于OS虚拟化，只提供镜像创建与运行功能，在部署与管理功能上存在不足。</p>
</li>
<li><p>Docker<br> 与半虚拟化相比，Docker是一种更轻量化的方式。使用Docker则不需要安装客户OS。Docker镜像中只隔离并安装服务器运行所需的程序与库，与主机共享OS资源(系统调用)，这样就大大减小了镜像的体积。</p>
 <img src="/assets/segment/3.png">
<p> Docker没有硬件虚拟化层，所以与虚拟机相比，其在内存访问，文件系统，网络速度上明显快得多。与虚拟机不同，Docker提供了专门创建并部署镜像的功能。如同在git中管理源代码一样，Docker也提供镜像版本管理功能。此外，为了进行集中管理，Docker也提供了镜像的上传与下载功能(push/pull)。就像GitHub一样，Docker Hub 提供帮助用户共享的Docker镜像。</p>
</li>
<li><p>Docker镜像与容器<br> Docker中有“镜像”与“容器”的概念。首先了解“基础镜像”，它是指仅Linux发行版userland中安装的文件，一般为Linux发行版本的名称。此外，Linux发行版userland中也有安装Redis或Nginx等的基础镜像。因此，一般所说的“Docker镜像”是指安装基础镜像所需的程序，库，源代码之后创建的一个文件。<br> 我们很容易想到，若每次都安装基础镜像所需的程序，库，源代码，就会出现大容量镜像重复创建。Docker镜像只将基础镜像中变化的部分创建为镜像，运行时将基础镜像与可变部分合并运行。</p>
 <img src="/assets/segment/4.png">
</li>
</ol>
<blockquote>
<p>userland：以内存使用为基准，OS可化为<strong>内核空间</strong>与<strong>用户空间</strong>，用户空间中运行的可执行文件与库称为userland。Linux不能只从内核启动，所以userland也指启动时所需的最少可执行文件与库的组合。Linux发行版本中，userland通常包含启动所需的可执行文件，库以及原有的包系统。</p>
</blockquote>
<p>Docker不会创建整个镜像，而只针对变化的部分进行创建，然后继续引用父镜像。这种工作方式在Docker中称为“层”。<br>Docker镜像是文件，所以上传到存储空间后可以在别处下载使用。并且，向存储空间上传时，会同时上传子镜像与父镜像；同样，下载时也会同时操作子镜像与父镜像，之后只传输内容有变化的镜像。</p>
<p><strong>Docker容器是处于运行状态的镜像，使用一个镜像可以创建多个容器。从操作系统角度看，镜像是可执行的文件，容器是进程。而已经运行的容器中，也可以将更改的部分创建为镜像。可以将Docker视为特定执行文件或脚本的运行环境。</strong></p>
<p>linux/Unix系列系统中，文件运行所需的所有组成元素被切割的很小。这样虽然可以使系统结构简单明了，但会导致过度依赖，也很难解决。因此，Linux发行版也单独提供经过编译的包(rpm,deb包)。但每当运行服务器时，要想逐个编译源代码或安装并设置已有包也是相当麻烦的。</p>
<p>如果只有一两台服务器，则不会有太大困难，但云环境中创建的服务器多达几十台，几百台。此时若使用已经完成服务器配置的Docker镜像，那么无论要运行多少台服务器都能轻松搞定。</p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol>
<li>Ubuntu安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install docker.io</div><div class="line">sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker</div></pre></td></tr></table></figure>
<ol>
<li>RedHat Enterprise Linux、CentOS</li>
</ol>
<p>CentOS 6：<code>sudo yum install http://dl.fedoraproject.org/pub/epel/6/x86-64/epel-release-6-8.noarch.rpm</code>。</p>
<p>CentOS 7：<code>sudo yum install docker</code>。</p>
<p>启动Docker服务：<code>sudo service docker start</code>。</p>
<p>启动时自动运行：<code>sudo chkconfig docker on</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;docker简介&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="https://muleimulei.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Git分支操作</title>
    <link href="https://muleimulei.github.io/2017/04/24/git/git%E5%88%86%E6%94%AF/"/>
    <id>https://muleimulei.github.io/2017/04/24/git/git分支/</id>
    <published>2017-04-24T15:31:51.684Z</published>
    <updated>2017-04-26T12:38:09.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Git分支操作</p>
</blockquote>
<a id="more"></a>
<p>这篇文章主要说明如何使用分支使我们的开发工作更加顺滑。</p>
<h2 id="git-branch-用法"><a href="#git-branch-用法" class="headerlink" title="git branch 用法"></a>git branch 用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git branch //列出所有分支</div><div class="line">git branch <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //创建名为<span class="tag">&lt;<span class="name">branch</span>&gt;</span>的分支，但是不会切换过去</div><div class="line">git branch -d <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //删除指定分支，这是一个安全操作，git会阻止你删除包含未合并更改的分支</div><div class="line">git branch -D <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //强制删除分支</div><div class="line">git branch -m <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //重新命名当前分支</div></pre></td></tr></table></figure>
<blockquote>
<p>在日常开发中，无论是修复一个我们不稳定bug或者是添加一个功能，我们都应该新建一个分支来封装我们的修改。这样可以保证我们不稳定的代码永远不会提交到主分支上。</p>
</blockquote>
<ol>
<li><p>创建分支<br> 分支只是指向提交的指针，当你创建新分支，实际上只是创建了一个新的指针，仓库本身不会受到影响，一开始你的仓库只有一条分支：</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-b965174b6cab013a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p> 然后你执行下面的命令创建一个分支，用于加一个新的feature：</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-ce3367855cc86818.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p> 当然执行后，你只是创建了这个分支，还需要执行<code>git checkout new-feature</code>切换到<code>new-feature</code>分支，然后在使用<code>git add,git commit</code></p>
</li>
</ol>
<ol>
<li><p>删除分支<br> 假如你已经开发完了new-feature ,并且已经commit代码了，你就可以自由的删除这个分支了。<code>git branch -d new-feature</code><br> 如果分支没有合入master，会报下面的错误：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error: The branch &apos;new feature&apos; is not fully merged.</div><div class="line">If you are sure you want to delete it, run &apos;git branch -D crazy-experiment&apos;.</div></pre></td></tr></table></figure>
<p> 这时候你就可以合并分支，如果你真的确定要删除分支，可以使用<strong>-D</strong>执行强制删除：<code>git branch -D new-feature</code></p>
</li>
<li><p>切换分支（git checkout）</p>
<p> <code>git checkout</code>命令允许你切换到用<code>git branch</code>创建的分支。切换分支会更新当前工作目录中的文件，还可以使用<code>git log</code>查看当前分支的历史。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="tag">&lt;<span class="name">existing-branch</span>&gt;</span> //切换到一个已有分支上</div><div class="line">git checkout -b <span class="tag">&lt;<span class="name">new-branch</span>&gt;</span> //创建时进行直接切换</div><div class="line">git checkout -b <span class="tag">&lt;<span class="name">new-branch</span>&gt;</span> <span class="tag">&lt;<span class="name">existing-branch</span>&gt;</span> //在已有的分支上创建分支，原来的分支是新分支的基</div></pre></td></tr></table></figure>
<p> <code>git branch</code>和<code>git checkout</code>是一对兄弟，你可以使用<code>git checkout</code>在不同的分支或者bug分支之间切换，而不产生影响。</p>
</li>
<li><p>合并(git merge)<br> 合并是git将被fork的历史放回到一起的方式。<code>git merge</code>命令允许你将<code>git branch</code>创建的多条分支合并成一个。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git merge <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //将指定分支并入当前分支</div><div class="line">git merge --no-ff <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //经指定分支并入当前分支，但总是生成一个合并提交(即是快速向前合并)。这可以用来记录仓库中发生的所有合并。</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>一旦在分支上完成开发，我们需要把新分支的提交合并到主分支，git会根据目前分支之间的结构信息，选择不同的算法来完成合并。</p>
</blockquote>
<ul>
<li>快速向前合并</li>
<li>三路合并</li>
</ul>
<h2 id="快速向前合并"><a href="#快速向前合并" class="headerlink" title="快速向前合并"></a>快速向前合并</h2><p>当new-feature的分支与原有的master分支呈现线性关系时，执行快速向前合并，git将当前的HEAD指针快速移到目前分支的顶端，master分支也就拥有了new-feature分支的历史了，</p>
<p>来看一个快速向前合并的实例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 开始新功能</div><div class="line">git checkout -b new-branch master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '开始新功能'</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '完成功能'</div><div class="line"></div><div class="line"># 合并new-feature分支</div><div class="line">git checkout master</div><div class="line">git merge new-feature</div><div class="line">git branch -d new-feature</div></pre></td></tr></table></figure>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-6d2a2fdb236db48d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>对于合作开发的人少的项目，这是一种主要的工作流，合作开发的人多的话，主master分支经常会有新提交，如果你的new-feature耗时比较久，再提交时，master分支就可能过去几个版本了，这时候就需要下面的三路合并了。</p>
<h2 id="三路合并"><a href="#三路合并" class="headerlink" title="三路合并"></a>三路合并</h2><p>如果master分支在new-feature分离后，又有了新的提交，即开始分叉了，git只能执行三路合并，三路合并使用一个专门的提交来合并两个分支的历史。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/272719-9f23d7fc6aff8a45.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>所谓的三路也就是：两个分支的顶端以及他们共同的祖先。在执行三路合并后：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/272719-9f23d7fc6aff8a45.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>使用三路合并产生的合并提交作为两个分支的连接标志。</p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>如果两个分支对同一个文件的同一部分均有修改时，git将无法判断应该使用哪个，这时候合并提交会停止，需要你手动解决这些冲突。你可以使用<code>git status</code>来查看哪里存在冲突，也可以在目录下执行<code>grep -rn HEAD</code>来查看哪些文件里有这个标记，有这个的地方都是有冲突的。</p>
<p>当修改完所有的冲突后，<code>git add</code>所有的冲突文件，运行<code>git commit</code>生成一个合并提交，这和提交一个普通快照的流程相同。<strong>提交冲突只会存在三路合并中，快速向前合并中不可能出现针对同一文件同一部分的不一样的修改</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 开始新功能</div><div class="line">git checkout -b new-feature master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '开始新功能'</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '完成功能'</div><div class="line"></div><div class="line"># 在master分支上开发</div><div class="line">git checkout master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '在master上添加了一些及其稳定的功能'</div><div class="line"></div><div class="line"># 合并new-feature分支</div><div class="line">git merge new-feature</div><div class="line">git branch -d new-feature</div></pre></td></tr></table></figure>
<p>这时候，merge会停止，因为无法将master直接移动到new-feature。所有需要你手动合并冲突后在提交。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Git分支操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://muleimulei.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://muleimulei.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>websocket入门</title>
    <link href="https://muleimulei.github.io/2017/04/22/HTML5/websocket%E5%85%A5%E9%97%A8/"/>
    <id>https://muleimulei.github.io/2017/04/22/HTML5/websocket入门/</id>
    <published>2017-04-22T14:37:34.733Z</published>
    <updated>2017-04-28T14:18:57.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>websocket基础</p>
</blockquote>
<a id="more"></a>
<p>websocket API使你可以通过web，在客户端应用程序和服务器端进程进行之间建立全双工通信。</p>
<ol>
<li>websocket构造函数<br> 为了建立到服务器的websocket连接，使用websocket接口，通过指向一个代表所要连接端点的URL，实例化一个websocket对象。websocket协议定义了两种方案—ws和wss，分别用于客户端和服务器之间的非加密和加密流量。ws(websocket)方案与http URI方案类似。wss(websocket secure)URI方案表示使用传输层安全性(TLS,也叫SSL)的websocket连接,使用https采用的安全机制来保证http连接安全。<br> websocket构造函数有一个必须的参数URL(指向连接目标的URL)和一个可选参数protocols(为了建立连接，服务器必须在其响应中包含的一个或一组协议名称)。在protocols参数中可以使用的协议包括xmpp(eXtensible Messaging and Presence Protocol,可拓展消息处理现场协议)，soap(Simple Object Access Protocol,简单对象访问协议)或者自定义协议。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> echoSocket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org'</span>,[<span class="string">'com.kaazing.echo'</span>,<span class="string">'example.imaginary.protocol'</span>]);</div><div class="line">echoSocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(echoSocket.protocol);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>websocket事件<br> websocket API是纯事件驱动的。应用程序代码监听websocket对象上的事件，以便处理输入数据和连接状态的改变。websocket协议也是事件驱动的。客户端应用程序不需要轮询服务器来得到更新的数据。消息和事件将在服务器发送它们的时候异步到达</p>
<ul>
<li><p>websocket事件：open</p>
<ul>
<li><p>一旦服务器响应了websocket连接，open事件触发并建立一个连接。open事件对应的回调函数称为onopen。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection open ....'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到open事件触发时，协议握手已经完成，websocket已经准备好发送和接收数据。如果应用程序接收到一个open事件，那么可以确定websocket服务器成功的处理了连接请求，并且同意与应用程序通信。</p>
</li>
</ul>
</li>
<li><p>websocket事件：message</p>
<ul>
<li><p>websocket消息包含来自服务器的数据。message事件在接收到消息时触发，对应于该事件的回调函数是onmessage。除了文本，websocket消息还可以处理二进制数据，这种数据作为BLOB消息或者ArrayBuffer消息来处理。因为设置websocket消息二进制数据类型的应用程序会影响二进制消息，所以必须在读取数据之前决定用于客户端二进制输入数据的类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> e.data ===<span class="string">'string'</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'String message received'</span>,e,e.data);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'String message received'</span>,e,e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">       </div><div class="line"></div><div class="line"><span class="comment">//接受Blob消息</span></div><div class="line">ws.binaryType = <span class="string">'blob'</span>;</div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(e.data <span class="keyword">instanceof</span> Blob)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Blob message received'</span>,e.data);</div><div class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob(e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//接受ArrayBuffer消息    </span></div><div class="line">ws.binaryType = <span class="string">'arraybuffer'</span>;</div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(e.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ArrayBuffer message received'</span>,e.data);</div><div class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>websocket事件：error</p>
<ul>
<li><p>error事件在响应意外故障的时候触发。与该事件对应的回调函数为onerror。错误还会导致websocket连接关闭。如果你接受一个error事件，可以预期很快就会触发close事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>,e);</div><div class="line">    handle(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>websocket事件：close</p>
<ul>
<li><p>close事件在websocket连接关闭时触发。对应于close事件的回调函数是onclose。一旦连接关闭，客户端与服务器不再接受或者发送消息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'close'</span>,e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>close事件有三个有用的属性(property),可以用于错误处理和恢复：wasClean,code和error。wasClean属性是一个布尔属性，表示连接是否顺利关闭连接。如果websocket的关闭是对来自服务器的close帧的响应，则该属性为true。如果连接因为其它原因（列如，因为底层TCP连接关闭），则该属性为false。code和reason属性表示服务器发送的关闭握手状态。这些属性和websocket.close()方法中的code和reason参数一致。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>websocket方法：send()方法和close()方法</p>
<ul>
<li><p>send()方法<br>  使用websocket在客户端和服务器之间建立双全工双向连接后，就可以在连接打开时(在调用onopen监听器之后，调用onclose监听器之前)调用send方法。使用send方法可以从客户端向服务器发送消息。在发送一条或者多条消息之后，可以保持连接打开，或者调用close方法关闭。<code>ws.send(‘hello’)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org'</span>);</div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ws.send(<span class="string">'hello'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>close()方法<br>  使用close方法，可以关闭websocket连接或者终止连接尝试。如果连接已经关闭，该方法什么也不做。<code>ws.close()</code>可以向close方法传递两个可选参数：code(数字型的状态代码)和reason(一个文本字符串)。传递这些参数能够向服务器传递关于客户连接原因的信息。</p>
</li>
</ul>
</li>
<li><p>websocket对象特性</p>
</li>
</ol>
<ul>
<li>readyState：<br>  websocket对象通过只读属性readyState报告其连接状态。</li>
</ul>
<table>
<thead>
<tr>
<th>特性常量</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>WebSocket.CONNECTING</td>
<td style="text-align:center">0</td>
<td style="text-align:center">连接正在进行中，但还未建立</td>
</tr>
<tr>
<td>WebSocket.OPEN</td>
<td style="text-align:center">1</td>
<td style="text-align:center">连接已经建立。消息可以在客户端和服务器之间通信</td>
</tr>
<tr>
<td>WebSocket.CLOSING</td>
<td style="text-align:center">2</td>
<td style="text-align:center">连接正在进行关闭握手</td>
</tr>
<tr>
<td>WebSocket.CLOSED</td>
<td style="text-align:center">3</td>
<td style="text-align:center">连接已经关闭，不能打开</td>
</tr>
</tbody>
</table>
<ul>
<li><p>bufferedAmount:<br>  设计应用程序时，你可能想要检查发往服务器的缓存数据量，特别是在客户端应用程序向服务器发送大量数据时。尽管调用send是立即生效的，但是数据在互联网上的传输却不是如此。浏览器将为你的客户端应用程序缓存出站数据，从而使你可以随时调用send()，发送任意数量的数据。你可以使用bufferedAmount特性检查已经进入队列，但是尚未发送到服务器的字节数。这个特性报告的值不包括协议组帧开销或者操作系统，网络硬件所进行的的缓存。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> THRESHOLD = <span class="number">10240</span>;</div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org/updates'</span>);</div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ws.bufferedAmount&lt;THRESHOLD)&#123;</div><div class="line">            ws.send(getApplicationState());</div><div class="line">        &#125;    </div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>protocol<br>  在前面关于websocket构造函数的讨论中，我们提到了protocol参数，它让服务器知道客户端理解并可在websocket上使用的协议。websocket对象的protocol特性提供了另一条关于websocket实例的有用信息。客户端和服务器协议协商的结果可以在websocket对象上看到。protocol特性包含在打开握手期间websocket服务器选择的协议名，换句话说，protocol特性告诉你特定websocket上使用的协议。protocol特性在最初的握手完成之前为空，如果服务器没有选择客户端提供的某个协议，该特性保持控制。</p>
</li>
</ul>
<h2 id="完整客户端代码如下："><a href="#完整客户端代码如下：" class="headerlink" title="完整客户端代码如下："></a>完整客户端代码如下：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Websocket Echo Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            output = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</div><div class="line">            ws = <span class="keyword">new</span> Websocket(<span class="string">'ws://echo.websocket.org/echo'</span>);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">                p.style.wordWrap = <span class="string">'break-word'</span>;</div><div class="line">                p.textContent = s;</div><div class="line">                output.appendChild(p);</div><div class="line">                <span class="built_in">console</span>.log(s);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">                ws.send(msg);</div><div class="line">                log(<span class="string">'Message send'</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Connected'</span>);</div><div class="line">                sendMessage(<span class="string">'Hello Websocket'</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Disconnected:'</span>+e.reason);</div><div class="line">            &#125;</div><div class="line">            ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Error '</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Message received'</span>+e.data);</div><div class="line">                ws.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        setup();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="结合websocket使用HTML5媒体的完整客户端应用程序"><a href="#结合websocket使用HTML5媒体的完整客户端应用程序" class="headerlink" title="结合websocket使用HTML5媒体的完整客户端应用程序"></a>结合websocket使用HTML5媒体的完整客户端应用程序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Drop Image Here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> Websocket(<span class="string">'ws://echo.websocket.org/echo'</span>);</div><div class="line">        ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'open'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//处理二进制数据</span></div><div class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> blob = e.data;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'message :'</span>+blob.size +<span class="string">'bytes'</span>);</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.webkitURL)&#123;</div><div class="line">                URL = webkitURL;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> uri = URL.createObjectURL(blob);</div><div class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">            img.src = uri;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#fff'</span>;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                handleFileDrop(e.dataTransfer.files[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                <span class="built_in">console</span>.log(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#6fff41'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#fff'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handleFileDrop</span>(<span class="params">file</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">            reader.readAsArrayBuffer(file);</div><div class="line">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'sending: '</span>+file.name);</div><div class="line">                ws.send(reader.result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;websocket基础&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="HTML5" scheme="https://muleimulei.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>jquery异步获取数据</title>
    <link href="https://muleimulei.github.io/2017/04/20/jquery/jquery%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>https://muleimulei.github.io/2017/04/20/jquery/jquery获取数据/</id>
    <published>2017-04-20T07:47:08.896Z</published>
    <updated>2017-04-20T09:10:01.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jquery异步获取数据</p>
</blockquote>
<a id="more"></a>
<h1 id="jquery异步获取数据"><a href="#jquery异步获取数据" class="headerlink" title="jquery异步获取数据"></a>jquery异步获取数据</h1><ul>
<li>使用load()方法异步请求数据<br>  使用load()方法通过ajax请求加载服务器的数据，并把返回的数据放置到指定的元素中。load(url,[data],[callback])，参数URL为加载服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">        $(<span class="string">'.content'</span>).html(<span class="string">'&lt;img src='</span>loading.gif<span class="string">'/&gt;'</span>)</div><div class="line">                     .load(<span class="string">'fruit.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        $<span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">                      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用getJSON()方法异步加载json格式数据<br>  使用getJSON()方法可以通过ajax异步请求的方式获取服务器中的数据，并对获取到的数据进行解析，显示在页面中。<code>$.getJSON(url,[data],[callback])</code>，其中，URL参数为请求加载json格式文件的服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后，执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">    $.getJSON(<span class="string">'sport.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">        $.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">index,sport</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).append(<span class="string">`&lt;li&gt;sport["name"]&lt;/li&gt;`</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>使用getScript()方法异步加载并执行js文件，<code>$.getScript(url,[callback])</code></li>
<li>使用get()方法以GET方式从服务器获取数据，通过方法中中的回调函数的参数返回请求的数据。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">    $.get(<span class="string">'info.php'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">false</span>);</div><div class="line">        $(<span class="string">'ul'</span>).append(data.name);</div><div class="line">        $(<span class="string">'ul'</span>).append(data.say);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用post方法以post方式向服务器发送数据<br>  post()方法多用于以post方式向服务器发送数据，服务器接受到数据后，进行处理，并将处理结果返回给页面，<code>$.post(url,[data],[callback])</code>，参数URL为加载服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $.post(<span class="string">'check.php'</span>,&#123;</div><div class="line">            <span class="attr">num</span>: $(<span class="string">'#number'</span>).val()    </div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).append(<span class="string">`&lt;li&gt;你输入的<span class="subst">$&#123;$(<span class="string">'#number'</span>),val()&#125;</span>是&lt;b&gt;<span class="subst">$&#123;data&#125;</span>&lt;/b&gt;&lt;/li&gt;`</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$num = $_POST[<span class="string">'num'</span>];</div><div class="line"><span class="keyword">if</span>($num%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'偶数'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'奇数'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用serialize()方法序列化表单元素值<br>  使用serialize()方法可以将表单中有name属性的元素值进行序列化，生成标准的URL编码文本字符串，直接用于ajax请求，调用格式如下：<code>$(selector).serialize()</code></p>
</li>
<li><p>使用ajax方法加载服务器数据<br>  ajax方法是最底层，功能最强大的请求服务器数据的方式，它不仅仅可以获取服务器返回的数据，还可以向服务器发送并传递数值。$.ajas([settings])，其中参数setting为发送ajax请求时的配置对象，在该对像中，dada为请求时传递的数据，dataType为服务器返回的数据类型，success为请求成功时的回调函数，type为发送数据请求的方式，默认为get。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'article.php'</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">false</span>);</div><div class="line">                $(<span class="string">'ul'</span>).append(data);</div><div class="line">            &#125;    </div><div class="line">        &#125;);    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用ajaxSetup方法设置全局ajax默认选项<br>  使用ajaxSetup()方法可以设置，ajax请求的一些全局变量，设置完成后，后面的ajax请求不需要添加这些选项值。<code>$.ajaxSetup([options])</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajaxSetup(&#123;</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).empty().append(data);</div><div class="line">        &#125;    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'a1.txt'</span>    </div><div class="line">    &#125;);</div><div class="line">&#125;); </div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'a2.txt'</span>    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用ajaxStart()和ajaxStop()方法<br>  两者绑定ajax时间。ajaxStart()方法用于在ajax请求发出前触发函数，ajaxStop()方法在ajax请求完成后触发函数。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jquery异步获取数据&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
      <category term="jquery" scheme="https://muleimulei.github.io/categories/JavaScript/jquery/"/>
    
    
      <category term="jquery" scheme="https://muleimulei.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>commonJS,AMD与CMD的区别与联系</title>
    <link href="https://muleimulei.github.io/2017/04/16/JavaScript/commonJs_AMD_CMD%E6%AF%94%E8%BE%83/"/>
    <id>https://muleimulei.github.io/2017/04/16/JavaScript/commonJs_AMD_CMD比较/</id>
    <published>2017-04-16T04:33:06.370Z</published>
    <updated>2017-04-16T07:13:21.624Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>commonJS,AMD与CMD的区别与联系</p>
</blockquote>
<a id="more"></a>
<p><strong>1. CommonJS</strong>原本叫serverJS，是以在浏览器环境之外构建JavaScript生态环境为目标而产生的项目，比如在服务器和桌面环境中。</p>
<blockquote>
<p>commonJS规范是为了解决JavaScript的作用于问题而定义的模块形式，可以使每个模块在它自身的命名空间中执行。</p>
</blockquote>
<p>该规范的主要内容是，模块必须通过module.exports导出对外的变量或接口，通过require()来导入其它模块的输出到当前模块作用域中。<strong>Node.js</strong>就是采用commonJS规范。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//moduleA.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//moduleB.js</span></div><div class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</div><div class="line">moduleA();</div></pre></td></tr></table></figure>
<p><strong>2.AMD</strong>(Asynchronous Module Definition)(异步模块定义)是为了浏览器环境设计的，因为CommonJS模块系统是同步加载的，当前浏览器环境是异步的。</p>
<blockquote>
<p>AMD定义了一套JavaScript模块依赖异步加载标准，来解决同步加载问题。</p>
</blockquote>
<p>模块通过define函数定义在闭包中，格式如下</p>
<p><code>define(id? String, dependencies? String[], factory: Function|Object)</code></p>
<ul>
<li><p>id是模块名字，它是可选参数</p>
</li>
<li><p>dependencies 指定了所要依赖的模块列表，他是一个数组，也是可选的参数，每个依赖的模块的输出将作为参数一次传入factory中。如果没有指定dependencies，那么他的默认值是<strong>[‘require’,’exports’,’module’]</strong>。</p>
</li>
<li><p>factory 是最后一个参数，它包裹了模块的具体实现，他是一个函数或是一个对象。如果是函数，那么它的返回值就是模块的的输出接口或值。</p>
</li>
</ul>
<p>定义一个moduleA，它依赖jQuery模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'moduleA'</span>,[<span class="string">'jquery'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="comment">//$是jquery模块输出</span></div><div class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用</span></div><div class="line">define([<span class="string">'moduleA'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">moduleA</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<p>require.js就是采用AMD模块</p>
<p><strong>3.CMD</strong>(Common Module Defination)</p>
<blockquote>
<p>在cmd规范中，一个模块就是一个文件。代码的书写格式如下：<strong>define(factory)</strong><br>define是全局函数，用来定义模块。define接受factory参数，factory可以是函数，对象或字符串。</p>
</blockquote>
<ul>
<li><p>当factory为对象或字符串时，表示该模块的接口就是该对象或字符串，比如要定义一个json数据模块<br><code>define({‘key’,’value’})</code></p>
</li>
<li><p>也可以通过字符串定义模板模块 <code>define(‘Hello ‘)</code></p>
</li>
<li><p>factory是函数时，表示是模块的构造方法。执行该构造方法，可以得到模块对外提供的接口，factory方法在执行时，默认会传入三个参数，require，exports，module</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(function(require,exports,module)&#123;</div><div class="line">    //需要导出的模块</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require是方法，接收模板标识作为唯一参数，用来获取其它模块提供的接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    const a = require(&apos;./a&apos;);</div><div class="line">    a.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>require是同步往下执行的，require.async(id,callback?)用来在模块内部异步加载模块，并在加载完后执行回调函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    require.async([&apos;./a,&apos;./b], function(c ,d )&#123;</div><div class="line">        c.doSomething();    </div><div class="line">        d.doSomething();    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>factory是函数时的第二个参数是exports，exports是一个对象，用来对外提供模块接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    exports.str = &apos;xxxxxxxxx&apos;;</div><div class="line">    exports.doSomething = function()&#123; //对外提供doSomething方法</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>除了exports外，还可以用return直接对外提供对象接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">   return&#123;</div><div class="line">        str: &apos;xxxxxxx&apos;,</div><div class="line">        doSomething: function()&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>exports是module.exports对象的一个引用，很多时候exports都无法满足需求，列如对外提供一个实例对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports,module)&#123;</div><div class="line">    function Person(name, age)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    module.exports = new Person(&apos;lily&apos;,34);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="AMD与CMD比较"><a href="#AMD与CMD比较" class="headerlink" title=" AMD与CMD比较"></a> AMD与CMD比较</h1><p>AMD默认是依赖前置，在一开始就将需要依赖的文件配置并加载好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&apos;moduleA&apos;,[&apos;jquery&apos;],function($)&#123;</div><div class="line">    //依赖的配置文件已经配置并加载好了</div><div class="line">    $(&apos;body&apos;).text(&apos;hello world&apos;);    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>CMD是依赖就近，需要使用的时候才会去配置加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    var a = require(&apos;./a.js&apos;); //配置并加载，同步</div><div class="line">    if(false)&#123;</div><div class="line">        var b = require(&apos;./b.js&apos;); //配置的文件永远不会被加载</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;commonJS,AMD与CMD的区别与联系&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>phantomJS简单使用方法</title>
    <link href="https://muleimulei.github.io/2017/04/14/nodejs/PhantomJS/"/>
    <id>https://muleimulei.github.io/2017/04/14/nodejs/PhantomJS/</id>
    <published>2017-04-14T15:57:33.168Z</published>
    <updated>2017-04-16T04:31:41.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>phantomJS简单使用方法</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>概述<br>有时，我们需要浏览器处理网页，但并不需要浏览，比如生成网页的截图，抓取网页数据等操作。PhantomJS的功能，就是提供一个浏览器环境的命令行接口，你可以把它看做一个“虚拟浏览器”，除了不能浏览，其它与正常浏览器一样。它的内核是webkit引擎，不提供图形界面，只能在命令行中使用。</p>
</li>
<li><p>webpage模块<br>webpage模块是PhantomJS的核心模块，用于网页操作。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var webpage = require(&apos;webpage&apos;);</div><div class="line">var page = webpage.create();</div></pre></td></tr></table></figure>
<p>上面代码表示加载PhantomJS的webpage模块，并创建一个实例。</p>
<ul>
<li>open()方法<blockquote>
<p>该方法用于打开具体的网页</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(s);</div><div class="line">    phantom.exit();  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码中，open()方法，用于打开具体的网页。他接受两个参数。第一个参数是网页的网址，第二个参数是回调函数，网页打开后该函数将会运行，它的参数是一个表示状态的字符串，如果打开成功就是success，否则就是fail。</p>
<blockquote>
<p>只要接受到服务器返回的结果，PhantomJS就会报告网页打开成功，而不管服务器是否返回404或者500错误。</p>
</blockquote>
<p>open方法默认使用GET方法，与服务器通信，但是也可以使用其它方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line"><span class="keyword">var</span> postbody = <span class="string">'user=user&amp;password=password'</span>;</div><div class="line">page.open(url,<span class="string">'POST'</span>,postbody,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Status: '</span>+status);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，使用post方法向服务器发送数据。open方法的第二个参数来指定http方法，第三个参数用来指定该方法所要使用的数据。</p>
<p>open方法还允许提供配置对象，对HTTP请求进行更详细的配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line"><span class="keyword">var</span> settings = &#123;</div><div class="line">    <span class="attr">operation</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">encoding</span>: <span class="string">'utf-8'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">data</span>: <span class="built_in">JSON</span>.stringfy(&#123;</div><div class="line">        <span class="attr">some</span>: <span class="string">'data'</span>,</div><div class="line">        <span class="attr">another</span>: [<span class="string">'customer'</span>,<span class="string">'data'</span>]</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">page.open(url,settings,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Status'</span>+status);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>evalute()方法<blockquote>
<p>evalute方法用于打开网页后，在页面中执行JavaScript代码。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> title = page.evalute(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.title;    </div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Page title is'</span>+ title);</div><div class="line">    phantom.exit();</div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>网页内部的console语句，以及evalute方法内部的console语句，默认不会显示在命令行。这时,可以用onConsoleMessage方法监听这个事件，进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Page title is '</span> + msg);</div><div class="line">&#125;;</div><div class="line">page.open(url, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">  page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.title);</div><div class="line">  &#125;);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>includeJs()<blockquote>
<p>includeJs方法用于页面加载外部脚本，加载结束后就调用指定的回调函数。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    page.includeJs(<span class="string">'jquery.min.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        page.evalute(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $(<span class="string">'button'</span>).click();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子在页面中注入jquery脚本，然后点击所有的按钮。需要注意的是，由于是异步加载，所以Phantom.exit()语句要放在page.includeJs()方法的回调函数之中，否则页面会过早移除。</p>
<ul>
<li>render()方法</li>
</ul>
<p>render方法用于将网页保存成图片，参数就是指定的文件名。该方法根据后缀名，将网页保存成不同的格式，目前支持PNG,GIF,JPEG和PDF。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.viewportSize = &#123;<span class="attr">width</span>: <span class="number">1920</span>, <span class="attr">height</span>: <span class="number">1080</span>&#125;;</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    page.render(<span class="string">'main.jpeg'</span>,&#123;<span class="attr">format</span>: <span class="string">'jpeg'</span>,<span class="attr">quality</span>: <span class="string">'100'</span>&#125;);</div><div class="line">    phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>该方法还可以接受一个配置对象，format字段用于指定图片格式，quality字段用于指定图片质量，最小为0，最大为100。</p>
<ul>
<li>viewportSize,zoomFactor</li>
</ul>
<p>viewportSize属性指定浏览器视口的大小,即网页加载的初始浏览器窗口大小。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.viewportSize = &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">480</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">800</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>viewportSize的height字段必须指定，不可省略。</p>
<p>zoomFactor属性用来指定渲染时页面的放大系数，默认是1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.zoomFactor = <span class="number">0.25</span>;</div><div class="line">page.render(<span class="string">'capture.png'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;phantomJS简单使用方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node" scheme="https://muleimulei.github.io/categories/Node/"/>
    
    
      <category term="tools" scheme="https://muleimulei.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>爬取网易云音乐</title>
    <link href="https://muleimulei.github.io/2017/04/14/nodejs/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>https://muleimulei.github.io/2017/04/14/nodejs/爬取网易云音乐/</id>
    <published>2017-04-14T15:07:13.645Z</published>
    <updated>2017-04-15T14:00:25.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>爬取网易云音乐</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>该爬虫使用PhantomJS,cheerio,bluebird以及Node.js内置模块来实现</p>
</blockquote>
<p>首先，我们需要认识到利用普通爬取静态网页的方式是爬取不到源码的，你只会拿到源码的模板，数据根本没有被填充，所以我们需要使用PhantomJS这个工具。它的功能，就是提供一个浏览器环境的命令行接口，你可以把它看做一个虚拟的浏览器，除了不能浏览，其它与正常浏览器一样。它的内核是wenkit引擎，不提供图形界面，只能在命令行下使用。其次，我们使用cheerio模块，其提供了类似于jquery的方法来解析爬取到的HTML代码，另外，我们使用blueBird来异步爬取。(这些模块可以使用npm来下载安装)</p>
<ol>
<li>官网下载到的phantomJS是一个可执行程序，下载完成后配置其环境变量。然后利用Node.js的child_process新起进程来调用此命令。具体代码如下：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.js文件</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Page title is '</span> + msg);</div><div class="line">&#125;;</div><div class="line">page.settings.userAgent = <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>;</div><div class="line">page.open(<span class="string">'url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;<span class="comment">//open方法的第一个参数是需要爬去的网址</span></div><div class="line">    <span class="keyword">if</span> (status !== <span class="string">'success'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Unable to access network'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'正在爬取请稍后'</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> result = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">"g_iframe"</span>).contentDocument.documentElement.innerHTML;</div><div class="line">            &#125;);</div><div class="line">            <span class="built_in">console</span>.log(result);</div><div class="line">            phantom.exit();</div><div class="line">        &#125;, <span class="number">7000</span>); <span class="comment">//需进行延迟等待，带页面渲染完毕再进行爬取</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>主程序代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> ids = []; <span class="comment">//存取歌曲ID</span></div><div class="line"><span class="keyword">var</span> list=[]; <span class="comment">//存取所有promise对象</span></div><div class="line"><span class="keyword">var</span> details = []; <span class="comment">//存取歌曲信息</span></div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token='</span>;</div><div class="line"><span class="keyword">var</span> urls = []; <span class="comment">//存取歌曲json文件信息</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJson</span>(<span class="params">u</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">        http.get(u, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line">            res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                html += data;</div><div class="line">            &#125;);</div><div class="line">            res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                resolve(html);</div><div class="line">            &#125;);</div><div class="line">        &#125;).on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            reject(e);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"获取信息出错!"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解析网页</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseContent</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tr = $(<span class="string">'tbody'</span>).find(<span class="string">'tr'</span>);</div><div class="line">    tr.each(<span class="function"><span class="keyword">function</span>(<span class="params">i,t</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> td = $(t).find(<span class="string">'td'</span>).eq(<span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> id = $(td).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).split(<span class="string">'='</span>)[<span class="number">1</span>];</div><div class="line">        ids.push(id); <span class="comment">//获取到歌曲id</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//拼接URL,获取到歌曲的json文件</span></div><div class="line">    ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> u = url.replace(<span class="regexp">/\d&#123;4,&#125;/g</span>,num);</div><div class="line">        urls.push(u);</div><div class="line">    &#125;);</div><div class="line">    urls.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">        list.push(getJson(url));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">Promise</span>.all(list).then(<span class="function"><span class="keyword">function</span>(<span class="params">jsons</span>)</span>&#123;<span class="comment">//解析获取到的json文件</span></div><div class="line">        jsons.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(json);</div><div class="line">            <span class="comment">//获取到歌曲的基本信息</span></div><div class="line">            <span class="keyword">var</span> name = json.songs[<span class="number">0</span>].name; </div><div class="line">            <span class="keyword">var</span> singer = json.songs[<span class="number">0</span>].artists[<span class="number">0</span>].name;</div><div class="line">            <span class="keyword">var</span> picUrl = json.songs[<span class="number">0</span>].album.picUrl;</div><div class="line">            <span class="keyword">var</span> src = json.songs[<span class="number">0</span>].mp3Url;</div><div class="line">            details.push(&#123;</div><div class="line">                <span class="string">"name"</span>: name,</div><div class="line">                <span class="string">"singer"</span>:singer,</div><div class="line">                <span class="string">"picUrl"</span>:picUrl,</div><div class="line">                <span class="string">"src"</span> : src</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        fs.writeFile(<span class="string">'music.json'</span>,<span class="built_in">JSON</span>.stringify(details)); <span class="comment">//将获取到的数据以json格式写入到文件中</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//新建进程利用phantomJS来运行1.js文件</span></div><div class="line">cp.exec(<span class="string">'phantomjs.exe 1.js'</span>,&#123;</div><div class="line">    <span class="attr">timeout</span>: <span class="number">20000000</span>, <span class="comment">//超时时间</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,stdout,stderr</span>)</span>&#123; <span class="comment">//传给回调的 stdout 和 stderr 参数会包含子进程的 stdout 和 stderr 的输出</span></div><div class="line">    <span class="keyword">if</span>(error)&#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">`exec error <span class="subst">$&#123;error&#125;</span>`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> $ = cheerio.load(stdout); <span class="comment">//利用cheerio来解析爬取到的HTML</span></div><div class="line">    parseContent($);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后，你就可以在music.json中看到自己需要爬去的歌曲信息了 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;爬取网易云音乐&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node" scheme="https://muleimulei.github.io/categories/Node/"/>
    
    
  </entry>
  
</feed>
