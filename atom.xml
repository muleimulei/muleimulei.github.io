<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风的影子</title>
  <subtitle>小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muleimulei.github.io/"/>
  <updated>2017-05-04T09:13:28.618Z</updated>
  <id>https://muleimulei.github.io/</id>
  
  <author>
    <name>穆蕾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Docker</title>
    <link href="https://muleimulei.github.io/2017/05/04/docker/%E4%BD%BF%E7%94%A8Docker/"/>
    <id>https://muleimulei.github.io/2017/05/04/docker/使用Docker/</id>
    <published>2017-05-04T09:08:44.098Z</published>
    <updated>2017-05-04T09:13:28.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>使用Docker</p>
</blockquote>
<a id="more"></a>
<h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;使用Docker&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="https://muleimulei.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>docker简介</title>
    <link href="https://muleimulei.github.io/2017/05/03/docker/docker%E7%AE%80%E4%BB%8B/"/>
    <id>https://muleimulei.github.io/2017/05/03/docker/docker简介/</id>
    <published>2017-05-03T08:34:48.255Z</published>
    <updated>2017-05-04T09:13:17.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>docker简介</p>
</blockquote>
<a id="more"></a>
<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker是Docker公司2013年3月推出的开源容器项目，上市至今已有3年，是世界范围内拥有超高人气。进入2010年，服务器市场急速向云环境转移。人们开始更多的租用虚拟服务器，只需要缴纳一定的租金。不需要购买实际的物理服务器。尤其是在搭建物理服务器时，服务器硬件的购买及其安装都需要耗费相当长的时间。但在云环境下，无论是1台还是1000台，只需单击几次即可轻松搭建虚拟服务器。</p>
<p>创建虚拟服务器后，还要在其中安装各种软件，进行各种设置。如果只有一两台服务器。那么能够进行轻松设置；但随着服务器数量的增加，采用人工设置就难了。linux/Unix环境中，虽然可以借助沿用至今的shell脚本进行自动安装与设置，但这种方式有一定的局限性。使用shell脚本很难实现集中式管理功能与其它复杂功能。</p>
<p>此时出现了“不可变基础设施”，指的<strong>是主机OS与服务器运行环境(服务器程序，源代码，已编译的二进制文件)分离，只设置一次运行环境，之后不发生变更</strong>。也就是说，将服务器运行环境创建为镜像后，部署至各服务器运行。此时若服务器更新，则运行环境本身不会发生变更，只要重新生成镜像并再次部署即可。就像云平台对服务器“用过即扔”，不可变基础设施中的服务运行环境镜像也是用过一次后就扔掉。</p>
<p>不可变基础设施拥有多种优点：</p>
<ul>
<li><strong>管理方便</strong> : 由于服务运行环境以镜像形式存在，所以只要管理镜像本身即可。特别是可以集中管理镜像，实现系统部署与管理。此外，镜像生成设置也以文件形式存在，可以灵活用于版本管理系统。</li>
<li><strong>拓展</strong> : 可以利用一个镜像不断创建服务器。与云平台的自动伸缩功能配合使用，能够轻松实现服务扩展。</li>
<li><strong>测试</strong> : 只要在开发人员PC或测试服务器中运行镜像，就可以搭建与实际服务运行环境一致的环境，非常易于测试。</li>
<li><strong>轻量</strong> : 分离操作系统与服务运行环境，实现轻量化，提供可以随时运行的环境。</li>
</ul>
<p>Docker项目实现了不可变基础设施。</p>
<h2 id="虚拟机与docker"><a href="#虚拟机与docker" class="headerlink" title="虚拟机与docker"></a>虚拟机与docker</h2><p>Docker与我们之前使用的VMware、Microsoft Hyper-V (Virtual PC)、Xen、Linux KVM等虚拟机类似。在虚拟机中安装Linux后，可以安装各种服务器程序与DB，运行已开发的应用程序与网站。将搭建好的虚拟机镜像复制到多台服务器运行，之后即可用一个镜像不断创建服务器。</p>
<ol>
<li><p>虚拟机<br> 虚拟机非常方便，但性能不佳。当前许多CPU都添加了对虚拟化功能的大量支持，但与物理机器相比，虚拟机的运行速度比较慢。<br> 为了进一步改善“完全虚拟化”的运行速度，半虚拟化技术登场，现在正得到广泛应用。</p>
 <img src="/assets/segment/1.png">
<p> 虚拟机本身是一台完整的计算机，总是需要安装客户OS。由于镜像中含有OS，所以镜像体积会变大。</p>
 <img src="/assets/segment/2.png">
<p> 无论网速多快，收发虚拟机镜像都会非常耗时，尤其是开源虚拟化软件。其重点在于OS虚拟化，只提供镜像创建与运行功能，在部署与管理功能上存在不足。</p>
</li>
<li><p>Docker<br> 与半虚拟化相比，Docker是一种更轻量化的方式。使用Docker则不需要安装客户OS。Docker镜像中只隔离并安装服务器运行所需的程序与库，与主机共享OS资源(系统调用)，这样就大大减小了镜像的体积。</p>
 <img src="/assets/segment/3.png">
<p> Docker没有硬件虚拟化层，所以与虚拟机相比，其在内存访问，文件系统，网络速度上明显快得多。与虚拟机不同，Docker提供了专门创建并部署镜像的功能。如同在git中管理源代码一样，Docker也提供镜像版本管理功能。此外，为了进行集中管理，Docker也提供了镜像的上传与下载功能(push/pull)。就像GitHub一样，Docker Hub 提供帮助用户共享的Docker镜像。</p>
</li>
<li><p>Docker镜像与容器<br> Docker中有“镜像”与“容器”的概念。首先了解“基础镜像”，它是指仅Linux发行版userland中安装的文件，一般为Linux发行版本的名称。此外，Linux发行版userland中也有安装Redis或Nginx等的基础镜像。因此，一般所说的“Docker镜像”是指安装基础镜像所需的程序，库，源代码之后创建的一个文件。<br> 我们很容易想到，若每次都安装基础镜像所需的程序，库，源代码，就会出现大容量镜像重复创建。Docker镜像只将基础镜像中变化的部分创建为镜像，运行时将基础镜像与可变部分合并运行。</p>
 <img src="/assets/segment/4.png">
</li>
</ol>
<blockquote>
<p>userland：以内存使用为基准，OS可化为<strong>内核空间</strong>与<strong>用户空间</strong>，用户空间中运行的可执行文件与库称为userland。Linux不能只从内核启动，所以userland也指启动时所需的最少可执行文件与库的组合。Linux发行版本中，userland通常包含启动所需的可执行文件，库以及原有的包系统。</p>
</blockquote>
<p>Docker不会创建整个镜像，而只针对变化的部分进行创建，然后继续引用父镜像。这种工作方式在Docker中称为“层”。<br>Docker镜像是文件，所以上传到存储空间后可以在别处下载使用。并且，向存储空间上传时，会同时上传子镜像与父镜像；同样，下载时也会同时操作子镜像与父镜像，之后只传输内容有变化的镜像。</p>
<p><strong>Docker容器是处于运行状态的镜像，使用一个镜像可以创建多个容器。从操作系统角度看，镜像是可执行的文件，容器是进程。而已经运行的容器中，也可以将更改的部分创建为镜像。可以将Docker视为特定执行文件或脚本的运行环境。</strong></p>
<p>linux/Unix系列系统中，文件运行所需的所有组成元素被切割的很小。这样虽然可以使系统结构简单明了，但会导致过度依赖，也很难解决。因此，Linux发行版也单独提供经过编译的包(rpm,deb包)。但每当运行服务器时，要想逐个编译源代码或安装并设置已有包也是相当麻烦的。</p>
<p>如果只有一两台服务器，则不会有太大困难，但云环境中创建的服务器多达几十台，几百台。此时若使用已经完成服务器配置的Docker镜像，那么无论要运行多少台服务器都能轻松搞定。</p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol>
<li>Ubuntu安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install docker.io</div><div class="line">sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker</div></pre></td></tr></table></figure>
<ol>
<li>RedHat Enterprise Linux、CentOS</li>
</ol>
<p>CentOS 6：<code>sudo yum install http://dl.fedoraproject.org/pub/epel/6/x86-64/epel-release-6-8.noarch.rpm</code>。</p>
<p>CentOS 7：<code>sudo yum install docker</code>。</p>
<p>启动Docker服务：<code>sudo service docker start</code>。</p>
<p>启动时自动运行：<code>sudo chkconfig docker on</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;docker简介&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="https://muleimulei.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Git分支操作</title>
    <link href="https://muleimulei.github.io/2017/04/24/git/git%E5%88%86%E6%94%AF/"/>
    <id>https://muleimulei.github.io/2017/04/24/git/git分支/</id>
    <published>2017-04-24T15:31:51.684Z</published>
    <updated>2017-04-26T12:38:09.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Git分支操作</p>
</blockquote>
<a id="more"></a>
<p>这篇文章主要说明如何使用分支使我们的开发工作更加顺滑。</p>
<h2 id="git-branch-用法"><a href="#git-branch-用法" class="headerlink" title="git branch 用法"></a>git branch 用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git branch //列出所有分支</div><div class="line">git branch <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //创建名为<span class="tag">&lt;<span class="name">branch</span>&gt;</span>的分支，但是不会切换过去</div><div class="line">git branch -d <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //删除指定分支，这是一个安全操作，git会阻止你删除包含未合并更改的分支</div><div class="line">git branch -D <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //强制删除分支</div><div class="line">git branch -m <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //重新命名当前分支</div></pre></td></tr></table></figure>
<blockquote>
<p>在日常开发中，无论是修复一个我们不稳定bug或者是添加一个功能，我们都应该新建一个分支来封装我们的修改。这样可以保证我们不稳定的代码永远不会提交到主分支上。</p>
</blockquote>
<ol>
<li><p>创建分支<br> 分支只是指向提交的指针，当你创建新分支，实际上只是创建了一个新的指针，仓库本身不会受到影响，一开始你的仓库只有一条分支：</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-b965174b6cab013a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p> 然后你执行下面的命令创建一个分支，用于加一个新的feature：</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-ce3367855cc86818.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p> 当然执行后，你只是创建了这个分支，还需要执行<code>git checkout new-feature</code>切换到<code>new-feature</code>分支，然后在使用<code>git add,git commit</code></p>
</li>
</ol>
<ol>
<li><p>删除分支<br> 假如你已经开发完了new-feature ,并且已经commit代码了，你就可以自由的删除这个分支了。<code>git branch -d new-feature</code><br> 如果分支没有合入master，会报下面的错误：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error: The branch &apos;new feature&apos; is not fully merged.</div><div class="line">If you are sure you want to delete it, run &apos;git branch -D crazy-experiment&apos;.</div></pre></td></tr></table></figure>
<p> 这时候你就可以合并分支，如果你真的确定要删除分支，可以使用<strong>-D</strong>执行强制删除：<code>git branch -D new-feature</code></p>
</li>
<li><p>切换分支（git checkout）</p>
<p> <code>git checkout</code>命令允许你切换到用<code>git branch</code>创建的分支。切换分支会更新当前工作目录中的文件，还可以使用<code>git log</code>查看当前分支的历史。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="tag">&lt;<span class="name">existing-branch</span>&gt;</span> //切换到一个已有分支上</div><div class="line">git checkout -b <span class="tag">&lt;<span class="name">new-branch</span>&gt;</span> //创建时进行直接切换</div><div class="line">git checkout -b <span class="tag">&lt;<span class="name">new-branch</span>&gt;</span> <span class="tag">&lt;<span class="name">existing-branch</span>&gt;</span> //在已有的分支上创建分支，原来的分支是新分支的基</div></pre></td></tr></table></figure>
<p> <code>git branch</code>和<code>git checkout</code>是一对兄弟，你可以使用<code>git checkout</code>在不同的分支或者bug分支之间切换，而不产生影响。</p>
</li>
<li><p>合并(git merge)<br> 合并是git将被fork的历史放回到一起的方式。<code>git merge</code>命令允许你将<code>git branch</code>创建的多条分支合并成一个。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git merge <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //将指定分支并入当前分支</div><div class="line">git merge --no-ff <span class="tag">&lt;<span class="name">branch</span>&gt;</span> //经指定分支并入当前分支，但总是生成一个合并提交(即是快速向前合并)。这可以用来记录仓库中发生的所有合并。</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>一旦在分支上完成开发，我们需要把新分支的提交合并到主分支，git会根据目前分支之间的结构信息，选择不同的算法来完成合并。</p>
</blockquote>
<ul>
<li>快速向前合并</li>
<li>三路合并</li>
</ul>
<h2 id="快速向前合并"><a href="#快速向前合并" class="headerlink" title="快速向前合并"></a>快速向前合并</h2><p>当new-feature的分支与原有的master分支呈现线性关系时，执行快速向前合并，git将当前的HEAD指针快速移到目前分支的顶端，master分支也就拥有了new-feature分支的历史了，</p>
<p>来看一个快速向前合并的实例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 开始新功能</div><div class="line">git checkout -b new-branch master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '开始新功能'</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '完成功能'</div><div class="line"></div><div class="line"># 合并new-feature分支</div><div class="line">git checkout master</div><div class="line">git merge new-feature</div><div class="line">git branch -d new-feature</div></pre></td></tr></table></figure>
<p> <img src="http://upload-images.jianshu.io/upload_images/272719-6d2a2fdb236db48d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>对于合作开发的人少的项目，这是一种主要的工作流，合作开发的人多的话，主master分支经常会有新提交，如果你的new-feature耗时比较久，再提交时，master分支就可能过去几个版本了，这时候就需要下面的三路合并了。</p>
<h2 id="三路合并"><a href="#三路合并" class="headerlink" title="三路合并"></a>三路合并</h2><p>如果master分支在new-feature分离后，又有了新的提交，即开始分叉了，git只能执行三路合并，三路合并使用一个专门的提交来合并两个分支的历史。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/272719-9f23d7fc6aff8a45.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>所谓的三路也就是：两个分支的顶端以及他们共同的祖先。在执行三路合并后：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/272719-9f23d7fc6aff8a45.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git branch"></p>
<p>使用三路合并产生的合并提交作为两个分支的连接标志。</p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>如果两个分支对同一个文件的同一部分均有修改时，git将无法判断应该使用哪个，这时候合并提交会停止，需要你手动解决这些冲突。你可以使用<code>git status</code>来查看哪里存在冲突，也可以在目录下执行<code>grep -rn HEAD</code>来查看哪些文件里有这个标记，有这个的地方都是有冲突的。</p>
<p>当修改完所有的冲突后，<code>git add</code>所有的冲突文件，运行<code>git commit</code>生成一个合并提交，这和提交一个普通快照的流程相同。<strong>提交冲突只会存在三路合并中，快速向前合并中不可能出现针对同一文件同一部分的不一样的修改</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 开始新功能</div><div class="line">git checkout -b new-feature master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '开始新功能'</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '完成功能'</div><div class="line"></div><div class="line"># 在master分支上开发</div><div class="line">git checkout master</div><div class="line"></div><div class="line"># 编辑文件</div><div class="line">git add <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line">git commit -m '在master上添加了一些及其稳定的功能'</div><div class="line"></div><div class="line"># 合并new-feature分支</div><div class="line">git merge new-feature</div><div class="line">git branch -d new-feature</div></pre></td></tr></table></figure>
<p>这时候，merge会停止，因为无法将master直接移动到new-feature。所有需要你手动合并冲突后在提交。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Git分支操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://muleimulei.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://muleimulei.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>websocket入门</title>
    <link href="https://muleimulei.github.io/2017/04/22/HTML5/websocket%E5%85%A5%E9%97%A8/"/>
    <id>https://muleimulei.github.io/2017/04/22/HTML5/websocket入门/</id>
    <published>2017-04-22T14:37:34.733Z</published>
    <updated>2017-04-28T14:18:57.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>websocket基础</p>
</blockquote>
<a id="more"></a>
<p>websocket API使你可以通过web，在客户端应用程序和服务器端进程进行之间建立全双工通信。</p>
<ol>
<li>websocket构造函数<br> 为了建立到服务器的websocket连接，使用websocket接口，通过指向一个代表所要连接端点的URL，实例化一个websocket对象。websocket协议定义了两种方案—ws和wss，分别用于客户端和服务器之间的非加密和加密流量。ws(websocket)方案与http URI方案类似。wss(websocket secure)URI方案表示使用传输层安全性(TLS,也叫SSL)的websocket连接,使用https采用的安全机制来保证http连接安全。<br> websocket构造函数有一个必须的参数URL(指向连接目标的URL)和一个可选参数protocols(为了建立连接，服务器必须在其响应中包含的一个或一组协议名称)。在protocols参数中可以使用的协议包括xmpp(eXtensible Messaging and Presence Protocol,可拓展消息处理现场协议)，soap(Simple Object Access Protocol,简单对象访问协议)或者自定义协议。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> echoSocket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org'</span>,[<span class="string">'com.kaazing.echo'</span>,<span class="string">'example.imaginary.protocol'</span>]);</div><div class="line">echoSocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(echoSocket.protocol);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>websocket事件<br> websocket API是纯事件驱动的。应用程序代码监听websocket对象上的事件，以便处理输入数据和连接状态的改变。websocket协议也是事件驱动的。客户端应用程序不需要轮询服务器来得到更新的数据。消息和事件将在服务器发送它们的时候异步到达</p>
<ul>
<li><p>websocket事件：open</p>
<ul>
<li><p>一旦服务器响应了websocket连接，open事件触发并建立一个连接。open事件对应的回调函数称为onopen。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection open ....'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到open事件触发时，协议握手已经完成，websocket已经准备好发送和接收数据。如果应用程序接收到一个open事件，那么可以确定websocket服务器成功的处理了连接请求，并且同意与应用程序通信。</p>
</li>
</ul>
</li>
<li><p>websocket事件：message</p>
<ul>
<li><p>websocket消息包含来自服务器的数据。message事件在接收到消息时触发，对应于该事件的回调函数是onmessage。除了文本，websocket消息还可以处理二进制数据，这种数据作为BLOB消息或者ArrayBuffer消息来处理。因为设置websocket消息二进制数据类型的应用程序会影响二进制消息，所以必须在读取数据之前决定用于客户端二进制输入数据的类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> e.data ===<span class="string">'string'</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'String message received'</span>,e,e.data);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'String message received'</span>,e,e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">       </div><div class="line"></div><div class="line"><span class="comment">//接受Blob消息</span></div><div class="line">ws.binaryType = <span class="string">'blob'</span>;</div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(e.data <span class="keyword">instanceof</span> Blob)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Blob message received'</span>,e.data);</div><div class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob(e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//接受ArrayBuffer消息    </span></div><div class="line">ws.binaryType = <span class="string">'arraybuffer'</span>;</div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(e.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ArrayBuffer message received'</span>,e.data);</div><div class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(e.data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>websocket事件：error</p>
<ul>
<li><p>error事件在响应意外故障的时候触发。与该事件对应的回调函数为onerror。错误还会导致websocket连接关闭。如果你接受一个error事件，可以预期很快就会触发close事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>,e);</div><div class="line">    handle(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>websocket事件：close</p>
<ul>
<li><p>close事件在websocket连接关闭时触发。对应于close事件的回调函数是onclose。一旦连接关闭，客户端与服务器不再接受或者发送消息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'close'</span>,e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>close事件有三个有用的属性(property),可以用于错误处理和恢复：wasClean,code和error。wasClean属性是一个布尔属性，表示连接是否顺利关闭连接。如果websocket的关闭是对来自服务器的close帧的响应，则该属性为true。如果连接因为其它原因（列如，因为底层TCP连接关闭），则该属性为false。code和reason属性表示服务器发送的关闭握手状态。这些属性和websocket.close()方法中的code和reason参数一致。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>websocket方法：send()方法和close()方法</p>
<ul>
<li><p>send()方法<br>  使用websocket在客户端和服务器之间建立双全工双向连接后，就可以在连接打开时(在调用onopen监听器之后，调用onclose监听器之前)调用send方法。使用send方法可以从客户端向服务器发送消息。在发送一条或者多条消息之后，可以保持连接打开，或者调用close方法关闭。<code>ws.send(‘hello’)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org'</span>);</div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ws.send(<span class="string">'hello'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>close()方法<br>  使用close方法，可以关闭websocket连接或者终止连接尝试。如果连接已经关闭，该方法什么也不做。<code>ws.close()</code>可以向close方法传递两个可选参数：code(数字型的状态代码)和reason(一个文本字符串)。传递这些参数能够向服务器传递关于客户连接原因的信息。</p>
</li>
</ul>
</li>
<li><p>websocket对象特性</p>
</li>
</ol>
<ul>
<li>readyState：<br>  websocket对象通过只读属性readyState报告其连接状态。</li>
</ul>
<table>
<thead>
<tr>
<th>特性常量</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>WebSocket.CONNECTING</td>
<td style="text-align:center">0</td>
<td style="text-align:center">连接正在进行中，但还未建立</td>
</tr>
<tr>
<td>WebSocket.OPEN</td>
<td style="text-align:center">1</td>
<td style="text-align:center">连接已经建立。消息可以在客户端和服务器之间通信</td>
</tr>
<tr>
<td>WebSocket.CLOSING</td>
<td style="text-align:center">2</td>
<td style="text-align:center">连接正在进行关闭握手</td>
</tr>
<tr>
<td>WebSocket.CLOSED</td>
<td style="text-align:center">3</td>
<td style="text-align:center">连接已经关闭，不能打开</td>
</tr>
</tbody>
</table>
<ul>
<li><p>bufferedAmount:<br>  设计应用程序时，你可能想要检查发往服务器的缓存数据量，特别是在客户端应用程序向服务器发送大量数据时。尽管调用send是立即生效的，但是数据在互联网上的传输却不是如此。浏览器将为你的客户端应用程序缓存出站数据，从而使你可以随时调用send()，发送任意数量的数据。你可以使用bufferedAmount特性检查已经进入队列，但是尚未发送到服务器的字节数。这个特性报告的值不包括协议组帧开销或者操作系统，网络硬件所进行的的缓存。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> THRESHOLD = <span class="number">10240</span>;</div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org/updates'</span>);</div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ws.bufferedAmount&lt;THRESHOLD)&#123;</div><div class="line">            ws.send(getApplicationState());</div><div class="line">        &#125;    </div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>protocol<br>  在前面关于websocket构造函数的讨论中，我们提到了protocol参数，它让服务器知道客户端理解并可在websocket上使用的协议。websocket对象的protocol特性提供了另一条关于websocket实例的有用信息。客户端和服务器协议协商的结果可以在websocket对象上看到。protocol特性包含在打开握手期间websocket服务器选择的协议名，换句话说，protocol特性告诉你特定websocket上使用的协议。protocol特性在最初的握手完成之前为空，如果服务器没有选择客户端提供的某个协议，该特性保持控制。</p>
</li>
</ul>
<h2 id="完整客户端代码如下："><a href="#完整客户端代码如下：" class="headerlink" title="完整客户端代码如下："></a>完整客户端代码如下：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Websocket Echo Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            output = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</div><div class="line">            ws = <span class="keyword">new</span> Websocket(<span class="string">'ws://echo.websocket.org/echo'</span>);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">                p.style.wordWrap = <span class="string">'break-word'</span>;</div><div class="line">                p.textContent = s;</div><div class="line">                output.appendChild(p);</div><div class="line">                <span class="built_in">console</span>.log(s);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">                ws.send(msg);</div><div class="line">                log(<span class="string">'Message send'</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Connected'</span>);</div><div class="line">                sendMessage(<span class="string">'Hello Websocket'</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Disconnected:'</span>+e.reason);</div><div class="line">            &#125;</div><div class="line">            ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Error '</span>);</div><div class="line">            &#125;</div><div class="line">            ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                log(<span class="string">'Message received'</span>+e.data);</div><div class="line">                ws.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        setup();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="结合websocket使用HTML5媒体的完整客户端应用程序"><a href="#结合websocket使用HTML5媒体的完整客户端应用程序" class="headerlink" title="结合websocket使用HTML5媒体的完整客户端应用程序"></a>结合websocket使用HTML5媒体的完整客户端应用程序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Drop Image Here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> ws = <span class="keyword">new</span> Websocket(<span class="string">'ws://echo.websocket.org/echo'</span>);</div><div class="line">        ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'open'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//处理二进制数据</span></div><div class="line">        ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> blob = e.data;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'message :'</span>+blob.size +<span class="string">'bytes'</span>);</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.webkitURL)&#123;</div><div class="line">                URL = webkitURL;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> uri = URL.createObjectURL(blob);</div><div class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">            img.src = uri;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#fff'</span>;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                handleFileDrop(e.dataTransfer.files[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                <span class="built_in">console</span>.log(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#6fff41'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            e.preventDefault();</div><div class="line">            <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'#fff'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handleFileDrop</span>(<span class="params">file</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">            reader.readAsArrayBuffer(file);</div><div class="line">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'sending: '</span>+file.name);</div><div class="line">                ws.send(reader.result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;websocket基础&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="HTML5" scheme="https://muleimulei.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>jquery异步获取数据</title>
    <link href="https://muleimulei.github.io/2017/04/20/jquery/jquery%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>https://muleimulei.github.io/2017/04/20/jquery/jquery获取数据/</id>
    <published>2017-04-20T07:47:08.896Z</published>
    <updated>2017-04-20T09:10:01.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jquery异步获取数据</p>
</blockquote>
<a id="more"></a>
<h1 id="jquery异步获取数据"><a href="#jquery异步获取数据" class="headerlink" title="jquery异步获取数据"></a>jquery异步获取数据</h1><ul>
<li>使用load()方法异步请求数据<br>  使用load()方法通过ajax请求加载服务器的数据，并把返回的数据放置到指定的元素中。load(url,[data],[callback])，参数URL为加载服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">        $(<span class="string">'.content'</span>).html(<span class="string">'&lt;img src='</span>loading.gif<span class="string">'/&gt;'</span>)</div><div class="line">                     .load(<span class="string">'fruit.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        $<span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">                      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用getJSON()方法异步加载json格式数据<br>  使用getJSON()方法可以通过ajax异步请求的方式获取服务器中的数据，并对获取到的数据进行解析，显示在页面中。<code>$.getJSON(url,[data],[callback])</code>，其中，URL参数为请求加载json格式文件的服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后，执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">    $.getJSON(<span class="string">'sport.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">        $.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">index,sport</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).append(<span class="string">`&lt;li&gt;sport["name"]&lt;/li&gt;`</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>使用getScript()方法异步加载并执行js文件，<code>$.getScript(url,[callback])</code></li>
<li>使用get()方法以GET方式从服务器获取数据，通过方法中中的回调函数的参数返回请求的数据。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">    $.get(<span class="string">'info.php'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">false</span>);</div><div class="line">        $(<span class="string">'ul'</span>).append(data.name);</div><div class="line">        $(<span class="string">'ul'</span>).append(data.say);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用post方法以post方式向服务器发送数据<br>  post()方法多用于以post方式向服务器发送数据，服务器接受到数据后，进行处理，并将处理结果返回给页面，<code>$.post(url,[data],[callback])</code>，参数URL为加载服务器地址，可选项data参数为请求时发送的数据，callback参数为数据请求成功后执行的回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $.post(<span class="string">'check.php'</span>,&#123;</div><div class="line">            <span class="attr">num</span>: $(<span class="string">'#number'</span>).val()    </div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).append(<span class="string">`&lt;li&gt;你输入的<span class="subst">$&#123;$(<span class="string">'#number'</span>),val()&#125;</span>是&lt;b&gt;<span class="subst">$&#123;data&#125;</span>&lt;/b&gt;&lt;/li&gt;`</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>后台代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$num = $_POST[<span class="string">'num'</span>];</div><div class="line"><span class="keyword">if</span>($num%<span class="number">2</span>==<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'偶数'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'奇数'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用serialize()方法序列化表单元素值<br>  使用serialize()方法可以将表单中有name属性的元素值进行序列化，生成标准的URL编码文本字符串，直接用于ajax请求，调用格式如下：<code>$(selector).serialize()</code></p>
</li>
<li><p>使用ajax方法加载服务器数据<br>  ajax方法是最底层，功能最强大的请求服务器数据的方式，它不仅仅可以获取服务器返回的数据，还可以向服务器发送并传递数值。$.ajas([settings])，其中参数setting为发送ajax请求时的配置对象，在该对像中，dada为请求时传递的数据，dataType为服务器返回的数据类型，success为请求成功时的回调函数，type为发送数据请求的方式，默认为get。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'article.php'</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.attr(<span class="string">'disabled'</span>,<span class="literal">false</span>);</div><div class="line">                $(<span class="string">'ul'</span>).append(data);</div><div class="line">            &#125;    </div><div class="line">        &#125;);    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用ajaxSetup方法设置全局ajax默认选项<br>  使用ajaxSetup()方法可以设置，ajax请求的一些全局变量，设置完成后，后面的ajax请求不需要添加这些选项值。<code>$.ajaxSetup([options])</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajaxSetup(&#123;</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            $(<span class="string">'ul'</span>).empty().append(data);</div><div class="line">        &#125;    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'a1.txt'</span>    </div><div class="line">    &#125;);</div><div class="line">&#125;); </div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'a2.txt'</span>    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>使用ajaxStart()和ajaxStop()方法<br>  两者绑定ajax时间。ajaxStart()方法用于在ajax请求发出前触发函数，ajaxStop()方法在ajax请求完成后触发函数。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jquery异步获取数据&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
      <category term="jquery" scheme="https://muleimulei.github.io/categories/JavaScript/jquery/"/>
    
    
      <category term="jquery" scheme="https://muleimulei.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>commonJS,AMD与CMD的区别与联系</title>
    <link href="https://muleimulei.github.io/2017/04/16/JavaScript/commonJs_AMD_CMD%E6%AF%94%E8%BE%83/"/>
    <id>https://muleimulei.github.io/2017/04/16/JavaScript/commonJs_AMD_CMD比较/</id>
    <published>2017-04-16T04:33:06.370Z</published>
    <updated>2017-04-16T07:13:21.624Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>commonJS,AMD与CMD的区别与联系</p>
</blockquote>
<a id="more"></a>
<p><strong>1. CommonJS</strong>原本叫serverJS，是以在浏览器环境之外构建JavaScript生态环境为目标而产生的项目，比如在服务器和桌面环境中。</p>
<blockquote>
<p>commonJS规范是为了解决JavaScript的作用于问题而定义的模块形式，可以使每个模块在它自身的命名空间中执行。</p>
</blockquote>
<p>该规范的主要内容是，模块必须通过module.exports导出对外的变量或接口，通过require()来导入其它模块的输出到当前模块作用域中。<strong>Node.js</strong>就是采用commonJS规范。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//moduleA.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//moduleB.js</span></div><div class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</div><div class="line">moduleA();</div></pre></td></tr></table></figure>
<p><strong>2.AMD</strong>(Asynchronous Module Definition)(异步模块定义)是为了浏览器环境设计的，因为CommonJS模块系统是同步加载的，当前浏览器环境是异步的。</p>
<blockquote>
<p>AMD定义了一套JavaScript模块依赖异步加载标准，来解决同步加载问题。</p>
</blockquote>
<p>模块通过define函数定义在闭包中，格式如下</p>
<p><code>define(id? String, dependencies? String[], factory: Function|Object)</code></p>
<ul>
<li><p>id是模块名字，它是可选参数</p>
</li>
<li><p>dependencies 指定了所要依赖的模块列表，他是一个数组，也是可选的参数，每个依赖的模块的输出将作为参数一次传入factory中。如果没有指定dependencies，那么他的默认值是<strong>[‘require’,’exports’,’module’]</strong>。</p>
</li>
<li><p>factory 是最后一个参数，它包裹了模块的具体实现，他是一个函数或是一个对象。如果是函数，那么它的返回值就是模块的的输出接口或值。</p>
</li>
</ul>
<p>定义一个moduleA，它依赖jQuery模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'moduleA'</span>,[<span class="string">'jquery'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="comment">//$是jquery模块输出</span></div><div class="line">    $(<span class="string">'body'</span>).text(<span class="string">'hello'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用</span></div><div class="line">define([<span class="string">'moduleA'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">moduleA</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<p>require.js就是采用AMD模块</p>
<p><strong>3.CMD</strong>(Common Module Defination)</p>
<blockquote>
<p>在cmd规范中，一个模块就是一个文件。代码的书写格式如下：<strong>define(factory)</strong><br>define是全局函数，用来定义模块。define接受factory参数，factory可以是函数，对象或字符串。</p>
</blockquote>
<ul>
<li><p>当factory为对象或字符串时，表示该模块的接口就是该对象或字符串，比如要定义一个json数据模块<br><code>define({‘key’,’value’})</code></p>
</li>
<li><p>也可以通过字符串定义模板模块 <code>define(‘Hello ‘)</code></p>
</li>
<li><p>factory是函数时，表示是模块的构造方法。执行该构造方法，可以得到模块对外提供的接口，factory方法在执行时，默认会传入三个参数，require，exports，module</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(function(require,exports,module)&#123;</div><div class="line">    //需要导出的模块</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>require是方法，接收模板标识作为唯一参数，用来获取其它模块提供的接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    const a = require(&apos;./a&apos;);</div><div class="line">    a.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>require是同步往下执行的，require.async(id,callback?)用来在模块内部异步加载模块，并在加载完后执行回调函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    require.async([&apos;./a,&apos;./b], function(c ,d )&#123;</div><div class="line">        c.doSomething();    </div><div class="line">        d.doSomething();    </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>factory是函数时的第二个参数是exports，exports是一个对象，用来对外提供模块接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    exports.str = &apos;xxxxxxxxx&apos;;</div><div class="line">    exports.doSomething = function()&#123; //对外提供doSomething方法</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>除了exports外，还可以用return直接对外提供对象接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">   return&#123;</div><div class="line">        str: &apos;xxxxxxx&apos;,</div><div class="line">        doSomething: function()&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>exports是module.exports对象的一个引用，很多时候exports都无法满足需求，列如对外提供一个实例对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports,module)&#123;</div><div class="line">    function Person(name, age)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    module.exports = new Person(&apos;lily&apos;,34);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="AMD与CMD比较"><a href="#AMD与CMD比较" class="headerlink" title=" AMD与CMD比较"></a> AMD与CMD比较</h1><p>AMD默认是依赖前置，在一开始就将需要依赖的文件配置并加载好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&apos;moduleA&apos;,[&apos;jquery&apos;],function($)&#123;</div><div class="line">    //依赖的配置文件已经配置并加载好了</div><div class="line">    $(&apos;body&apos;).text(&apos;hello world&apos;);    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>CMD是依赖就近，需要使用的时候才会去配置加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports)&#123;</div><div class="line">    var a = require(&apos;./a.js&apos;); //配置并加载，同步</div><div class="line">    if(false)&#123;</div><div class="line">        var b = require(&apos;./b.js&apos;); //配置的文件永远不会被加载</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;commonJS,AMD与CMD的区别与联系&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>phantomJS简单使用方法</title>
    <link href="https://muleimulei.github.io/2017/04/14/nodejs/PhantomJS/"/>
    <id>https://muleimulei.github.io/2017/04/14/nodejs/PhantomJS/</id>
    <published>2017-04-14T15:57:33.168Z</published>
    <updated>2017-04-16T04:31:41.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>phantomJS简单使用方法</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>概述<br>有时，我们需要浏览器处理网页，但并不需要浏览，比如生成网页的截图，抓取网页数据等操作。PhantomJS的功能，就是提供一个浏览器环境的命令行接口，你可以把它看做一个“虚拟浏览器”，除了不能浏览，其它与正常浏览器一样。它的内核是webkit引擎，不提供图形界面，只能在命令行中使用。</p>
</li>
<li><p>webpage模块<br>webpage模块是PhantomJS的核心模块，用于网页操作。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var webpage = require(&apos;webpage&apos;);</div><div class="line">var page = webpage.create();</div></pre></td></tr></table></figure>
<p>上面代码表示加载PhantomJS的webpage模块，并创建一个实例。</p>
<ul>
<li>open()方法<blockquote>
<p>该方法用于打开具体的网页</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(s);</div><div class="line">    phantom.exit();  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述代码中，open()方法，用于打开具体的网页。他接受两个参数。第一个参数是网页的网址，第二个参数是回调函数，网页打开后该函数将会运行，它的参数是一个表示状态的字符串，如果打开成功就是success，否则就是fail。</p>
<blockquote>
<p>只要接受到服务器返回的结果，PhantomJS就会报告网页打开成功，而不管服务器是否返回404或者500错误。</p>
</blockquote>
<p>open方法默认使用GET方法，与服务器通信，但是也可以使用其它方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line"><span class="keyword">var</span> postbody = <span class="string">'user=user&amp;password=password'</span>;</div><div class="line">page.open(url,<span class="string">'POST'</span>,postbody,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Status: '</span>+status);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，使用post方法向服务器发送数据。open方法的第二个参数来指定http方法，第三个参数用来指定该方法所要使用的数据。</p>
<p>open方法还允许提供配置对象，对HTTP请求进行更详细的配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line"><span class="keyword">var</span> settings = &#123;</div><div class="line">    <span class="attr">operation</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">encoding</span>: <span class="string">'utf-8'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">data</span>: <span class="built_in">JSON</span>.stringfy(&#123;</div><div class="line">        <span class="attr">some</span>: <span class="string">'data'</span>,</div><div class="line">        <span class="attr">another</span>: [<span class="string">'customer'</span>,<span class="string">'data'</span>]</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">page.open(url,settings,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Status'</span>+status);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>evalute()方法<blockquote>
<p>evalute方法用于打开网页后，在页面中执行JavaScript代码。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> title = page.evalute(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.title;    </div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Page title is'</span>+ title);</div><div class="line">    phantom.exit();</div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>网页内部的console语句，以及evalute方法内部的console语句，默认不会显示在命令行。这时,可以用onConsoleMessage方法监听这个事件，进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Page title is '</span> + msg);</div><div class="line">&#125;;</div><div class="line">page.open(url, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">  page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.title);</div><div class="line">  &#125;);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>includeJs()<blockquote>
<p>includeJs方法用于页面加载外部脚本，加载结束后就调用指定的回调函数。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    page.includeJs(<span class="string">'jquery.min.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        page.evalute(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $(<span class="string">'button'</span>).click();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子在页面中注入jquery脚本，然后点击所有的按钮。需要注意的是，由于是异步加载，所以Phantom.exit()语句要放在page.includeJs()方法的回调函数之中，否则页面会过早移除。</p>
<ul>
<li>render()方法</li>
</ul>
<p>render方法用于将网页保存成图片，参数就是指定的文件名。该方法根据后缀名，将网页保存成不同的格式，目前支持PNG,GIF,JPEG和PDF。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.viewportSize = &#123;<span class="attr">width</span>: <span class="number">1920</span>, <span class="attr">height</span>: <span class="number">1080</span>&#125;;</div><div class="line">page.open(url,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    page.render(<span class="string">'main.jpeg'</span>,&#123;<span class="attr">format</span>: <span class="string">'jpeg'</span>,<span class="attr">quality</span>: <span class="string">'100'</span>&#125;);</div><div class="line">    phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>该方法还可以接受一个配置对象，format字段用于指定图片格式，quality字段用于指定图片质量，最小为0，最大为100。</p>
<ul>
<li>viewportSize,zoomFactor</li>
</ul>
<p>viewportSize属性指定浏览器视口的大小,即网页加载的初始浏览器窗口大小。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.viewportSize = &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">480</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">800</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>viewportSize的height字段必须指定，不可省略。</p>
<p>zoomFactor属性用来指定渲染时页面的放大系数，默认是1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webpage.create();</div><div class="line">page.zoomFactor = <span class="number">0.25</span>;</div><div class="line">page.render(<span class="string">'capture.png'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;phantomJS简单使用方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node" scheme="https://muleimulei.github.io/categories/Node/"/>
    
    
      <category term="tools" scheme="https://muleimulei.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>爬取网易云音乐</title>
    <link href="https://muleimulei.github.io/2017/04/14/nodejs/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>https://muleimulei.github.io/2017/04/14/nodejs/爬取网易云音乐/</id>
    <published>2017-04-14T15:07:13.645Z</published>
    <updated>2017-04-15T14:00:25.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>爬取网易云音乐</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>该爬虫使用PhantomJS,cheerio,bluebird以及Node.js内置模块来实现</p>
</blockquote>
<p>首先，我们需要认识到利用普通爬取静态网页的方式是爬取不到源码的，你只会拿到源码的模板，数据根本没有被填充，所以我们需要使用PhantomJS这个工具。它的功能，就是提供一个浏览器环境的命令行接口，你可以把它看做一个虚拟的浏览器，除了不能浏览，其它与正常浏览器一样。它的内核是wenkit引擎，不提供图形界面，只能在命令行下使用。其次，我们使用cheerio模块，其提供了类似于jquery的方法来解析爬取到的HTML代码，另外，我们使用blueBird来异步爬取。(这些模块可以使用npm来下载安装)</p>
<ol>
<li>官网下载到的phantomJS是一个可执行程序，下载完成后配置其环境变量。然后利用Node.js的child_process新起进程来调用此命令。具体代码如下：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.js文件</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Page title is '</span> + msg);</div><div class="line">&#125;;</div><div class="line">page.settings.userAgent = <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>;</div><div class="line">page.open(<span class="string">'url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;<span class="comment">//open方法的第一个参数是需要爬去的网址</span></div><div class="line">    <span class="keyword">if</span> (status !== <span class="string">'success'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Unable to access network'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'正在爬取请稍后'</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> result = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">"g_iframe"</span>).contentDocument.documentElement.innerHTML;</div><div class="line">            &#125;);</div><div class="line">            <span class="built_in">console</span>.log(result);</div><div class="line">            phantom.exit();</div><div class="line">        &#125;, <span class="number">7000</span>); <span class="comment">//需进行延迟等待，带页面渲染完毕再进行爬取</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>主程序代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">"bluebird"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> ids = []; <span class="comment">//存取歌曲ID</span></div><div class="line"><span class="keyword">var</span> list=[]; <span class="comment">//存取所有promise对象</span></div><div class="line"><span class="keyword">var</span> details = []; <span class="comment">//存取歌曲信息</span></div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token='</span>;</div><div class="line"><span class="keyword">var</span> urls = []; <span class="comment">//存取歌曲json文件信息</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJson</span>(<span class="params">u</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">        http.get(u, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line">            res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                html += data;</div><div class="line">            &#125;);</div><div class="line">            res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                resolve(html);</div><div class="line">            &#125;);</div><div class="line">        &#125;).on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            reject(e);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"获取信息出错!"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解析网页</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseContent</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tr = $(<span class="string">'tbody'</span>).find(<span class="string">'tr'</span>);</div><div class="line">    tr.each(<span class="function"><span class="keyword">function</span>(<span class="params">i,t</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> td = $(t).find(<span class="string">'td'</span>).eq(<span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> id = $(td).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).split(<span class="string">'='</span>)[<span class="number">1</span>];</div><div class="line">        ids.push(id); <span class="comment">//获取到歌曲id</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//拼接URL,获取到歌曲的json文件</span></div><div class="line">    ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> u = url.replace(<span class="regexp">/\d&#123;4,&#125;/g</span>,num);</div><div class="line">        urls.push(u);</div><div class="line">    &#125;);</div><div class="line">    urls.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">        list.push(getJson(url));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">Promise</span>.all(list).then(<span class="function"><span class="keyword">function</span>(<span class="params">jsons</span>)</span>&#123;<span class="comment">//解析获取到的json文件</span></div><div class="line">        jsons.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(json);</div><div class="line">            <span class="comment">//获取到歌曲的基本信息</span></div><div class="line">            <span class="keyword">var</span> name = json.songs[<span class="number">0</span>].name; </div><div class="line">            <span class="keyword">var</span> singer = json.songs[<span class="number">0</span>].artists[<span class="number">0</span>].name;</div><div class="line">            <span class="keyword">var</span> picUrl = json.songs[<span class="number">0</span>].album.picUrl;</div><div class="line">            <span class="keyword">var</span> src = json.songs[<span class="number">0</span>].mp3Url;</div><div class="line">            details.push(&#123;</div><div class="line">                <span class="string">"name"</span>: name,</div><div class="line">                <span class="string">"singer"</span>:singer,</div><div class="line">                <span class="string">"picUrl"</span>:picUrl,</div><div class="line">                <span class="string">"src"</span> : src</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        fs.writeFile(<span class="string">'music.json'</span>,<span class="built_in">JSON</span>.stringify(details)); <span class="comment">//将获取到的数据以json格式写入到文件中</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//新建进程利用phantomJS来运行1.js文件</span></div><div class="line">cp.exec(<span class="string">'phantomjs.exe 1.js'</span>,&#123;</div><div class="line">    <span class="attr">timeout</span>: <span class="number">20000000</span>, <span class="comment">//超时时间</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,stdout,stderr</span>)</span>&#123; <span class="comment">//传给回调的 stdout 和 stderr 参数会包含子进程的 stdout 和 stderr 的输出</span></div><div class="line">    <span class="keyword">if</span>(error)&#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">`exec error <span class="subst">$&#123;error&#125;</span>`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> $ = cheerio.load(stdout); <span class="comment">//利用cheerio来解析爬取到的HTML</span></div><div class="line">    parseContent($);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后，你就可以在music.json中看到自己需要爬去的歌曲信息了 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;爬取网易云音乐&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node" scheme="https://muleimulei.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>页面置换算法的实现</title>
    <link href="https://muleimulei.github.io/2017/04/13/OS/%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://muleimulei.github.io/2017/04/13/OS/页面置换算法/</id>
    <published>2017-04-13T14:57:18.498Z</published>
    <updated>2017-04-14T15:13:35.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>页面置换算法的实现</p>
</blockquote>
<a id="more"></a>
<h2 id="页面置换算法的实现"><a href="#页面置换算法的实现" class="headerlink" title="页面置换算法的实现"></a>页面置换算法的实现</h2><p>在进程运行过程中，若其所要访问的页面不在内存，而需把它们调入内存，但内存已无空闲空间时，但为了保证该进程能正常运行，系统必须从内存中调出一页程序或数据送到磁盘的对换区中。但应将哪个页面调出。需根据一定的算法来确定。通常，把选择换出页面的算法称为页面置换算法。</p>
<blockquote>
<p>一个好的页面置换算法应具有较低的页面置换频率。从理论上上讲，应将那些以后不再会访问的页面换出，或把那些在较长时间内不会再访问的页面换出。</p>
</blockquote>
<h2 id="常用算法介绍"><a href="#常用算法介绍" class="headerlink" title="常用算法介绍"></a>常用算法介绍</h2><ol>
<li>最佳置换算法<br> 最佳置换算法是由Belady与1966年提出的一种理论上的算法。其所选择的被淘汰页面将是以后永不使用的，或许是在最长时间内不再被访问的页面。采用最佳置换算法通常可保证获得最低的缺页率。但由于人们目前还无法预知，一个进程在内存的若干个页面中，哪一个页面是未来最长时间内不再被访问的。因而该算法是无法实现的。</li>
<li>先进先出页面置换算法<br> FIFO算法是最早出现的置换算法。该算法总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面予以淘汰。该算法实现简单，只需把一个进程已调入内存的页面按先后次序连接成一个队列，并设置一个指针，称为替换指针，使它总是指向最老的页面。但该算法与进程实际运行的规律不相适应，因为在进程中，有些页面经常被访问，比如，含有全局变量，常用函数，例程等的页面，FIFO算法并不能保证这些页面不被淘汰。</li>
<li>最近最久未使用算法<br> 最近最久未使用(LRU)的页面置换算法是根据页面调入内存后的使用情况作出决策的。由于无法预测各页面将来的使用情况，只能利用”最近的过去”作为”最近的将来”的近似，因此，LRU置换算法是选择最近最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间t。当需淘汰一个页面时，选择现有页面中其t值最大的，即最近最久未使用的页面予以淘汰。</li>
</ol>
<h2 id="LRU置换算法的硬件支持"><a href="#LRU置换算法的硬件支持" class="headerlink" title="LRU置换算法的硬件支持"></a>LRU置换算法的硬件支持</h2><ol>
<li>寄存器<br>为了记录某进程在内存中各页的使用情况，须为每个在内存中的页面配置一个移位寄存器，可表示为：R=R<sub>n-1</sub>R<sub>n-2</sub>R<sub>n-3</sub>·····R<sub>1</sub>R<sub>0</sub><br>当某进程访问某物理块时，要将相应寄存器的R<sub>n-1</sub>位置成1。此时，定时信号将每隔一定时间(列如 100ms)将寄存器右移一位。如果我们把n位寄存器的数看做一个整数，那么，具有最小数值的寄存器所对应的页面，就是最久未使用的页面。</li>
<li>栈<br>可利用一个特殊的栈来保存当前使用的各个页面的页面号。每当进程访问页面时，便将该页面的页面号从栈中移除，将它压入栈顶。因此，栈顶始终是最新被访问的页面的编号，而栈底则是最近最久未使用页面的编号。</li>
</ol>
<p>FIFO与LRU使用栈数据结构代码效果如下(源码可按F12查看)：</p>
<iframe src="/assets/操作系统.html" width="100%" height="700px" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;页面置换算法的实现&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="os" scheme="https://muleimulei.github.io/categories/os/"/>
    
    
  </entry>
  
  <entry>
    <title>jquery基本事件</title>
    <link href="https://muleimulei.github.io/2017/04/08/jquery/jquery%E5%9F%BA%E6%9C%AC%E4%BA%8B%E4%BB%B6/"/>
    <id>https://muleimulei.github.io/2017/04/08/jquery/jquery基本事件/</id>
    <published>2017-04-08T11:11:06.074Z</published>
    <updated>2017-04-09T07:48:46.421Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jquery基本事件</p>
</blockquote>
<a id="more"></a>
<h1 id="jquery基本事件"><a href="#jquery基本事件" class="headerlink" title="jquery基本事件"></a>jquery基本事件</h1><ol>
<li><p>页面加载时触发ready()事件</p>
<blockquote>
<p>ready()方法类似于onload()事件，但前者只要页面的dom结构加载后触发，而后者需要页面全部元素加载成功才触发，ready可以写多个，其按顺序执行。<code>$(document).ready(function(){$(&#39;#tip&#39;).html(&#39;加载完毕&#39;);});</code>。</p>
</blockquote>
</li>
<li><p>使用hover方法切换事件</p>
<blockquote>
<p>hover方法的功能是当鼠标移到所选元素上时，执行方法中的第一个函数，鼠标移出时，执行方法中的第二个函数，实现事件的切换效果。<code>$(selector).hover(over,out)</code>。</p>
</blockquote>
</li>
<li><p>使用toggle()方法绑定多个函数</p>
<blockquote>
<p>toggle()方法可以在元素的click事件中绑定两个或两个以上的函数，同时，它还可以实现元素的隐藏与显示的切换，绑定多个函数的调用格式<code>$(selector).toggle(fun1,fun2,······funN)</code>。</p>
</blockquote>
</li>
<li><p>使用unbind()方法移除移除元素绑定事件</p>
<blockquote>
<p><code>$(selector).unbind(event,fun)</code>,其中参数event表示需要移除的事件名称，多个事件用空格隔开，fun参数为事件执行时调用的函数名称，如果没有规定参数，unbind()方法会删除指定元素的所有事件处理程序。</p>
</blockquote>
</li>
<li><p>使用one()方法绑定元素的一次性事件</p>
<blockquote>
<p>one()方法可以绑定元素任何有效的事件，但这种方法的绑定事件只会触发一次。<code>$(selector).one(event,[data],fun)</code>，参数event为事件名称,dada为触发事件时携带的数据，fun为触发该事件时执行的函数。</p>
</blockquote>
</li>
<li><p>调用trigger方法手动触发指定事件。</p>
<blockquote>
<p>trigger方法可以直接手动触发元素指定的事件，这些事件可以是元素自带事件，也可以是自定义事件。总之，该事件必须能执行。</p>
</blockquote>
</li>
<li><p>文本框的focus和blur事件</p>
<blockquote>
<p>focus事件在元素获取焦点时触发，如点击文本框时触发该事件；而blur事件则在元素失去焦点时触发。</p>
</blockquote>
</li>
<li><p>下拉列表框的change事件</p>
<blockquote>
<p>当一个元素的值发生变化时，将会触发change事件。</p>
</blockquote>
</li>
<li><p>调用live()方法绑定事件</p>
<blockquote>
<p>与bind相同，live可以绑定元素的可执行事件，除此之外，live方法还可以绑定动态元素，即是使用代码添加的元素事件。</p>
</blockquote>
</li>
<li><p>调用show()和hide()方法显示和隐藏元素</p>
<blockquote>
<p><code>$(selector).hide(speed,[callback])</code>和<code>$(selector).show(speed,[callback])</code>,参数speed设置隐藏或显示的速度值，可为’slow’,’fast’或毫秒数值。可选参数callback为隐藏或显示动作执行完成后调用的函数。</p>
</blockquote>
</li>
<li><p>使用slideUp和slideDown方法的滑动效果</p>
<blockquote>
<p>前者用于向上滑动元素，后者用于向下滑动元素，调用方法为<code>$(selector).slideUp(speed,[callback])</code>和<code>$(selector).slideDown(speed,[callback])</code>,其中speed为滑动时的速度，单位是毫秒，可选参数是滑动成功后的回调函数。</p>
</blockquote>
</li>
<li><p>使用slideToggle方法</p>
<blockquote>
<p>该方法可以切换slideUp和slideDown，即调用该方法时，如果元素已向上滑动，则元素自动向下滑动，反之，向下滑动。<code>$(selector).slideToggle(speed,[callback])</code>。</p>
</blockquote>
</li>
<li><p>使用fadeIn()和fadeOut()实现淡入与淡出</p>
<blockquote>
<p><code>$(selector).fadeIn(speed,[callback])</code>和<code>$(selector).fadeOut(speed,[callback])</code>。</p>
</blockquote>
</li>
<li><p>使用fadeTo()方法设置淡入淡出效果的不透明度</p>
<blockquote>
<p>调用fadeTo()方法，可以将所选元素的不透明度以淡入淡出的效果调整为指定的值。<code>$(selector).fadeTo(speed,opacity,[callback])</code>，其中speed参数为效果的速度，opacity参数为指定的不透明度，取值为0~1，可选参数callback为效果完成后回调的函数。</p>
</blockquote>
</li>
<li><p>调用animate()方法制作简单的动画效果</p>
<blockquote>
<p>格式为<code>$(selector).animate({params},speed,[callback])</code>。其中，params参数为制作动画效果的css属性名与值，speed参数为动画的效果速度，单位为毫秒，可选项callback参数为动画效果完成后执行的回调函数。<code>$(&#39;img&#39;).animate({left: &#39;+=90px&#39;,3000,function(){$(this).animate({width:&#39;+=30px&#39;,height:&#39;+=30px&#39;},3000,function(){$(&#39;#tip&#39;).html(&#39;done!&#39;);});});</code>。</p>
</blockquote>
</li>
<li><p>调用stop方法停止当前动画效果</p>
<blockquote>
<p>stop()方法的功能是在动画完成前，停止当前正在执行的动画效果，这些效果包括滑动，淡入淡出和自定义动画。<code>$(selector).stop([clearQueue],[goToEnd])</code>。</p>
</blockquote>
</li>
<li><p>调用delay()方法延迟执行动画效果</p>
<blockquote>
<p><code>$(selector).delay(duration)</code>，其中duration为延时值，单位是毫秒，当超过延时值时，动画开始执行。</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jquery基本事件&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
      <category term="jquery" scheme="https://muleimulei.github.io/categories/JavaScript/jquery/"/>
    
    
      <category term="jquery" scheme="https://muleimulei.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>jquery基本方法</title>
    <link href="https://muleimulei.github.io/2017/04/08/jquery/jquery%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/"/>
    <id>https://muleimulei.github.io/2017/04/08/jquery/jquery基本方法/</id>
    <published>2017-04-08T10:23:12.383Z</published>
    <updated>2017-04-08T11:10:39.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jquery基本方法</p>
</blockquote>
<a id="more"></a>
<h1 id="jquery基本方法"><a href="#jquery基本方法" class="headerlink" title="jquery基本方法"></a>jquery基本方法</h1><ol>
<li>使用attr()方法来控制元素的属性<blockquote>
<p>attr()方法的作用是设置或者返回元素的属性，其中attr(属性名)格式是获取元素属性的值，attr(属性名，属性值)是设置元素属性的值。</p>
</blockquote>
</li>
<li>操作元素的内容<blockquote>
<p>使用html()和text()方法操作元素的内容，当两个方法的参数为空时，表示获取该元素的内容。而如果方法中包含参数，则表示将参数值设置为元素内容。html()方法可以获取元素的HTML文本。因此，原文中的格式代码也被一起获取，而text()方法只是获取元素中的文本内容，并不包含HTML格式代码。</p>
</blockquote>
</li>
<li>操作元素内容<blockquote>
<p>通过addClass()和css()方法可以方便的操作元素的样式，前者括号中的参数为增加元素的样式名称，后者直接将样式内容写入到括号里。使用removeAttr(name)和removeClass(class)分别可以实现移除元素的属性和样式的功能，前者方法中的参数表示移除属性名，后者方法中的参数则表示样式名。</p>
</blockquote>
</li>
<li>使用append()方法向元素<strong>内</strong>追加内容<blockquote>
<p>append(content)方法的功能是向指定的元素内追加内容，被追加的content参数可以表示字符，HTML标记，还可以是一个返回字符串内容的函数。</p>
</blockquote>
</li>
<li>使用appendTo()方法向被选元素内插入内容<blockquote>
<p><code>$(content).appendTo(selector)</code>，参数content表示要插入的内容，参数select表示被选的元素，即把content内容插入到selector元素内，默认在尾部。</p>
</blockquote>
</li>
<li>使用before()和after()在元素前后插入内容<blockquote>
<p><code>$(selector).before(content)</code>和<code>$(selector).after(content)</code>。</p>
</blockquote>
</li>
<li>使用clone()方法复制元素<blockquote>
<p>调用clone()方法可以生成一个被选元素的副本，即复制了一个被选元素，包含它的节点，文本，属性。 <code>$(selector).clone()</code>。</p>
</blockquote>
</li>
<li>replaceWith()和replaceAll()替换内容<blockquote>
<p>它们在使用时，内容和被替换元素所在的位置不同，<code>$(selector).replaceWith(content)</code>,<code>$(content).replaceAll(selector)</code>。</p>
</blockquote>
</li>
<li>使用wrap()和wrapInner()方法包裹元素的内容<blockquote>
<p>前者用于包裹元素本身，后者用于包裹元素的内容，调用格式为<code>$(selector).wrap(wrapper)</code>,<code>$(selector).wrapInner(wrapper)</code>。</p>
</blockquote>
</li>
<li>使用each方法遍历元素<blockquote>
<p>使用时，通过回调函数返回遍历元素的序列号。<code>$(&#39;span&#39;).each(function(index){if(index==2){$(this).addClass(&#39;focus&#39;);}});</code>。</p>
</blockquote>
</li>
<li>使用remove()和empty()方法删除元素<blockquote>
<p>remove()方法删除所选元素本身和子元素，该方法可以添加过滤参数指定要删除的某些元素，而empty()方法则只删除所选元素的子元素。</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jquery基本方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
      <category term="jquery" scheme="https://muleimulei.github.io/categories/JavaScript/jquery/"/>
    
    
      <category term="jquery" scheme="https://muleimulei.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>jquery选择器</title>
    <link href="https://muleimulei.github.io/2017/04/08/jquery/jquery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://muleimulei.github.io/2017/04/08/jquery/jquery选择器/</id>
    <published>2017-04-08T06:24:54.484Z</published>
    <updated>2017-04-08T10:22:32.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>jquery选择器使用</p>
</blockquote>
<a id="more"></a>
<h1 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h1><ol>
<li>#id选择器<br> jquery能够使用css选择器来操作网页中的标签元素。如果你想要通过一个ID号去查找一个元素，<code>$(&#39;#my_id&#39;)</code>，其中#my_id表示根据ID选择器获取页面中的指定标签元素，且返回唯一一个元素。</li>
<li>element选择器<br> 其中element就是元素的名称</li>
<li>.class选择器<br> <code>$(&#39;.class&#39;)</code> 其中, .class参数表示元素的css类别(类选择器名称)</li>
<li>sele1,sele2,…,seleN选择器<br> 有时需要精确的选择任意多个指定的元素。<code>$(&#39;sele1,sele2,...seleN&#39;)</code> ,其中sele1，sele2到seleN为有效选择器，每个选择器之间用逗号来隔开。它们可以是之前提及的各种类型选择器，如<code>$(&#39;#id&#39;),$(&#39;.class&#39;),$(&#39;selector&#39;)</code> 选择器等。</li>
<li>ance , desc 选择器<br> <code>$(&#39;ance desc&#39;)</code>,其中ance,desc是使用空格隔开的两个参数,ance表示父元素,desc表示后代元素，包括子元素，孙元素等。两个元素都可以通过选择器来获取。</li>
<li>parent &gt; child<br> <code>$(&#39;parent &gt; child&#39;)</code>，它所选择的目标是子集元素，相当于一个家庭中的子辈们，但不包括孙辈。</li>
<li>prev + next 选择器<br> <code>$(&#39;prev + next&#39;)</code>,查找与”prev”元素紧邻的下一个”next”元素，并且只返回唯一一个元素。</li>
<li>prev ~ siblings选择器<br> <code>$(&#39;prev ~ siblings&#39;)</code> 获取prev元素后边全部紧邻的元素。</li>
<li>:first 过滤选择器<br> <code>$(&#39;li:first&#39;)</code> 得到一组相同标签中的第一个元素。</li>
<li>:eq(index)过滤选择器<br><code>$(&#39;li:eq(3)&#39;)</code>在一组标签元素数组中，灵活选择任意一个标签元素。</li>
<li>:contains(text)过滤选择器<br>希望按照文本内容来查找一个或多个元素，功能是选择包含指定字符串的全部元素。</li>
<li>:has(selector)过滤选择器<br><code>$(&#39;li:has(&#39;p&#39;)&#39;)</code>是获取选择器中包含指定元素名称的全部字符。</li>
<li>:hidden过滤选择器<br>获取全部不可见的元素，这些不可见的元素包括type属性值为hidden的元素，如<code>$(&#39;p:hidden&#39;)</code>。</li>
<li>:visible过滤选择器<br>获取全部的可见元素，也就是说，只要不将元素的display属性值设置为none,那么都可以获取该标签。</li>
<li>[attribute]包含属性选择器<br>用于选择包含给定属性的所有元素</li>
<li>[attribute=value]属性等于选择器<br>获取与属性名和属性值完全相同的全部元素，其中[]是专用于属性选择器的括号符。</li>
<li>[attribute!=’value’]属性不等于选择器<br>获取不包含属性名，或者与属性名和属性值不相同的全部元素</li>
<li>[attribute|=’value’]属性选择器<br>获取指定属性值等于给定字符串或以字符串为前缀(该字符串后跟一个连字符‘-’)的元素</li>
<li>[attribute*=’value’]属性包含过滤器<br>用于选择指定属性值包含给定字符串的所有元素</li>
<li>[attribute~=’value’]属性包含单词过滤器<br>用于选择指定属性值中包含给定单词(由空格分隔)的元素</li>
<li>[attribute^=’value’]属性开始过滤器<br>用于选择给定属性是以特定值开始的所有元素</li>
<li>[attribute$=’value’]属性结尾过滤器<br>用于选择给定属性是以某特定值结尾的所有元素</li>
<li>:first-child 获取属于其父元素和所有兄弟元素的第一个元素</li>
<li>:last-child 获取每个父元素中返回的最后一个子元素</li>
<li>:img图像域选择器<br>当一个input元素的type属性值设为”image”时，该元素就是一个图像域，```$(‘#form :img’)</li>
<li>:button表单按钮选择器<br>获取’type’值为button的input和button这两类普通元素</li>
<li>:checked选择状态选择器(复选框，单选按钮)<br>获取处于选重状态的全部元素</li>
<li>:select 选中状态选择器<br>只能获取select下拉列表框中全部处于选中状态的option选项元素。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;jquery选择器使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
      <category term="jquery" scheme="https://muleimulei.github.io/categories/JavaScript/jquery/"/>
    
    
      <category term="jquery" scheme="https://muleimulei.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>canvas学习第三章</title>
    <link href="https://muleimulei.github.io/2017/04/08/canvas/canvas%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>https://muleimulei.github.io/2017/04/08/canvas/canvas学习第三章/</id>
    <published>2017-04-08T04:32:15.856Z</published>
    <updated>2017-04-08T06:23:39.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>canvas学习第三章</p>
</blockquote>
<a id="more"></a>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li>canvas文本API<ul>
<li>ctx.fillText([text],[x],[y],[width])<ul>
<li>text: 在画布上渲染的文本</li>
<li>x: 文本在画布上的x坐标</li>
<li>y: 文本在画布上的y坐标</li>
<li>width： 在画布上渲染文本的最大宽度</li>
</ul>
</li>
<li>ctx.font 设置所选用字体大小，榜重，样式，字体外观<ul>
<li>font style 字体样式</li>
<li>font weight 字体榜重</li>
<li>font size 字体大小</li>
<li>font face 字体外观</li>
</ul>
</li>
<li>ctx.strokeText([text],[x],[y],[maxwidth])</li>
<li>ctx.measureText([text]) 获得文字的宽</li>
</ul>
</li>
<li>canvas图像API<ul>
<li>ctx.drawIamge(image,dx,dy) <ul>
<li>image 图像对象</li>
<li>dx ，dy 定义画布上图像在左上角的位置</li>
</ul>
</li>
<li>ctx.drawImage(image,dx,dy,dw,dh) <ul>
<li>dw和dh代表在画布上绘制图像的矩形部分的宽和高</li>
</ul>
</li>
<li>ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh) <ul>
<li>sx,sy代表在画布上开始复制源图像的“原位置”</li>
<li>sw,sh代表从(sx,sy)出开始的矩形宽度与高度。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>综合代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset="UTF-8"&gt;</div><div class="line">&lt;title&gt;CH3EX3: Text Arranger 3.0&lt;/title&gt;</div><div class="line">&lt;script src="modernizr-1.6.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript" src="jscolor/jscolor.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line"></div><div class="line">window.addEventListener("load", eventWindowLoaded, false);  </div><div class="line">function eventWindowLoaded() &#123;</div><div class="line">    canvasApp();</div><div class="line">&#125;</div><div class="line">function canvasSupport () &#123;</div><div class="line">    return Modernizr.canvas;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function eventWindowLoaded() &#123;</div><div class="line">    var pattern = new Image();</div><div class="line">    pattern.src = "texture.jpg";</div><div class="line">    pattern.onload = eventAssetsLoaded;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function eventAssetsLoaded() &#123;</div><div class="line">    canvasApp();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function canvasApp() &#123;</div><div class="line">    var message = "your text"; //输入的文本</div><div class="line">    var fontSize = "50"; //字体大小</div><div class="line">    var fontFace = "serif"; //字体外观</div><div class="line">    var textFillColor ="#ff0000"; //填充字体颜色</div><div class="line">    var textAlpha =1; //透明度</div><div class="line">    var shadowX = 1; //阴影x轴偏移</div><div class="line">    var shadowY = 1; //阴影y轴偏移</div><div class="line">    var shadowBlur = 1; //模糊度</div><div class="line">    var shadowColor = "#707070"; //阴影颜色</div><div class="line">    var textBaseline = "middle"; //文字基线</div><div class="line">    var textAlign = "center"; //文字对齐方式</div><div class="line">    var fillOrStroke ="fill";</div><div class="line">    var fontWeight ="normal"; //字体榜重</div><div class="line">    var fontStyle = "normal";</div><div class="line">    var fillType = "colorFill";</div><div class="line">    var textFillColor2 ="#000000";</div><div class="line">    var pattern = new Image();</div><div class="line">    </div><div class="line">    if (!canvasSupport()) &#123;</div><div class="line">         return;</div><div class="line">    &#125;</div><div class="line">    var theCanvas = document.getElementById("canvasOne");</div><div class="line">    var context = theCanvas.getContext("2d"); </div><div class="line">        </div><div class="line">    var formElement = document.getElementById("textBox");</div><div class="line">    formElement.addEventListener("keyup", textBoxChanged, false);//监听文本框</div><div class="line">    </div><div class="line">    formElement = document.getElementById("fillOrStroke");</div><div class="line">    formElement.addEventListener("change", fillOrStrokeChanged, false); </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textSize");</div><div class="line">    formElement.addEventListener("change", textSizeChanged, false); </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textFillColor");</div><div class="line">    formElement.addEventListener("change", textFillColorChanged, false);    </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textFont");</div><div class="line">    formElement.addEventListener("change", textFontChanged, false); </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textBaseline");</div><div class="line">    formElement.addEventListener("change", textBaselineChanged, false); </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textAlign");</div><div class="line">    formElement.addEventListener("change", textAlignChanged, false);    </div><div class="line">    </div><div class="line">    formElement = document.getElementById("fontWeight");</div><div class="line">    formElement.addEventListener("change", fontWeightChanged, false);   </div><div class="line">    </div><div class="line">    formElement = document.getElementById("fontStyle");</div><div class="line">    formElement.addEventListener("change", fontStyleChanged, false);    </div><div class="line">    </div><div class="line">    formElement = document.getElementById("shadowX");</div><div class="line">    formElement.addEventListener("change", shadowXChanged, false);  </div><div class="line">    </div><div class="line">    formElement = document.getElementById("shadowY");</div><div class="line">    formElement.addEventListener("change", shadowYChanged, false);  </div><div class="line">    </div><div class="line">    formElement = document.getElementById("shadowBlur");</div><div class="line">    formElement.addEventListener("change", shadowBlurChanged, false);   </div><div class="line">    </div><div class="line">    formElement = document.getElementById("shadowColor");</div><div class="line">    formElement.addEventListener("change", shadowColorChanged, false);  </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textAlpha");</div><div class="line">    formElement.addEventListener("change", textAlphaChanged, false);    </div><div class="line">    </div><div class="line">    formElement = document.getElementById("textFillColor2");</div><div class="line">    formElement.addEventListener("change", textFillColor2Changed, false);   </div><div class="line">    </div><div class="line">    formElement = document.getElementById("fillType");</div><div class="line">    formElement.addEventListener("change", fillTypeChanged, false); </div><div class="line">    </div><div class="line">    formElement = document.getElementById("canvasWidth");</div><div class="line">    formElement.addEventListener("change", canvasWidthChanged, false);  </div><div class="line">    </div><div class="line">    formElement = document.getElementById("canvasHeight");</div><div class="line">    formElement.addEventListener("change", canvasHeightChanged, false);</div><div class="line">    </div><div class="line">    formElement = document.getElementById("canvasStyleWidth");</div><div class="line">    formElement.addEventListener("change", canvasStyleSizeChanged, false);  </div><div class="line">    </div><div class="line">    formElement = document.getElementById("canvasStyleHeight");</div><div class="line">    formElement.addEventListener("change", canvasStyleSizeChanged, false);</div><div class="line">    </div><div class="line">    formElement = document.getElementById("createImageData");</div><div class="line">    formElement.addEventListener("click", createImageDataPressed, false);       </div><div class="line">    </div><div class="line">    pattern.src = "texture.jpg";</div><div class="line">    </div><div class="line">    drawScreen();</div><div class="line">    </div><div class="line">    function drawScreen() &#123;</div><div class="line">        //Background</div><div class="line">        context.globalAlpha = 1; //全局透明度</div><div class="line">        context.shadowColor = "#707070"; //阴影颜色</div><div class="line">        context.shadowOffsetX = 0;</div><div class="line">        context.shadowOffsetY = 0;</div><div class="line">        context.shadowBlur = 0;</div><div class="line">        </div><div class="line">        context.fillStyle = "#ffffaa";</div><div class="line">        context.fillRect(0, 0, theCanvas.width, theCanvas.height);</div><div class="line">        //Box</div><div class="line">        context.strokeStyle = "#000000";</div><div class="line">        context.strokeRect(5,  5, theCanvas.width-10, theCanvas.height-10);</div><div class="line">        </div><div class="line">        //Text</div><div class="line">        context.textBaseline = textBaseline; //文字基线</div><div class="line">        context.textAlign = textAlign;</div><div class="line">        context.font = fontWeight + " " + fontStyle + " " + fontSize + "px " + fontFace;</div><div class="line">        </div><div class="line">        context.shadowColor =shadowColor;</div><div class="line">        context.shadowOffsetX = shadowX;</div><div class="line">        context.shadowOffsetY = shadowY;</div><div class="line">        context.shadowBlur = shadowBlur;</div><div class="line">        </div><div class="line">        context.globalAlpha = textAlpha;</div><div class="line">        </div><div class="line">        </div><div class="line">        var xPosition = (theCanvas.width/2);</div><div class="line">        var yPosition = (theCanvas.height/2);</div><div class="line">        </div><div class="line">        var metrics = context.measureText(message);</div><div class="line">        var textWidth = metrics.width;</div><div class="line">        </div><div class="line">        var tempColor;</div><div class="line">        if (fillType == "colorFill") &#123;</div><div class="line">            tempColor = textFillColor;</div><div class="line">        &#125; else if (fillType == "linearGradient") &#123;</div><div class="line">            var gradient = context.createLinearGradient(xPosition-textWidth/2, yPosition, textWidth, yPosition);</div><div class="line">            gradient.addColorStop(0,textFillColor);</div><div class="line">            gradient.addColorStop(.6,textFillColor2);</div><div class="line">            tempColor = gradient;</div><div class="line">        &#125; else if (fillType == "radialGradient") &#123;</div><div class="line">            var gradient = context.createRadialGradient(xPosition, yPosition, fontSize, xPosition+textWidth, yPosition, 1);</div><div class="line">            gradient.addColorStop(0,textFillColor);</div><div class="line">            gradient.addColorStop(.6,textFillColor2);</div><div class="line">            tempColor = gradient;</div><div class="line">        &#125; else if (fillType == "pattern") &#123;</div><div class="line">            var tempColor = context.createPattern(pattern,"repeat")</div><div class="line">        &#125; else &#123;</div><div class="line">            tempColor = textFillColor;</div><div class="line">        &#125;</div><div class="line">        switch(fillOrStroke) &#123;</div><div class="line">            case "fill":</div><div class="line">                context.fillStyle    = tempColor;</div><div class="line">                context.fillText  ( message,  xPosition ,yPosition);</div><div class="line">                break;</div><div class="line">            case "stroke":</div><div class="line">                context.strokeStyle = tempColor;</div><div class="line">                context.strokeText  ( message, xPosition,yPosition);</div><div class="line">                break;</div><div class="line">            case "both":</div><div class="line">                context.fillStyle    = tempColor;</div><div class="line">                context.fillText  ( message,  xPosition ,yPosition);</div><div class="line">                context.strokeStyle = "#000000";</div><div class="line">                context.strokeText  ( message, xPosition,yPosition);</div><div class="line">                break;      </div><div class="line">        &#125;               </div><div class="line">    &#125;</div><div class="line">    function textBoxChanged(e) &#123; //文本框字符改变时触发</div><div class="line">        var target =  e.target;</div><div class="line">        message = target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textBaselineChanged(e) &#123; //文字基线改变时触发</div><div class="line">        var target =  e.target;</div><div class="line">        textBaseline =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textAlignChanged(e) &#123; //文字水平对齐方式改变时触发</div><div class="line">        var target =  e.target;</div><div class="line">        textAlign =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function fillOrStrokeChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fillOrStroke =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textSizeChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fontSize = target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textFillColorChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        textFillColor = "#" + target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textFontChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fontFace =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function fontWeightChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fontWeight =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function fontStyleChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fontStyle =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function shadowXChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        shadowX =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function shadowYChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        shadowY =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function shadowBlurChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        shadowBlur =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function shadowColorChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        shadowColor =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textAlphaChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        textAlpha =  (target.value);</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function textFillColor2Changed(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        textFillColor2 = "#" + target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function fillTypeChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        fillType =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function canvasWidthChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        theCanvas.width =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    function canvasHeightChanged(e) &#123;</div><div class="line">        var target =  e.target;</div><div class="line">        theCanvas.height =  target.value;</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    function canvasStyleSizeChanged(e) &#123;</div><div class="line">        var styleWidth  = document.getElementById("canvasStyleWidth");</div><div class="line">        var styleHeight  = document.getElementById("canvasStyleHeight");</div><div class="line">        var styleValue = "width:" + styleWidth.value + "px; height:" + styleHeight.value +"px;";</div><div class="line">        theCanvas.setAttribute("style", styleValue );</div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    function createImageDataPressed(e) &#123;</div><div class="line">        var imageDataDisplay = document.getElementById("imageDataDisplay");</div><div class="line">        imageDataDisplay.value = theCanvas.toDataURL();</div><div class="line">        window.open(imageDataDisplay.value,"canavsImage","left=0,top=0,width=" + theCanvas.width + ",height=" + theCanvas.height +",toolbar=0,resizable=0");</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt; </div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div style="position: absolute; top: 50px; left: 50px;"&gt;</div><div class="line">&lt;canvas id="canvasOne" width="500" height="300"&gt;</div><div class="line"> Your browser does not support HTML 5 Canvas. </div><div class="line">&lt;/canvas&gt;</div><div class="line">&lt;form&gt;</div><div class="line">  Text: &lt;input id="textBox" placeholder="your text" /&gt;</div><div class="line">  &lt;br&gt; </div><div class="line">  Text Font: &lt;select id="textFont"&gt;</div><div class="line">  &lt;option value="serif"&gt;serif&lt;/option&gt;</div><div class="line">  &lt;option value="sans-serif"&gt;sans-serif&lt;/option&gt;</div><div class="line">  &lt;option value="cursive"&gt;cursive&lt;/option&gt;</div><div class="line">  &lt;option value="fantasy"&gt;fantasy&lt;/option&gt;</div><div class="line">  &lt;option value="monospace"&gt;monospace&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  Font Weight:</div><div class="line"> &lt;select id="fontWeight"&gt;</div><div class="line"> &lt;option value="normal"&gt;normal&lt;/option&gt;</div><div class="line"> &lt;option value="bold"&gt;bold&lt;/option&gt;</div><div class="line"> &lt;option value="bolder"&gt;bolder&lt;/option&gt;</div><div class="line"> &lt;option value="lighter"&gt;lighter&lt;/option&gt;</div><div class="line"> &lt;/select&gt;</div><div class="line"> &lt;br&gt;</div><div class="line"> Font Style:</div><div class="line"> &lt;select id="fontStyle"&gt;</div><div class="line"> &lt;option value="normal"&gt;normal&lt;/option&gt;</div><div class="line"> &lt;option value="italic"&gt;italic&lt;/option&gt;</div><div class="line"> &lt;option value="oblique"&gt;oblique&lt;/option&gt;</div><div class="line"> &lt;/select&gt;</div><div class="line"> &lt;br&gt;  </div><div class="line">  Text Size: &lt;input type="range" id="textSize"</div><div class="line">       min="0"</div><div class="line">       max="200"</div><div class="line">       step="1"</div><div class="line">       value="50"/&gt; </div><div class="line">  &lt;br&gt;</div><div class="line">  </div><div class="line">  Fill Type : &lt;select id="fillType"&gt;</div><div class="line">  &lt;option value="colorFill"&gt;Color Fill&lt;/option&gt;</div><div class="line">  &lt;option value="linearGradient"&gt;Linear Gradient&lt;/option&gt;</div><div class="line">  &lt;option value="radialGradient"&gt;Radial Gradient&lt;/option&gt;</div><div class="line">  &lt;option value="pattern"&gt;pattern&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  Text Color: &lt;input class="color" id="textFillColor" value="FF0000"/&gt; </div><div class="line">  &lt;br&gt;</div><div class="line">  Text Color 2: &lt;input class="color" id="textFillColor2" value ="000000"/&gt; </div><div class="line">  &lt;br&gt;</div><div class="line">  </div><div class="line">  Fill Or Stroke : &lt;select id="fillOrStroke"&gt;</div><div class="line">  &lt;option value="fill"&gt;fill&lt;/option&gt;</div><div class="line">  &lt;option value="stroke"&gt;stroke&lt;/option&gt;</div><div class="line">  &lt;option value="both"&gt;both&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  Text Baseline &lt;select id="textBaseline"&gt;</div><div class="line">  &lt;option value="middle"&gt;middle&lt;/option&gt;</div><div class="line">  &lt;option value="top"&gt;top&lt;/option&gt;</div><div class="line">  &lt;option value="hanging"&gt;hanging&lt;/option&gt;</div><div class="line">  &lt;option value="alphabetic"&gt;alphabetic&lt;/option&gt;</div><div class="line">  &lt;option value="ideographic"&gt;ideographic&lt;/option&gt;</div><div class="line">  &lt;option value="bottom"&gt;bottom&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  Text Align &lt;select id="textAlign"&gt;</div><div class="line">  &lt;option value="center"&gt;center&lt;/option&gt;</div><div class="line">  &lt;option value="start"&gt;start&lt;/option&gt;</div><div class="line">  &lt;option value="end"&gt;end&lt;/option&gt;</div><div class="line">  &lt;option value="left"&gt;left&lt;/option&gt;</div><div class="line">  &lt;option value="right"&gt;right&lt;/option&gt;</div><div class="line">  </div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;br&gt;</div><div class="line"> Alpha : &lt;input type="range" id="textAlpha"</div><div class="line">       min="0.0"</div><div class="line">       max="1.0"</div><div class="line">       step="0.01"</div><div class="line">       value="1.0"/&gt;</div><div class="line"> &lt;br&gt;      </div><div class="line"> Shadow X:&lt;input type="range" id="shadowX"</div><div class="line">       min="-100"</div><div class="line">       max="100"</div><div class="line">       step="1"</div><div class="line">       value="1"/&gt;</div><div class="line">&lt;br&gt;</div><div class="line">Shadow Y:&lt;input type="range" id="shadowY"</div><div class="line">       min="-100"</div><div class="line">       max="100"</div><div class="line">       step="1"</div><div class="line">       value="1"/&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">Shadow Blur: &lt;input type="range" id="shadowBlur"</div><div class="line">       min="1"</div><div class="line">       max="100"</div><div class="line">       step="1"</div><div class="line">       value="1" /&gt; </div><div class="line">&lt;br&gt;</div><div class="line">Shadow Color: &lt;input class="color" id="shadowColor" value="707070"/&gt; </div><div class="line">  &lt;br&gt;</div><div class="line"> Canvas Width:  &lt;input type="range" id="canvasWidth"</div><div class="line">       min="0"</div><div class="line">       max="1000"</div><div class="line">       step="1"</div><div class="line">       value="500"/&gt;</div><div class="line"> &lt;br&gt;</div><div class="line">  Canvas Height:</div><div class="line">  &lt;input type="range" id="canvasHeight"</div><div class="line">       min="0"</div><div class="line">       max="1000"</div><div class="line">       step="1"</div><div class="line">       value="300"/&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  Canvas Style Width:  &lt;input type="range" id="canvasStyleWidth"</div><div class="line">       min="0"</div><div class="line">       max="1000"</div><div class="line">       step="1"</div><div class="line">       value="500"/&gt;</div><div class="line"> &lt;br&gt;</div><div class="line">  Canvas Style Height:</div><div class="line">  &lt;input type="range" id="canvasStyleHeight"</div><div class="line">       min="0"</div><div class="line">       max="1000"</div><div class="line">       step="1"</div><div class="line">       value="300"/&gt;</div><div class="line">  &lt;br&gt;</div><div class="line"> &lt;input type="button" id="createImageData" value="Create Image Data"&gt;</div><div class="line"> &lt;br&gt;</div><div class="line"> &lt;br&gt;</div><div class="line"> &lt;textarea id="imageDataDisplay" rows=10 cols=30&gt;&lt;/textarea&gt;</div><div class="line"> &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;canvas学习第三章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="canvas" scheme="https://muleimulei.github.io/categories/canvas/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>canvas学习第二章</title>
    <link href="https://muleimulei.github.io/2017/04/07/canvas/cancas%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>https://muleimulei.github.io/2017/04/07/canvas/cancas学习第二章/</id>
    <published>2017-04-07T11:07:25.077Z</published>
    <updated>2017-04-08T04:32:41.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>canvas学习第二章</p>
</blockquote>
<a id="more"></a>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li>ctx.fillRect(x,y,width,height) 在位置(x,y)处以宽为width，高为height绘制一个矩形</li>
<li>ctx.strokeRect(x,y,width,height) 在位置(x,y)处以宽为width，高为height绘制一个矩形边框，他需要strokeStyle,lineWidth,lineJoin和miterLimit设置<ul>
<li>lineCap: 线段末端的形状<ul>
<li>butt: 默认值，端点是垂直于线段边缘的平直边缘</li>
<li>round: 端点是在线段边缘处以线宽为直径的半圆</li>
<li>square: 端点是在选段边缘处以线宽为长，以一半线宽为宽的矩形</li>
</ul>
</li>
<li>lineJoin: 定义两条线相交产生的拐角，可将其称为连接<ul>
<li>miter: 默认值，在连接外边缘延长相接</li>
<li>bevel: 连接处是一个对角线斜角</li>
<li>round: 连接处是一个圆</li>
</ul>
</li>
</ul>
</li>
<li>ctx.clearRect(x,y,width,height) 在位置(x,y)处以宽为width和高为height清除指定区域并使其完全透明(使用透明黑作为颜色)</li>
<li>当前路径和位图受canvas上下文控制，不属于保存的状态，保存当前状态到堆栈用：ctx.save()，调出最后存储的堆栈恢复画布用ctx.restore()</li>
<li>高级路径画法<ol>
<li>ctx.arc(x,y,radius,startAngle,endAngle,anticlockwise) antilockwise若为false，则顺时针画圆，若为true，则逆时针画圆</li>
<li>ctx.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y) 三次贝塞尔曲线</li>
<li>ctx.quadraticCurveTo(cpx,cpy,x,y) 二次贝塞尔曲线</li>
</ol>
</li>
<li>canvas裁切区域<ul>
<li>使用ctx.save(),ctx.restore(),ctx.rect(),ctx.clip()可以完成区域裁切</li>
</ul>
</li>
<li>旋转变换<ul>
<li>ctx.setTransform(1,0,0,1,0,0)和ctx.rotate() 变换在调用setTransform()或其他变换函数后立即应用到形状与路径上。</li>
</ul>
</li>
<li>缩放变换<ul>
<li>ctx.scale() 对图像进行缩放</li>
</ul>
</li>
<li>填充渐变形状 ：水平渐变，垂直渐变，对角线渐变，径向渐变<ul>
<li>水平渐变：var gr = ctx.createLinearGradient(0,0,100,0);</li>
<li>垂直渐变：var gr = ctx.createLinearGradient(0,0,0,100);</li>
<li>对角线渐变：var gr = ctx.createLinearGradient(0,0,100,100);</li>
<li>径向渐变：var gr = ctx.createRadialGradient(50,50,50,50,100);</li>
<li>给渐变添加断点：gr.addColorStop(.5,’rgb(0,255,0)’);</li>
<li>用图案填充：<ul>
<li>四种填充类型：repeat,repeat-x,repeat-y,no-repeat</li>
<li>var fill = ctx.createPattern(‘fillImg’,’repeat’);</li>
</ul>
</li>
</ul>
</li>
<li>创建阴影<ul>
<li>shadowOffsetX和shadowOffsetY值可以是正也可以为负，负值将会在左侧和上方创建阴影，反之，将会在底部创建阴影。shadowBlur属性用来设置阴影模糊效果的程度。这三个参数不受当前canvas变换矩阵影响，shadowColor可以是任何HTML4颜色字符串。<br>以下代码是关于划线：</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//round end. bevel join, at top left of canvas</span></div><div class="line">        context.strokeStyle = <span class="string">"black"</span>; <span class="comment">//need list of available colors</span></div><div class="line">        context.lineWidth=<span class="number">10</span>;</div><div class="line">        context.lineJoin=<span class="string">'bevel'</span>;</div><div class="line">        context.lineCap=<span class="string">'round'</span>;</div><div class="line">        context.beginPath();</div><div class="line">        context.moveTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        context.lineTo(<span class="number">25</span>, <span class="number">0</span>);</div><div class="line">        context.lineTo(<span class="number">25</span>,<span class="number">25</span>);</div><div class="line">        context.stroke();</div><div class="line">        context.closePath();</div><div class="line">        </div><div class="line">        <span class="comment">//round end, bevel join, not at top or left of canvas</span></div><div class="line">        context.beginPath();</div><div class="line">        context.moveTo(<span class="number">10</span>, <span class="number">50</span>);</div><div class="line">        context.lineTo(<span class="number">35</span>, <span class="number">50</span>);</div><div class="line">        context.lineTo(<span class="number">35</span>,<span class="number">75</span>);</div><div class="line">        context.stroke();</div><div class="line">        context.closePath();</div><div class="line">        </div><div class="line">        <span class="comment">//flat end, round join, not at top or left</span></div><div class="line">        context.lineJoin=<span class="string">'round'</span>;</div><div class="line">        context.lineCap=<span class="string">'butt'</span>;</div><div class="line">        context.beginPath();</div><div class="line">        context.moveTo(<span class="number">10</span>, <span class="number">100</span>);</div><div class="line">        context.lineTo(<span class="number">35</span>, <span class="number">100</span>);</div><div class="line">        context.lineTo(<span class="number">35</span>,<span class="number">125</span>);</div><div class="line">        context.stroke();</div><div class="line">        context.closePath();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>以下代码关于区域的裁切：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//在屏幕上绘制一个黑色的方块</span></div><div class="line">    context.fillStyle = <span class="string">"black"</span>;</div><div class="line">    context.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    <span class="comment">//保存当前上下文</span></div><div class="line">    context.save();</div><div class="line">    context.beginPath();</div><div class="line">    <span class="comment">//裁切画布从(0,0)到(50,50)的正方形</span></div><div class="line">    context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    context.clip();</div><div class="line">    <span class="comment">//绘制红色圆</span></div><div class="line">    context.beginPath();</div><div class="line">    context.strokeStyle = <span class="string">"red"</span>; <span class="comment">//need list of available colors</span></div><div class="line">    context.lineWidth=<span class="number">5</span>;</div><div class="line">    context.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">0</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">360</span>, <span class="literal">false</span>); <span class="comment">// full circle</span></div><div class="line">    context.stroke();</div><div class="line">    context.closePath();</div><div class="line">    context.restore();</div><div class="line">    <span class="comment">//裁切整个画布</span></div><div class="line">    context.beginPath();</div><div class="line">    context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);</div><div class="line">    context.clip();</div><div class="line">    <span class="comment">//蓝色圆</span></div><div class="line">    context.beginPath();</div><div class="line">    context.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">    context.lineWidth=<span class="number">5</span>;</div><div class="line">    context.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">0</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">360</span>, <span class="literal">false</span>);</div><div class="line">    context.stroke();</div><div class="line">    context.closePath();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>也可将其它canvas方法配合裁切区域使用，最常见的是arc()函数</p>
</blockquote>
<p>以下代码是关于旋转：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//绘制黑色正方形</span></div><div class="line">    ctx.fillStyle = <span class="string">'black'</span>;</div><div class="line">    ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">25</span>);</div><div class="line">    <span class="comment">//绘制红色正方形</span></div><div class="line">    ctx.setTransform(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> angle = <span class="number">45</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,</div><div class="line">        x = <span class="number">100</span>,y=<span class="number">100</span>,width=<span class="number">50</span>,height=<span class="number">50</span>;</div><div class="line">    ctx.translate(x+<span class="number">.5</span>*width,y+<span class="number">.5</span>*height);</div><div class="line">    ctx.rotate(angle);</div><div class="line">    ctx.fillStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.fillRect(<span class="number">-0.5</span>*width,<span class="number">-0.5</span>*height,width,height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缩放变换代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//绘制一个红色区域</span></div><div class="line">    ctx.setTransform(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> angle = <span class="number">45</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,</div><div class="line">        x = <span class="number">100</span>,y=<span class="number">100</span>,width=<span class="number">50</span>,height=<span class="number">50</span>;</div><div class="line">    ctx.translate(x+<span class="number">.5</span>*width,y+<span class="number">.5</span>*height);</div><div class="line">    ctx.scale(<span class="number">2</span>,<span class="number">2</span>);</div><div class="line">    ctx.fillStyle = <span class="string">'red'</span>;</div><div class="line">    ctx.fillRect(<span class="number">-0.5</span>*width,<span class="number">-0.5</span>*height,width,height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>渐变代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//径向渐变</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> gr = ctx.createRadialGradient(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">    <span class="comment">//添加颜色断点</span></div><div class="line">    gr.addColorStop(<span class="number">0</span>,<span class="string">'rgb(255,0,0)'</span>);</div><div class="line">    gr.addColorStop(<span class="number">0.5</span>,<span class="string">'rgb(0,255,0)'</span>);</div><div class="line">    gr.addColorStop(<span class="number">1</span>,<span class="string">'rgb(0,0,255)'</span>);</div><div class="line">    <span class="comment">//使用fillStyle生成渐变</span></div><div class="line">    ctx.fillStyle = gr;</div><div class="line">    ctx.arc(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//图案填充</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = <span class="string">'fill.gif'</span>;</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> gr = ctx.createPattern(img,<span class="string">'repeat'</span>);</div><div class="line">        ctx.fillStyle = gr;</div><div class="line">        ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>阴影代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawScreen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    context.fillStyle = <span class="string">'red'</span>; <span class="comment">//设置填充颜色</span></div><div class="line">    context.shadowOffsetX=<span class="number">4</span>;</div><div class="line">    context.shadowOffsetY=<span class="number">4</span>;</div><div class="line">    context.shadowColor=<span class="string">'black'</span>;</div><div class="line">    context.shadowBlur=<span class="number">4</span>; <span class="comment">//模糊度</span></div><div class="line">    context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);  </div><div class="line">    context.shadowOffsetX=<span class="number">-4</span>;</div><div class="line">    context.shadowOffsetY=<span class="number">-4</span>;</div><div class="line">    context.shadowColor=<span class="string">'black'</span>;</div><div class="line">    context.shadowBlur=<span class="number">4</span>;</div><div class="line">    context.fillRect(<span class="number">150</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);  </div><div class="line">    context.shadowOffsetX=<span class="number">10</span>;</div><div class="line">    context.shadowOffsetY=<span class="number">10</span>;</div><div class="line">    context.shadowColor=<span class="string">'rgb(100,100,100)'</span>;</div><div class="line">    context.shadowBlur=<span class="number">8</span>;</div><div class="line">    context.arc(<span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">0</span>, (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*<span class="number">360</span>, <span class="literal">false</span>);</div><div class="line">    context.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;canvas学习第二章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="canvas" scheme="https://muleimulei.github.io/categories/canvas/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>canvas学习第一章</title>
    <link href="https://muleimulei.github.io/2017/04/07/canvas/canvas%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>https://muleimulei.github.io/2017/04/07/canvas/canvas学习第一章/</id>
    <published>2017-04-07T10:28:34.438Z</published>
    <updated>2017-04-07T16:36:46.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>canvas学习第一章</p>
</blockquote>
<a id="more"></a>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul>
<li>ctx.fillStyle = ‘#000000’ 设置文本颜色</li>
<li>ctx.font = ‘20px _sans’ 设置字体大小与字号</li>
<li>ctx.textBaseline = ‘top’ 设置字体垂直对齐方式</li>
<li>ctx.fillText(‘Hello World’,195,80) 将测试文本输出到屏幕上</li>
<li>ctx.strokeStyle = ‘#000000’ 用于方块边框的颜色</li>
<li>ctx.strokeRect(5,5,490,290) 绘制矩形边框</li>
<li>ctx.fillRect(0,0,500,300) 填充矩形</li>
<li>canvas.toDataURL() 这个方法返回的数据是代表当前canvas对象产生的位图字符串，就像屏幕的一个快照，通过提供一个不同MIME类型作为参数，可以返回不同的数据格式。基本的格式是image/png，但也可以获取image/jpeg和其它格式。</li>
<li>绘制图片 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">image.src = <span class="string">'hello.gif'</span>;</div><div class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//回调函数在image加载成功时触发</span></div><div class="line">    ctx.drawImage(image,<span class="number">160</span>,<span class="number">130</span>); <span class="comment">//图像对象，与坐标</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="我们利用以上知识来制作一个猜字母小游戏"><a href="#我们利用以上知识来制作一个猜字母小游戏" class="headerlink" title="我们利用以上知识来制作一个猜字母小游戏"></a>我们利用以上知识来制作一个猜字母小游戏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;CH1Ex4: Guesss The Letter Game &lt;/title&gt;</div><div class="line">&lt;script src=&quot;modernizr-1.6.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">//当页面加载完成时触发eventWindowLoaded方法</div><div class="line">window.addEventListener(&apos;load&apos;, eventWindowLoaded, false);</div><div class="line">var Debugger = function () &#123; &#125;;</div><div class="line">Debugger.log = function (message) &#123;</div><div class="line">    try &#123;</div><div class="line">        console.log(message);</div><div class="line">    &#125; catch (exception) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function eventWindowLoaded() &#123;</div><div class="line">    canvasApp();</div><div class="line">&#125;</div><div class="line">function canvasSupport () &#123;</div><div class="line">    return Modernizr.canvas;</div><div class="line">&#125;</div><div class="line">function eventWindowLoaded() &#123;</div><div class="line">    canvasApp();</div><div class="line">&#125;</div><div class="line">function canvasApp() &#123;</div><div class="line">    var guesses = 0; //猜的次数</div><div class="line">    var message = &quot;Guess The Letter From a (lower) to z (higher)&quot;;</div><div class="line">    var letters = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;j&quot;,&quot;k&quot;,&quot;l&quot;,&quot;m&quot;,&quot;n&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;,&quot;t&quot;,&quot;u&quot;,&quot;v&quot;,&quot;w&quot;,&quot;x&quot;,&quot;y&quot;,&quot;z&quot;];</div><div class="line">    var today = new Date();</div><div class="line">    var letterToGuess = &quot;&quot;; //要猜的字母</div><div class="line">    var higherOrLower = &quot;&quot;; //键盘按下的字母是大还是小</div><div class="line">    var lettersGuessed; //键盘按下的字母</div><div class="line">    var gameOver = false;</div><div class="line">    </div><div class="line">    if (!canvasSupport()) &#123;</div><div class="line">             return;</div><div class="line">    &#125;</div><div class="line">    var theCanvas = document.getElementById(&quot;canvasOne&quot;);</div><div class="line">    var context = theCanvas.getContext(&quot;2d&quot;);  //获得canvas的上下文</div><div class="line">    initGame(); //初始化游戏</div><div class="line">    function initGame() &#123;</div><div class="line">        var letterIndex = Math.floor(Math.random() * letters.length);</div><div class="line">        letterToGuess = letters[letterIndex]; //随机生成一个字母</div><div class="line">        guesses = 0;</div><div class="line">        lettersGuessed = []; //存储已经猜的字母</div><div class="line">        gameOver = false; //游戏成功与否标注位</div><div class="line">        window.addEventListener(&quot;keyup&quot;,eventKeyPressed,true); //监听键盘事件</div><div class="line">        var formElement = document.getElementById(&quot;createImageData&quot;); //生成快照</div><div class="line">        formElement.addEventListener(&apos;click&apos;, createImageDataPressed, false);       </div><div class="line">        drawScreen();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function eventKeyPressed(e) &#123;</div><div class="line">        if (!gameOver) &#123;</div><div class="line">            var letterPressed = String.fromCharCode(e.keyCode); //获得键入的字母</div><div class="line">            letterPressed = letterPressed.toLowerCase(); //转换成小写</div><div class="line">            guesses++; //猜测次数加一</div><div class="line">            lettersGuessed.push(letterPressed); //存储到数组中</div><div class="line">            if (letterPressed == letterToGuess) &#123; //如果猜对了</div><div class="line">                gameOver = true; //标志位置true</div><div class="line">            &#125; else &#123;</div><div class="line">                letterIndex = letters.indexOf(letterToGuess); //被猜的字母在数组中的位置</div><div class="line">                guessIndex = letters.indexOf(letterPressed); //键入的字母在数组中的位置</div><div class="line">                Debugger.log(guessIndex);//控制台调试</div><div class="line">                if (guessIndex &lt; 0) &#123; //如果输入的不是字母，返回-1</div><div class="line">                    higherOrLower = &quot;That is not a letter&quot;;</div><div class="line">                &#125; else if (guessIndex &gt; letterIndex) &#123; //输入偏大</div><div class="line">                    higherOrLower = &quot;Lower&quot;;</div><div class="line">                &#125; else &#123;</div><div class="line">                    higherOrLower = &quot;Higher&quot;; //输入偏小</div><div class="line">                &#125;                    </div><div class="line">            &#125;</div><div class="line">            drawScreen();</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">    function drawScreen() &#123;</div><div class="line">        //绘制背景</div><div class="line">        context.fillStyle = &quot;#ffffaa&quot;;</div><div class="line">        context.fillRect(0, 0, 500, 300);</div><div class="line">        //绘制边框</div><div class="line">        context.strokeStyle = &quot;#000000&quot;; </div><div class="line">        context.strokeRect(5,  5, 490, 290);</div><div class="line">        context.textBaseline = &quot;top&quot;;</div><div class="line">        //绘制日期</div><div class="line">        context.fillStyle    = &quot;#000000&quot;;</div><div class="line">        context.font         = &quot;10px _san&quot;;</div><div class="line">        context.fillText  (today, 150 ,10);</div><div class="line">        //绘制消息</div><div class="line">        context.fillStyle    = &quot;#FF0000&quot;;</div><div class="line">        context.font         = &quot;14px _sans&quot;;</div><div class="line">        context.fillText  (message, 125, 30);</div><div class="line">        //绘制猜测次数</div><div class="line">        context.fillStyle    = &quot;#109910&quot;;</div><div class="line">        context.font         = &quot;16px _sans&quot;;</div><div class="line">        context.fillText  (&apos;Guesses: &apos; + guesses, 215, 50);</div><div class="line">        //输入是大还是小</div><div class="line">        context.fillStyle    = &quot;#000000&quot;;</div><div class="line">        context.font         = &quot;16px _sans&quot;;</div><div class="line">        context.fillText  (&quot;Higher Or Lower: &quot; + higherOrLower, 150,125);</div><div class="line">        //Letters Guessed</div><div class="line">        context.fillStyle    = &quot;#FF0000&quot;;</div><div class="line">        context.font         = &quot;16px _sans&quot;;</div><div class="line">        context.fillText  (&quot;Letters Guessed: &quot; + lettersGuessed.toString(), 10, 260);</div><div class="line">        if (gameOver) &#123;</div><div class="line">            context.fillStyle    = &quot;#FF0000&quot;;</div><div class="line">            context.font         = &quot;40px _sans&quot;;</div><div class="line">            context.fillText  ( &quot;You Got it!&quot;, 150, 180);</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    function createImageDataPressed(e) &#123;</div><div class="line">        window.open(theCanvas.toDataURL(),&quot;canavsImage&quot;,&quot;left=0,top=0,width=&quot; + theCanvas.width + &quot;,height=&quot; + theCanvas.height +&quot;,toolbar=0,resizable=0&quot;);   </div><div class="line">    &#125;       </div><div class="line">&#125;</div><div class="line">&lt;/script&gt; </div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div style=&quot;position: absolute; top: 50px; left: 50px;&quot;&gt;</div><div class="line">&lt;canvas id=&quot;canvasOne&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;</div><div class="line"> Your browser does not support HTML 5 Canvas. </div><div class="line">&lt;/canvas&gt;</div><div class="line">&lt;form&gt;</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;createImageData&quot; value=&quot;Export Canvas Image&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;canvas学习第一章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="canvas" scheme="https://muleimulei.github.io/categories/canvas/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的reduce如何工作</title>
    <link href="https://muleimulei.github.io/2017/04/07/JavaScript/JavaScript%E7%9A%84Reduce%E6%96%B9%E6%B3%95%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C/"/>
    <id>https://muleimulei.github.io/2017/04/07/JavaScript/JavaScript的Reduce方法如何工作/</id>
    <published>2017-04-07T08:17:33.093Z</published>
    <updated>2017-04-07T10:23:35.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>JavaScript的reduce如何工作</p>
</blockquote>
<a id="more"></a>
<h3 id="一个简单的问题，你如何来求一个数组的和。"><a href="#一个简单的问题，你如何来求一个数组的和。" class="headerlink" title="一个简单的问题，你如何来求一个数组的和。"></a>一个简单的问题，你如何来求一个数组的和。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">29</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">23</span>];</div><div class="line"><span class="keyword">const</span> sum = arr.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>total+amount);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//81</span></div></pre></td></tr></table></figure>
<ul>
<li>在这个例子中，reduce接受两个参数，total参数和amount参数。</li>
<li>reduce函数循环遍历数组，像for循环一样。</li>
<li>当循环开始时，total参数是最左边的29，amount参数值是27.</li>
<li>函数会把total的值加上amount的值，然后赋值给total。</li>
<li>然后下次函数total的值为56，amount的值为2，一直向右循环，直到没有数据时函数会把total的值返回。</li>
</ul>
<h3 id="计算数组的平均值。"><a href="#计算数组的平均值。" class="headerlink" title="计算数组的平均值。"></a>计算数组的平均值。</h3><p>reduce方法中的函数其余的参数，剩余第一个参数的含义为，数据在数组中的下标（从零开始），最后一个为数组本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">29</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">23</span>];</div><div class="line"><span class="keyword">const</span> average = arr.reduce(<span class="function">(<span class="params">total,amount,index,array</span>)=&gt;</span>&#123;</div><div class="line">    total+=amount;</div><div class="line">    <span class="keyword">if</span>(index===array.length<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> total/array.length;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(average);<span class="comment">//20.25</span></div><div class="line"><span class="string">``</span><span class="string">`</span></div></pre></td></tr></table></figure></p>
<h3 id="如何用reduce方法返回一个数组。"><a href="#如何用reduce方法返回一个数组。" class="headerlink" title="如何用reduce方法返回一个数组。"></a>如何用reduce方法返回一个数组。</h3><p>上面的例子都是返回一个数值，你也可以返回一个数组，这就需要用到reduce函数的第二个参数。指定reduce方法第一个参数函数的第一个参数。在以前的例子中，我们忽略了它。默认为数组的第一个数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">29</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">23</span>];</div><div class="line"><span class="keyword">const</span> average = arr.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123;  <span class="comment">//total为29，amount为27</span></div><div class="line">    total+=amount;</div><div class="line">    <span class="keyword">if</span>(index===array.length<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> total/array.length;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>但如果我们给reduce函数加上了第二个参数如：10，代码如下：这时total为10，amount变成了数组的第一个数据29<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">29</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">23</span>];</div><div class="line"><span class="keyword">const</span> average = arr.reduce(<span class="function">(<span class="params">total,amount,index,array</span>)=&gt;</span>&#123;  <span class="comment">//total为29，amount为27</span></div><div class="line">    total+=amount;</div><div class="line">    <span class="keyword">if</span>(index===array.length<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> total/array.length;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div><div class="line">&#125;,<span class="number">10</span>); <span class="comment">//此时平均值的结果的计算要数组元素加上10，在求平均值22.75</span></div></pre></td></tr></table></figure></p>
<p>有了上面的知识，我们可以把reduce的第二个参数设置为数组，作为参数传入。就可以返回数组。代码如下(将数组数据乘二返回)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = arr.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123; <span class="comment">//注意此时的total为[],amount为2</span></div><div class="line">    total.push(amount*<span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;,[]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(doubled); <span class="comment">//[4,6,8,10]</span></div></pre></td></tr></table></figure></p>
<p>我们也可以在其中添加if判断，过滤掉我们不需要的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = arr.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123; <span class="comment">//注意此时的total为[],amount为2</span></div><div class="line">    <span class="keyword">if</span>(amount&gt;<span class="number">3</span>)&#123;</div><div class="line">        total.push(amount*<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;,[]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(doubled); <span class="comment">//[8,10]</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>上面的方法是map和filter方法被reduce方法重写，或许没有map与filter方法更容易让人理解，但reduce方法的好处是你可以综合使用它们，并且操作大量的数据。</p>
</blockquote>
<h3 id="我们再来讨论一个问题，你有一个集合，想知道每一个元素在集合中的数目。"><a href="#我们再来讨论一个问题，你有一个集合，想知道每一个元素在集合中的数目。" class="headerlink" title="我们再来讨论一个问题，你有一个集合，想知道每一个元素在集合中的数目。"></a>我们再来讨论一个问题，你有一个集合，想知道每一个元素在集合中的数目。</h3><p>我们可以利用reduce来解决<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> basket = [<span class="string">'banana'</span>,<span class="string">'cherry'</span>,<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'cherry'</span>,<span class="string">'apple'</span>,<span class="string">'orange'</span>];</div><div class="line"><span class="keyword">const</span> count = basket.reduce(<span class="function">(<span class="params">total,fruit</span>)=&gt;</span>&#123;</div><div class="line">    total[fruit] = (total[fruit]||<span class="number">0</span>)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> total;    </div><div class="line">&#125;,&#123;&#125;);</div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">//&#123;banana: 2, cherry: 2, apple: 2, orange: 1&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="使用reduce方法也可以将嵌套数组扁（数组里面嵌套数组）平化为一个数组（与嵌套数组意思相反）"><a href="#使用reduce方法也可以将嵌套数组扁（数组里面嵌套数组）平化为一个数组（与嵌套数组意思相反）" class="headerlink" title="使用reduce方法也可以将嵌套数组扁（数组里面嵌套数组）平化为一个数组（与嵌套数组意思相反）"></a>使用reduce方法也可以将嵌套数组扁（数组里面嵌套数组）平化为一个数组（与嵌套数组意思相反）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]];</div><div class="line"><span class="keyword">const</span> flat = data.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">return</span> total.concat(amount);</div><div class="line">&#125;,[]);</div><div class="line"><span class="built_in">console</span>.log(flat);</div></pre></td></tr></table></figure>
<p>有时候数据嵌套太深，我们该如何处理,获得data数组中每个对象的中的颜色<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [&#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'happy'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'robin'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'green'</span>] </div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'tired'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'panther'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'black'</span>,<span class="string">'blue'</span>] </div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'sad'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'gold'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'red'</span>] </div><div class="line">            &#125;,</div><div class="line">        ];</div><div class="line"><span class="keyword">const</span> colors = data.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123;</div><div class="line">    amount.c.forEach(<span class="function"><span class="params">color</span>=&gt;</span>&#123;</div><div class="line">        total.push(color);    </div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;,[]);</div></pre></td></tr></table></figure></p>
<p>那我们如何获取颜色种类呢（去掉重复的颜色，只保留一个）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [&#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'happy'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'robin'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'green'</span>] </div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'tired'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'panther'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'green'</span>,<span class="string">'black'</span>,<span class="string">'blue'</span>] </div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">a</span>: <span class="string">'sad'</span>,</div><div class="line">                <span class="attr">b</span>: <span class="string">'gold'</span>,</div><div class="line">                <span class="attr">c</span>: [<span class="string">'blue'</span>,<span class="string">'red'</span>] </div><div class="line">            &#125;,</div><div class="line">        ];</div><div class="line"><span class="keyword">const</span> colors = data.reduce(<span class="function">(<span class="params">total,amount</span>)=&gt;</span>&#123;</div><div class="line">    amount.c.forEach(<span class="function"><span class="params">color</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">if</span>(total.indexOf(amount)===<span class="number">-1</span>)&#123;</div><div class="line">            total.push(color);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;,[]);</div></pre></td></tr></table></figure></p>
<h3 id="reduce的另一个强大之处是他可以处理函数"><a href="#reduce的另一个强大之处是他可以处理函数" class="headerlink" title="reduce的另一个强大之处是他可以处理函数"></a>reduce的另一个强大之处是他可以处理函数</h3><p>假设我们有一个函数集合，这些函数可以允许我们增加，减少，相乘，折半某一个数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> input+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> input<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> input*<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">half</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> input/<span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在某种情况下，我们需要对某一个数进行增加，减少，相乘，折半。我们需要写一个函数，返回((input+1)*2-1)/2,我们可以利用reduce函数创造一个管道来解决。</p>
<blockquote>
<p>管道是一系列函数把一个初始值转化为最终值的过程</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pipeline = [increment,double,decrement,half];</div><div class="line"><span class="keyword">const</span> result = pipeline.reduce(<span class="function">(<span class="params">total,fun</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">return</span> fun(total);</div><div class="line">&#125;,<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;JavaScript的reduce如何工作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript内置函数" scheme="https://muleimulei.github.io/tags/JavaScript%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>时间片轮转与高响应比优先算法</title>
    <link href="https://muleimulei.github.io/2017/04/02/OS/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E4%B8%8E%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>https://muleimulei.github.io/2017/04/02/OS/时间片轮转与高响应比优先调度算法/</id>
    <published>2017-04-02T14:53:13.349Z</published>
    <updated>2017-04-14T15:13:40.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>时间片轮转与高响应比优先算法</p>
</blockquote>
<a id="more"></a>
<h1 id="轮转调度算法"><a href="#轮转调度算法" class="headerlink" title="轮转调度算法"></a>轮转调度算法</h1><h4 id="轮转法的基本原理"><a href="#轮转法的基本原理" class="headerlink" title="轮转法的基本原理"></a>轮转法的基本原理</h4><hr>
<blockquote>
<p>在轮转(RR)法中，系统根据FCFS策略，将所有的就绪队列排成一个就绪队列，并可设置一定时间间隔（如30ms）产生一次终断，激活系统中的进程调度程序，完成一次调度，将CPU分配给队首进程，另其执行。当该进程的时间片耗尽或运行完毕时，系统再次将CPU分配给新的队首进程（或新到达的紧迫进程），由此，可保证就绪队列中的所有进程在一个确定的时间片内，都能获得一次CPU执行。</p>
</blockquote>
<h4 id="进程切换时机"><a href="#进程切换时机" class="headerlink" title="进程切换时机"></a>进程切换时机</h4><hr>
<h6 id="在RR调度算法中，应在何事进行进程的切换，可分为两种情况："><a href="#在RR调度算法中，应在何事进行进程的切换，可分为两种情况：" class="headerlink" title="在RR调度算法中，应在何事进行进程的切换，可分为两种情况："></a>在RR调度算法中，应在何事进行进程的切换，可分为两种情况：</h6><ol>
<li><p>若一个时间片尚未用完，正在运行的进程便已经完成，就立即激活调度程序，将他从就绪队列中删除，再调度就绪队列中队首的进程运行，并启动一个新的时间片。 </p>
</li>
<li><p>在一个时间片用完时，计时器中断处理程序被激活。如果进程尚未运行完毕，调度程序就把他送往就绪队列的尾部。</p>
</li>
</ol>
<h4 id="时间片大小确定"><a href="#时间片大小确定" class="headerlink" title="时间片大小确定"></a>时间片大小确定</h4><hr>
<p>如果选择的时间片小，将有利于短作业，因为它能在该时间片内完成。但时间片小，意味着会进行频繁的进程调度和进程上下文的切换，无疑会增加系统的开销。反之，若时间片选择得太长，且为使每个进程都能在一个时间片内完成。RR算法便会退化成FCFS算法，无法满足短作业和交互式用户的需求。<strong> 一个较为可取的时间片大小是略大于一次典型的交互所需要的时间，使大多数交互式进程能在一个时间片内完成</strong></p>
<h1 id="高响应比优先调度算法"><a href="#高响应比优先调度算法" class="headerlink" title="高响应比优先调度算法"></a>高响应比优先调度算法</h1><p>高响应比优先调度算法为每一个作业引入一个动态优先级，即优先级是可以改变的，令他随等待时间延长而增加，这将使长作业的优先级在等待期间不断的增加，等到足够的时间后，必然会有机会获得处理机。该优先级变化规律为：</p>
<center> <strong> 优先级 = (等待时间+要求服务时间)/要求服务时间 </strong> </center>

<p>由于等待时间与服务时间之和就是系统对该作业的响应时间，故该优先级又相当于响应比R<sub>p</sub>。优先级又可表示为：</p>
<center> <strong> 优先级 = (等待时间+要求服务时间)/要求服务时间 = 响应时间/要求服务时间 </strong> </center>

<h6 id="由上式可以看出"><a href="#由上式可以看出" class="headerlink" title="由上式可以看出"></a>由上式可以看出</h6><ol>
<li>如果作业的等待时间相同，则要求服务的时间愈短，其优先级愈高，因而类似于SJF算法，有利于短作业。</li>
<li>当要求服务的的时间相同时，作业的优先级又取决于其等待时间，因而又类似于FCFS算法。</li>
<li>对于长作业的优先级，可以随等待时间的增加而增大，当其等待时间足够长时，也可获得处理机。</li>
<li>在每次进行调度前，都需要进行响应比的计算，显然会增加系统开销。</li>
</ol>
<p>两种算法代码实现如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">//进程类</div><div class="line">function Process()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Process.list = []; //进程列表</div><div class="line">Process.task_num = 5;//进程数</div><div class="line">Process.regetRatioAndGetProcess = function(list)&#123; //获得响应比</div><div class="line">    list.forEach(function(item)&#123;</div><div class="line">        item.ratio = ((Date.parse(new Date()) - item.arriveTime) / item.runTime) +1; //一个进程结束后，重新计算响应比</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var maxRatio = 0,NO = -1;</div><div class="line">    list.forEach(function(item,index)&#123; //挑选出响应比最大的进程</div><div class="line">        if(item.ratio&gt;maxRatio)&#123;</div><div class="line">            maxRatio = item.ratio;</div><div class="line">            NO = index;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    return list.splice(NO,1)[0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//进程初始化</div><div class="line">Process.init = function()&#123;</div><div class="line">    Process.list.splice(0,Process.list.length);</div><div class="line">    for(var i = 0;i&lt;Process.task_num;i++)&#123;</div><div class="line">        Process.list.push(&#123;</div><div class="line">            id: i,//进程号</div><div class="line">            arriveTime: 0, //进程到达时间</div><div class="line">            ratio: 0, //响应比</div><div class="line">            runTime: (Math.floor(Math.random()*4)+2)*1000, //运行时间间隔为[2,6]s</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//-----------------------------------------------------------</div><div class="line">//高响应比优先调度算法</div><div class="line">var HRRN = &#123;</div><div class="line">    list:[], //记录进程响应时间</div><div class="line">    init_task: function(list,num)&#123;</div><div class="line">        list.forEach(function(item)&#123;</div><div class="line">            item.arriveTime = Date.parse(new Date()); //获得进程到达时间</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    //进程运行</div><div class="line">    run: function(list,num)&#123;</div><div class="line">        for(var i = 0;i&lt;num;i++)&#123;</div><div class="line">            var runItem = Process.regetRatioAndGetProcess(list); //得到响应比最大的进程</div><div class="line">            console.log(`第$&#123;runItem.id&#125;号进程开始运行：$&#123;new Date()&#125;`);</div><div class="line">            var t = Date.parse(new Date());</div><div class="line">            var exit = t + runItem.runTime;</div><div class="line">            while(true)&#123; //模拟进程运行</div><div class="line">                if(Date.parse(new Date()) &gt;=exit)&#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            console.log(`第$&#123;runItem.id&#125;号进程结束运行：$&#123;new Date()&#125;`);</div><div class="line">            //记录进程的响应时间 ：现在时间-到达时间</div><div class="line">            HRRN.list.push(&#123;</div><div class="line">                id: runItem.id,</div><div class="line">                responseTime: Date.parse(new Date()) - runItem.arriveTime</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //打印进程响应时间，计算平均响应周期</div><div class="line">    show:function()&#123;</div><div class="line">        var total = 0;</div><div class="line">        HRRN.list.forEach(function(item)&#123;</div><div class="line">            console.log(`$&#123;item.id&#125;的响应时间为$&#123;Math.floor(item.responseTime)&#125;`);</div><div class="line">            total+=Math.floor(item.responseTime);</div><div class="line">        &#125;);</div><div class="line">        console.log(`平均周转周期为$&#123;Math.floor(total/HRRN.list.length)/1000&#125;s`);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Process.init();</div><div class="line">HRRN.init_task(Process.list,Process.task_num);</div><div class="line">HRRN.run(Process.list,Process.task_num);</div><div class="line">HRRN.show();</div><div class="line"></div><div class="line">//---------------------------------------------------------------</div><div class="line">//时间片轮转算法</div><div class="line">var RR = &#123;</div><div class="line">    circle_size:4000,//时间片大小</div><div class="line">    list:[], //记录进程执行时间</div><div class="line">    init_task:function(list)&#123; //初始化进程</div><div class="line">        list.forEach(function(item)&#123;</div><div class="line">            item.arriveTime = Date.parse(new Date());</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    run:function(list)&#123;</div><div class="line">        while(true)&#123;</div><div class="line">            if(list.length===0) break; //进程全部运行完成后，退出死循环</div><div class="line">            var item = list.splice(0,1)[0]; //选出队首进程</div><div class="line">            var runTime = item.runTime;</div><div class="line">            var id = item.id;</div><div class="line">            console.log(`第$&#123;id&#125;号进程开始运行 :$&#123;new Date()&#125;`);</div><div class="line">            if(runTime&lt;RR.circle_size)&#123; //如果能够在本时间片内运行完</div><div class="line">                var exit = Date.parse(new Date()) + runTime;</div><div class="line">                while((Date.parse(new Date()))&lt; exit);</div><div class="line">                console.log(`第$&#123;id&#125;号进程结束运行,运行时间为$&#123;runTime/1000&#125;s :$&#123;new Date()&#125;`);</div><div class="line">                RR.list.push(&#123;</div><div class="line">                    id: item.id,</div><div class="line">                    responseTime: Date.parse(new Date()) - item.arriveTime</div><div class="line">                &#125;);</div><div class="line">            &#125;else&#123; //计算下一次需要的运行时间</div><div class="line">                item.runTime -= RR.circle_size;</div><div class="line">                list.push(item);</div><div class="line">                var exit = Date.parse(new Date()) + RR.circle_size;</div><div class="line">                while((Date.parse(new Date()))&lt; exit);</div><div class="line">                console.log(`$&#123;new Date()&#125;:第$&#123;id&#125;号进程时间片用完，处于等待状态`);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //打印每个进程的响应时间与平均周转周期</div><div class="line">    show:function()&#123;</div><div class="line">        var total = 0;</div><div class="line">        RR.list.forEach(function(item)&#123;</div><div class="line">            console.log(`$&#123;item.id&#125;的响应时间为$&#123;Math.floor(item.responseTime)&#125;`);</div><div class="line">            total+=Math.floor(item.responseTime);</div><div class="line">        &#125;);</div><div class="line">        console.log(`平均周转周期为$&#123;Math.floor(total/RR.list.length)/1000&#125;s`);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Process.init();</div><div class="line">RR.init_task(Process.list);</div><div class="line">RR.run(Process.list);</div><div class="line">RR.show();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;时间片轮转与高响应比优先算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="os" scheme="https://muleimulei.github.io/categories/os/"/>
    
    
  </entry>
  
  <entry>
    <title>JQuery的Deferred对象详解</title>
    <link href="https://muleimulei.github.io/2017/04/02/JavaScript/jquery%E7%9A%84Deferred%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>https://muleimulei.github.io/2017/04/02/JavaScript/jquery的Deferred对象详解/</id>
    <published>2017-04-02T10:24:29.261Z</published>
    <updated>2017-04-02T15:22:10.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>JQuery的Deferred对象就是Jquery的回调函数的解决方案</p>
</blockquote>
<a id="more"></a>
<p>在我们开发网站的过程中，我们经常会遇到很长的JavaScript操作。其中，既有异步的操作，如ajax读取服务器的数据，也有异步的操作，如遍历一个大型数组，他们都不是能立即返回结果的。通常的做法是，为他们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。简单地说，Deferred对象就是JQuery的回调函数的解决方案。在英语中，defer的意思是“延迟”，所以Deferred对象的含义是延迟到未来的某个点在执行。</p>
<h3 id="ajax的链式写法"><a href="#ajax的链式写法" class="headerlink" title="ajax的链式写法"></a>ajax的链式写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'test.html'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'ok'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'fail'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>在上面的代码中，$.ajax()接受一个对象参数，这个对象包含两个方法：success方法指定操作成功后的回调方法，error方法指定操作失败后的回调函数。</p>
<p>$.ajax()操作完成后，如果使用的是低于1.5.0版本的JQuery，返回的是XHR对象，没法进行链式操作；如果高于1.5.0版本，返回的是Deferred对象，可以进行链式操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(<span class="string">'text.html'</span>)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'ok'</span>);    </div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="指定同一操作的多个回调函数"><a href="#指定同一操作的多个回调函数" class="headerlink" title="指定同一操作的多个回调函数"></a>指定同一操作的多个回调函数</h3><p>Deferred对象的一大好处是允许你自由添加多个回调函数。<br>还是以上面的代码为例，如果ajax操作成功后，除了原来的回调函数，还想再运行一个回调函数。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(<span class="string">'test.html'</span>)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'ok'</span>);</div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>)</div><div class="line">&#125;)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'第二个回调'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>回调函数可以添加任意多个，它们按添加顺序执行</p>
<h3 id="为多个操作指定回调函数"><a href="#为多个操作指定回调函数" class="headerlink" title="为多个操作指定回调函数"></a>为多个操作指定回调函数</h3><p>Deferred对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。此时用到一个新的方法：<code>$.when()</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.when($.ajax(<span class="string">'test1.html'</span>),$.ajax(<span class="string">'test2.html'</span>))</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'ok'</span>)  </div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这段代码的意思是，先执行两个操作$.ajax()操作，如果都成功了，就运行done()指定的回调函数；如果有一个失败或都失败了，就执行fail()指定的回调函数。</p>
<h3 id="普通函数的回调函数接口（上）"><a href="#普通函数的回调函数接口（上）" class="headerlink" title="普通函数的回调函数接口（上）"></a>普通函数的回调函数接口（上）</h3><p>Deferred对象的最大优点，就是它把这一套回调函数接口，从ajax操作扩展到了所有操作。也就是说，任何一个操作（不管是ajax操作还是本地操作，也不管是异步操作还是同步操作，都可以使用Deferred对象的各种方法，指定回调函数）。</p>
<p>来看一个具体的例子。假如有一个很耗时的操作wait:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'执行完毕'</span>);</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks,<span class="number">5000</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为它指定回调函数，应该怎么做呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.when(wait())</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'haha'</span>);</div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>但是，这样写的话，done()方法会立即执行，起不到回调函数的作用。原因在于$.when()的参数只能是Deferred对象，所以必须对wait()改写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">//新建一个Deferred对象</span></div><div class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'执行完毕'</span>);</div><div class="line">        dtd.resolve();</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks,<span class="number">5000</span>);</div><div class="line">    <span class="keyword">return</span> dtd;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在，wait()函数返回的是Deferred对象，这样就可以加上链式操作了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.when(wait(dtd))</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'haha'</span>);</div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>wait()函数运行完，就会自动运行done()方法指定的回调函数。</p>
<h3 id="deferred-resolve-方法和deferred-reject-方法"><a href="#deferred-resolve-方法和deferred-reject-方法" class="headerlink" title="deferred.resolve()方法和deferred.reject()方法"></a>deferred.resolve()方法和deferred.reject()方法</h3><p>JQuery规定，Deferred对象有三种执行状态:未完成，已完成和已失败。如果执行状态是“已完成”(resolved)，Deferred对象立即调用done()方法指定的回调函数；如果执行状态是“已失败”(rejected)，调用fail()方法指定的回调函数；如果执行状态是“未完成”(pending)，调用progress()方法指定的回调函数。</p>
<p>前面部分的ajax操作，Deferred对象会根据返回结果，自动改变自身的执行状态；但在wait()函数中，这个状态必须有程序员手动指定。dtd.resolve()的意思是，将Deferred对象的执行状态从“未完成”改为<strong>“已完成”</strong>，从而触发done()方法。类似的，还存在一个deferred.reject()方法，作用是将Deferred对象的执行状态从“未完成”改为<strong>“已失败”</strong>，从而触发fail()方法。</p>
<h3 id="Deferred对象的promise-方法"><a href="#Deferred对象的promise-方法" class="headerlink" title="Deferred对象的promise()方法"></a>Deferred对象的promise()方法</h3><p>上面这种写法，还是有问题。那就是dtd是一个全局对象，所以它的执行状态可以从外部改变。<br>看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">//新建一个Deferred对象</span></div><div class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'执行完毕'</span>);</div><div class="line">        dtd.resolve();</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks,<span class="number">5000</span>);</div><div class="line">    <span class="keyword">return</span> dtd;</div><div class="line">&#125;;</div><div class="line">$.when(wait(dtd))</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'haha'</span>);</div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'fail'</span>);</div><div class="line">&#125;);</div><div class="line">dtd.resolve();</div></pre></td></tr></table></figure></p>
<p>在其尾部添加一行dtd.resolve()，这就改变了dtd对象的执行状态，因此导致done()方法立即执行，先跳出“haha”,然后5秒后在跳出”执行完毕”的提示框。<br>为了避免这种情况，JQuery提供了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```JavaScript</div><div class="line">    var dtd = $.Deferred(); // 新建一个Deferred对象</div><div class="line">　　var wait = function(dtd)&#123;</div><div class="line">　　　　var tasks = function()&#123;</div><div class="line">　　　　　　alert(&quot;执行完毕！&quot;);</div><div class="line">　　　　　　dtd.resolve(); // 改变Deferred对象的执行状态</div><div class="line">　　　　&#125;;</div><div class="line">　　　　setTimeout(tasks,5000);</div><div class="line">　　　　return dtd.promise(); // 返回promise对象</div><div class="line">　　&#125;;</div><div class="line">　　var d = wait(dtd); // 新建一个d对象，改为对这个对象进行操作</div><div class="line">　　$.when(d)</div><div class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</div><div class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</div><div class="line">　　d.resolve(); // 此时，这个语句是无效的</div></pre></td></tr></table></figure></p>
<p>在上面的这段代码中，wait()函数返回的是promise对象。然后，我们把回调函数绑定到这个对象上，而不是原来的Deferred对象。这样的好处是，无法改变这个对象的执行状态，要想改变执行状态，只能操作原来的Deferred对象。</p>
<p>不过最好的写法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个Deferred对象</span></div><div class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</div><div class="line">　　　　　　dtd.resolve(); <span class="comment">// 改变Deferred对象的执行状态</span></div><div class="line">　　　　&#125;;</div><div class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</div><div class="line">　　　　<span class="keyword">return</span> dtd.promise(); <span class="comment">// 返回promise对象</span></div><div class="line">　　&#125;;</div><div class="line">　　<span class="keyword">var</span> d = wait(dtd); <span class="comment">// 新建一个d对象，改为对这个对象进行操作</span></div><div class="line">　　$.when(d)</div><div class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</div><div class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Deferred对象的方法"><a href="#Deferred对象的方法" class="headerlink" title="Deferred对象的方法"></a>Deferred对象的方法</h3><ul>
<li>$.Deferred() 生成一个Deferred对象</li>
<li>deferred.progress() 该方法用于指定deferred对象状态为等待中的回调函数。但是她仅在deferred对象生成了进度通知时才会被调用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个deferred对象    </span></div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,</div><div class="line">        timer,</div><div class="line">        percent; <span class="comment">// 记录进度</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">11</span>) &#123;</div><div class="line">            alert(<span class="string">"执行完毕！"</span>);</div><div class="line">            dtd.resolve(); <span class="comment">// 此操作完成后改变deferred对象的执行状态</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            percent = (i * <span class="number">500</span>) / <span class="number">5000</span> * <span class="number">100</span> + <span class="string">'%'</span>;</div><div class="line">            dtd.notify(percent); <span class="comment">// 调用progress回调</span></div><div class="line">            i++;</div><div class="line">            setTimeout(tasks, <span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks, <span class="number">1000</span>);</div><div class="line">    <span class="keyword">return</span> dtd;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 绑定回调函数</span></div><div class="line">$.when(wait())</div><div class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"执行成功了！"</span>);</div><div class="line">    &#125;)</div><div class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"出错啦！"</span>);</div><div class="line">    &#125;)</div><div class="line">    .progress(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'执行中,已完成'</span>, data);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">// 执行中,已完成 10%</span></div><div class="line"><span class="comment">// 执行中,已完成 20%</span></div><div class="line"><span class="comment">// 执行中,已完成 30%</span></div><div class="line"><span class="comment">// 执行中,已完成 40%</span></div><div class="line"><span class="comment">// 执行中,已完成 50%</span></div><div class="line"><span class="comment">// 执行中,已完成 60%</span></div><div class="line"><span class="comment">// 执行中,已完成 70%</span></div><div class="line"><span class="comment">// 执行中,已完成 80%</span></div><div class="line"><span class="comment">// 执行中,已完成 90%</span></div><div class="line"><span class="comment">// 执行中,已完成 100%</span></div><div class="line"><span class="comment">// 之后弹出 执行完毕！和 执行成功了！</span></div></pre></td></tr></table></figure>
<blockquote>
<p>jQuery3.0以上版本对when方法做了大幅调整。向promise/A+靠齐，上面的写法中notify是触发不了when中的progress回调的，需要使用promise来给对象部署deferred接口或使用$.Deferred()传入函数名。</p>
</blockquote>
<ol>
<li>promise 给一个对象部署Deferred接口</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个deferred对象</span></div><div class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,</div><div class="line">        timer,</div><div class="line">        percent; <span class="comment">// 记录进度</span></div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">11</span>) &#123;</div><div class="line">            alert(<span class="string">"执行完毕！"</span>);</div><div class="line">            dtd.resolve(); <span class="comment">// 此操作完成后改变deferred对象的执行状态</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            percent = (i * <span class="number">500</span>) / <span class="number">5000</span> * <span class="number">100</span> + <span class="string">'%'</span>;</div><div class="line">            dtd.notify(percent); <span class="comment">// 调用progress回调</span></div><div class="line">            i++;</div><div class="line">            setTimeout(tasks, <span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks, <span class="number">1000</span>);        </div><div class="line">&#125;;</div><div class="line"><span class="comment">// 在wait对象上部署Deferred接口，此后就可以直接在wait上使用deferred对象promise后的方法了</span></div><div class="line">dtd.promise(wait);</div><div class="line"><span class="comment">// 在wait对象上使用deferred对象的方法指定回调。</span></div><div class="line">wait.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"执行成功了！"</span>);</div><div class="line">&#125;)</div><div class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"出错啦！"</span>);</div><div class="line">&#125;)</div><div class="line">.progress(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'执行中,已完成'</span>, data);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 执行</span></div><div class="line">wait(dtd);</div></pre></td></tr></table></figure>
<ol>
<li>使用$.Deferred传入函数名：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,</div><div class="line">        timer,</div><div class="line">        percent; <span class="comment">// 记录进度</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">11</span>) &#123;</div><div class="line">            alert(<span class="string">"执行完毕！"</span>);</div><div class="line">            dtd.resolve(); <span class="comment">// 此操作完成后改变deferred对象的执行状态</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            percent = (i * <span class="number">500</span>) / <span class="number">5000</span> * <span class="number">100</span> + <span class="string">'%'</span>;</div><div class="line">            dtd.notify(percent); <span class="comment">// 调用progress回调</span></div><div class="line">            i++;</div><div class="line">            setTimeout(tasks, <span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    setTimeout(tasks, <span class="number">1000</span>);</div><div class="line">    <span class="keyword">return</span> dtd;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 绑定回调函数</span></div><div class="line">$.Deferred(wait)  <span class="comment">//$.Deferred()的返回值将作为wait函数的参数</span></div><div class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"执行成功了！"</span>);</div><div class="line">    &#125;)</div><div class="line">    .fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"出错啦！"</span>);</div><div class="line">    &#125;)</div><div class="line">    .progress(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'执行中,已完成'</span>, data);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>deferred.done() 指定操作成功时的回调函数</li>
<li>deferred.fail() 指定操作失败时的回调函数</li>
<li>deferred.promise() 没有参数时，返回一个新的Deferred对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署deferred接口。</li>
<li>deferred.resolve() 手动改变deferred对象的运行状态为“已完成”，从而触发done()方法。</li>
<li>deferred.always() 不管Deferred对象如何，总是执行。</li>
<li>deferred.reject() 这个方法与deferred.resolve()正好相反，调用后将Deferred对象的运行状态变为“已失败”，从而立即触发fail()方法。</li>
<li>$.when() 为多个操作指定回调函数。</li>
<li>deferred.then() 有时为了省事，可以把done()和fail()合写在一起，这就是then()方法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.when($.ajax(<span class="string">'test.html'</span>))</div><div class="line">    .then(successFunc,failureFunc);</div></pre></td></tr></table></figure>
<p>如果then()有两个参数，那么第一个参数时done()方法的回调函数。如果then()只有一个参数，那么等同于done()。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;JQuery的Deferred对象就是Jquery的回调函数的解决方案&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="JQuery" scheme="https://muleimulei.github.io/tags/JQuery/"/>
    
      <category term="Deferred" scheme="https://muleimulei.github.io/tags/Deferred/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数柯里化</title>
    <link href="https://muleimulei.github.io/2017/03/22/JavaScript/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://muleimulei.github.io/2017/03/22/JavaScript/函数柯里化/</id>
    <published>2017-03-21T16:34:44.227Z</published>
    <updated>2017-04-07T07:58:48.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>什么是函数柯里化</p>
</blockquote>
<a id="more"></a>
<p>柯里化（Curring）,又称为部分求值，是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果。</p>
<h2 id="柯里化特点"><a href="#柯里化特点" class="headerlink" title="柯里化特点"></a>柯里化特点</h2><blockquote>
<ul>
<li>接受单一参数，将更多的参数通过回调函数来解决。</li>
<li>返回一个新的函数，用于处理所有的想要传入的参数。</li>
<li>需要利用call/apply与arguments伪数组收集参数。</li>
<li>返回的函数正是用来处理收集起来的参数。</li>
</ul>
</blockquote>
<h3 id="需要理解JavaScript函数的隐式转换"><a href="#需要理解JavaScript函数的隐式转换" class="headerlink" title="需要理解JavaScript函数的隐式转换"></a>需要理解JavaScript函数的隐式转换</h3><p>JavaScript是一种弱类型语言，它的隐式转换是非常灵活的。<br>如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>试着运行一下你会发现答案为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;<span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>接着我们在修改代码为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line">fn.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>你会发现答案为：20，接着我们在进行修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line">fn.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">fn.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn+<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>答案为30</p>
<p>当我们使用console.log()或者进行运算时，隐式转换就可能会发生。从上面的例子我们可以得到如下结论：</p>
<blockquote>
<p>当我们没有重新定义toString()与valueOf时，函数的隐式转换会调用默认的toString方法，他会将函数的定义内容转化为字符串返回。当我们主动定义了toString()/valueOf时，那么隐式转化的返回结果则由我们自己控制了。其中valueOf的优先级会比toString()高。</p>
</blockquote>
<h3 id="需要知道如何利用call-apply封装数组的map方法"><a href="#需要知道如何利用call-apply封装数组的map方法" class="headerlink" title="需要知道如何利用call/apply封装数组的map方法"></a>需要知道如何利用call/apply封装数组的map方法</h3><blockquote>
<p>map:对数组的每一项运行给定的函数，将每次函数调用返回的结果组成新的数组。</p>
</blockquote>
<p>具体实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype._map = <span class="function"><span class="keyword">function</span>(<span class="params">fn,ctx</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = <span class="keyword">this</span>,</div><div class="line">        temp = []; <span class="comment">//用来存储返回的新值</span></div><div class="line">        <span class="built_in">console</span>.log(list);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn ==<span class="string">'function'</span>)&#123;</div><div class="line">        <span class="comment">//遍历数组的每一项</span></div><div class="line">        list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            temp.push(fn.call(ctx,item,index));</div><div class="line">        &#125;);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.err(<span class="string">'TypeError:'</span>+fn+<span class="string">' must be a function'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]._map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item + index;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<h3 id="理解函数柯里化"><a href="#理解函数柯里化" class="headerlink" title="理解函数柯里化"></a>理解函数柯里化</h3><blockquote>
<p>考虑实现一个add方法，使结果能够满足如下预期：<br>add(1)(2) = 3<br>add(1,2,3)(4) = 10<br>add(1)(2)(3)(4)(5) = 15</p>
</blockquote>
<p>一开始如果只有两个参数，你可能会这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有三个的话，可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> a+b+c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有n个呢，难道要一直嵌套下去，而且2,3种情况也没有覆盖到。所以，要利用函数柯里化，利用闭包的特性，将所有参数，集中到最后的返回函数里进行计算并返回结果。因此，我们在写代码时，要将所有的参数集中起来处理。<br>具体实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">rest</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    rest.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> sum+=item;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">...rest</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _args = rest;</div><div class="line">    <span class="keyword">var</span> _adder = <span class="function"><span class="keyword">function</span>(<span class="params">...rest</span>)</span>&#123;</div><div class="line">        [].push.apply(_args, rest);</div><div class="line">        <span class="keyword">return</span> _adder;</div><div class="line">    &#125;</div><div class="line">    _adder.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="keyword">return</span> getSum(_args);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _adder();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="我们再来考虑函数柯里化的例子"><a href="#我们再来考虑函数柯里化的例子" class="headerlink" title="我们再来考虑函数柯里化的例子"></a>我们再来考虑函数柯里化的例子</h3><blockquote>
<p>假如有一个计算要求，需要我们将数组里面的每一项用我们自己想要的字符给连接起来。我们该怎么做？</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">chars</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(chars);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = arr.merge(<span class="string">'-'</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<blockquote>
<p>在考虑将数组每一位加一位数在连接起来</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">chars,number</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> item+number;    </div><div class="line">    &#125;).join(chars);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = arr.merge(<span class="string">'-'</span>,<span class="number">7</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<blockquote>
<p>我们并不知道自己要对数组进行何种处理，所以我们要把对数组的操作封装起来。我们现在只知道需要将他们处理后用字符串连接起来，所以不妨将他们的处理内容保存在函数中，而仅仅固定封装连起来的部分。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.merge = <span class="function"><span class="keyword">function</span>(<span class="params">fn,chars</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(fn).join(chars);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> num + item;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item - num;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//每一项加2合并</span></div><div class="line"><span class="keyword">var</span> res1 = arr.merge(add(<span class="number">2</span>),<span class="string">'-'</span>);</div><div class="line"><span class="comment">//每一项减2合并</span></div><div class="line"><span class="keyword">var</span> res2 = arr.merge(reduce(<span class="number">2</span>),<span class="string">'-'</span>);</div><div class="line"><span class="comment">//也可以直接传入回调函数</span></div><div class="line"><span class="keyword">var</span> res3 = arr.merge((<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item + num;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="number">2</span>),<span class="string">'-'</span>);</div></pre></td></tr></table></figure>
<h2 id="柯里化通用式"><a href="#柯里化通用式" class="headerlink" title="柯里化通用式"></a>柯里化通用式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = [].slice.apply(<span class="built_in">arguments</span>,[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> _args = args.concat([].slice.apply(<span class="built_in">arguments</span>));</div><div class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,_args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = currying(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> list.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;);</div><div class="line">&#125;,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="柯里化与bind"><a href="#柯里化与bind" class="headerlink" title="柯里化与bind"></a>柯里化与bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        fn.apply(ctx,_args.concat([].slice.call(<span class="built_in">arguments</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考链接 <a href="http://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="external">函数柯里化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;什么是函数柯里化&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="函数柯里化" scheme="https://muleimulei.github.io/tags/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript内置函数</title>
    <link href="https://muleimulei.github.io/2017/01/05/JavaScript/JavaScript%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>https://muleimulei.github.io/2017/01/05/JavaScript/JavaScript内置函数解析/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-04-07T08:15:36.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>这篇文章将介绍几个关于JavaScript内置函数的简单算法</p>
</blockquote>
<a id="more"></a>
<h2 id="将字符串重复一定次数"><a href="#将字符串重复一定次数" class="headerlink" title="将字符串重复一定次数"></a>将字符串重复一定次数</h2><h3 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用while循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">num,str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> repeatStr = <span class="string">''</span>;</div><div class="line">    <span class="keyword">while</span>(num--)&#123;</div><div class="line">        repeatStr+=str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> repeatStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用递归"><a href="#使用递归" class="headerlink" title="使用递归"></a>使用递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStringNumTimes</span>(<span class="params">str,times</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(times&lt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(times===<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> str + repeatStringNumTimes(str,times<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用es6的repeat"><a href="#使用es6的repeat" class="headerlink" title="使用es6的repeat"></a>使用es6的repeat</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStringNumTimes</span>(<span class="params">str,times</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> times&lt;<span class="number">0</span>?<span class="string">''</span>:str.repeat(times);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="检查某一字符串是否已特定字符串结束"><a href="#检查某一字符串是否已特定字符串结束" class="headerlink" title="检查某一字符串是否已特定字符串结束"></a>检查某一字符串是否已特定字符串结束</h2><h3 id="利用substr函数"><a href="#利用substr函数" class="headerlink" title="利用substr函数"></a>利用substr函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str,target</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.substr(-target.length)===target? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用内置函数"><a href="#使用内置函数" class="headerlink" title="使用内置函数"></a>使用内置函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str,target</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.endsWith(target);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h2><h3 id="使用split-reverse-join"><a href="#使用split-reverse-join" class="headerlink" title="使用split(),reverse(),join()"></a>使用split(),reverse(),join()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).reserve().join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用for循环"><a href="#使用for循环" class="headerlink" title="使用for循环"></a>使用for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> newStr = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> len = str.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        newStr+=str[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用递归-1"><a href="#使用递归-1" class="headerlink" title="使用递归"></a>使用递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseStr</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(str===<span class="string">''</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>)+reverseStr(str.substr(<span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="将一个句子的每个单词首字母大写，其余小写"><a href="#将一个句子的每个单词首字母大写，其余小写" class="headerlink" title="将一个句子的每个单词首字母大写，其余小写"></a>将一个句子的每个单词首字母大写，其余小写</h2><h3 id="使用for循环-1"><a href="#使用for循环-1" class="headerlink" title="使用for循环"></a>使用for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = str.toLowerCase().split(<span class="string">' '</span>);</div><div class="line">    <span class="keyword">var</span> len = list.length;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt;len;i++)&#123;</div><div class="line">        list[i] = list[i].charAt(<span class="number">0</span>).toUpperCase() + list[i].substr(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list.join(<span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用map方法"><a href="#使用map方法" class="headerlink" title="使用map方法"></a>使用map方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> word.charAt(<span class="number">0</span>).toUpperCase()+ word.slice(<span class="number">1</span>);</div><div class="line">    &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用replace方法"><a href="#使用replace方法" class="headerlink" title="使用replace方法"></a>使用replace方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> word.replace(word[<span class="number">0</span>],word[<span class="number">0</span>].toUpperCase());</div><div class="line">    &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;这篇文章将介绍几个关于JavaScript内置函数的简单算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://muleimulei.github.io/tags/JavaScript/"/>
    
      <category term="function" scheme="https://muleimulei.github.io/tags/function/"/>
    
  </entry>
  
</feed>
